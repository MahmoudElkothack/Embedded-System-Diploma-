
SIM800L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005044  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005490  08005490  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005490  08005490  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005490  08005490  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c90  200001e0  08005678  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e70  08005678  00021e70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bff  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000392e  00000000  00000000  00036e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  0003a738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003ba30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ad3a  00000000  00000000  0003cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d67  00000000  00000000  000578fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093799  00000000  00000000  00068661  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fbdfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005200  00000000  00000000  000fbe78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800513c 	.word	0x0800513c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800513c 	.word	0x0800513c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8000160:	b590      	push	{r4, r7, lr}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000168:	2300      	movs	r3, #0
 800016a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	7a1b      	ldrb	r3, [r3, #8]
 8000170:	2b03      	cmp	r3, #3
 8000172:	d102      	bne.n	800017a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000174:	230c      	movs	r3, #12
 8000176:	60fb      	str	r3, [r7, #12]
 8000178:	e005      	b.n	8000186 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	7a1b      	ldrb	r3, [r3, #8]
 800017e:	2b04      	cmp	r3, #4
 8000180:	d101      	bne.n	8000186 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8000182:	230a      	movs	r3, #10
 8000184:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	330c      	adds	r3, #12
 800018a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800018e:	f000 fb5a 	bl	8000846 <MQTTstrlen>
 8000192:	4603      	mov	r3, r0
 8000194:	3302      	adds	r3, #2
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	4413      	add	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	7edb      	ldrb	r3, [r3, #27]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d013      	beq.n	80001cc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	3324      	adds	r3, #36	; 0x24
 80001a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001ac:	f000 fb4b 	bl	8000846 <MQTTstrlen>
 80001b0:	4603      	mov	r3, r0
 80001b2:	1c9c      	adds	r4, r3, #2
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3330      	adds	r3, #48	; 0x30
 80001b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001bc:	f000 fb43 	bl	8000846 <MQTTstrlen>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4423      	add	r3, r4
 80001c4:	3302      	adds	r3, #2
 80001c6:	68fa      	ldr	r2, [r7, #12]
 80001c8:	4413      	add	r3, r2
 80001ca:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d103      	bne.n	80001dc <MQTTSerialize_connectLength+0x7c>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d00a      	beq.n	80001f2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3340      	adds	r3, #64	; 0x40
 80001e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001e4:	f000 fb2f 	bl	8000846 <MQTTstrlen>
 80001e8:	4603      	mov	r3, r0
 80001ea:	3302      	adds	r3, #2
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	4413      	add	r3, r2
 80001f0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d103      	bne.n	8000202 <MQTTSerialize_connectLength+0xa2>
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d00a      	beq.n	8000218 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	334c      	adds	r3, #76	; 0x4c
 8000206:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800020a:	f000 fb1c 	bl	8000846 <MQTTstrlen>
 800020e:	4603      	mov	r3, r0
 8000210:	3302      	adds	r3, #2
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	4413      	add	r3, r2
 8000216:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000218:	68fb      	ldr	r3, [r7, #12]
}
 800021a:	4618      	mov	r0, r3
 800021c:	3714      	adds	r7, #20
 800021e:	46bd      	mov	sp, r7
 8000220:	bd90      	pop	{r4, r7, pc}
	...

08000224 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b08a      	sub	sp, #40	; 0x28
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000234:	2300      	movs	r3, #0
 8000236:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000238:	2300      	movs	r3, #0
 800023a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8000240:	f04f 33ff 	mov.w	r3, #4294967295
 8000244:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f7ff ff8a 	bl	8000160 <MQTTSerialize_connectLength>
 800024c:	6238      	str	r0, [r7, #32]
 800024e:	6a38      	ldr	r0, [r7, #32]
 8000250:	f000 f9b2 	bl	80005b8 <MQTTPacket_len>
 8000254:	4602      	mov	r2, r0
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4293      	cmp	r3, r2
 800025a:	da03      	bge.n	8000264 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800025c:	f06f 0301 	mvn.w	r3, #1
 8000260:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8000262:	e0c3      	b.n	80003ec <MQTTSerialize_connect+0x1c8>
	}

	header.byte = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000268:	7e3b      	ldrb	r3, [r7, #24]
 800026a:	2201      	movs	r2, #1
 800026c:	f362 1307 	bfi	r3, r2, #4, #4
 8000270:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8000272:	7e3a      	ldrb	r2, [r7, #24]
 8000274:	f107 031c 	add.w	r3, r7, #28
 8000278:	4611      	mov	r1, r2
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fa29 	bl	80006d2 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8000280:	69fb      	ldr	r3, [r7, #28]
 8000282:	6a39      	ldr	r1, [r7, #32]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f92d 	bl	80004e4 <MQTTPacket_encode>
 800028a:	4602      	mov	r2, r0
 800028c:	69fb      	ldr	r3, [r7, #28]
 800028e:	4413      	add	r3, r2
 8000290:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7a1b      	ldrb	r3, [r3, #8]
 8000296:	2b04      	cmp	r3, #4
 8000298:	d10c      	bne.n	80002b4 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800029a:	f107 031c 	add.w	r3, r7, #28
 800029e:	4956      	ldr	r1, [pc, #344]	; (80003f8 <MQTTSerialize_connect+0x1d4>)
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 fa52 	bl	800074a <writeCString>
		writeChar(&ptr, (char) 4);
 80002a6:	f107 031c 	add.w	r3, r7, #28
 80002aa:	2104      	movs	r1, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fa10 	bl	80006d2 <writeChar>
 80002b2:	e00b      	b.n	80002cc <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80002b4:	f107 031c 	add.w	r3, r7, #28
 80002b8:	4950      	ldr	r1, [pc, #320]	; (80003fc <MQTTSerialize_connect+0x1d8>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fa45 	bl	800074a <writeCString>
		writeChar(&ptr, (char) 3);
 80002c0:	f107 031c 	add.w	r3, r7, #28
 80002c4:	2103      	movs	r1, #3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fa03 	bl	80006d2 <writeChar>
	}

	flags.all = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	7e9b      	ldrb	r3, [r3, #26]
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	7d3b      	ldrb	r3, [r7, #20]
 80002dc:	f362 0341 	bfi	r3, r2, #1, #1
 80002e0:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	7edb      	ldrb	r3, [r3, #27]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	bf14      	ite	ne
 80002ea:	2301      	movne	r3, #1
 80002ec:	2300      	moveq	r3, #0
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	7d3b      	ldrb	r3, [r7, #20]
 80002f2:	f362 0382 	bfi	r3, r2, #2, #1
 80002f6:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80002f8:	7d3b      	ldrb	r3, [r7, #20]
 80002fa:	f003 0304 	and.w	r3, r3, #4
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	2b00      	cmp	r3, #0
 8000302:	d013      	beq.n	800032c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800030a:	f003 0303 	and.w	r3, r3, #3
 800030e:	b2da      	uxtb	r2, r3
 8000310:	7d3b      	ldrb	r3, [r7, #20]
 8000312:	f362 03c4 	bfi	r3, r2, #3, #2
 8000316:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	b2da      	uxtb	r2, r3
 8000324:	7d3b      	ldrb	r3, [r7, #20]
 8000326:	f362 1345 	bfi	r3, r2, #5, #1
 800032a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000330:	2b00      	cmp	r3, #0
 8000332:	d103      	bne.n	800033c <MQTTSerialize_connect+0x118>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000338:	2b00      	cmp	r3, #0
 800033a:	d003      	beq.n	8000344 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800033c:	7d3b      	ldrb	r3, [r7, #20]
 800033e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000342:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000348:	2b00      	cmp	r3, #0
 800034a:	d103      	bne.n	8000354 <MQTTSerialize_connect+0x130>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000350:	2b00      	cmp	r3, #0
 8000352:	d003      	beq.n	800035c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000354:	7d3b      	ldrb	r3, [r7, #20]
 8000356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800035a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800035c:	7d3a      	ldrb	r2, [r7, #20]
 800035e:	f107 031c 	add.w	r3, r7, #28
 8000362:	4611      	mov	r1, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f9b4 	bl	80006d2 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	8b1b      	ldrh	r3, [r3, #24]
 800036e:	461a      	mov	r2, r3
 8000370:	f107 031c 	add.w	r3, r7, #28
 8000374:	4611      	mov	r1, r2
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f9bf 	bl	80006fa <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f107 001c 	add.w	r0, r7, #28
 8000382:	330c      	adds	r3, #12
 8000384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000386:	f000 f9ff 	bl	8000788 <writeMQTTString>
	if (options->willFlag)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7edb      	ldrb	r3, [r3, #27]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00d      	beq.n	80003ae <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f107 001c 	add.w	r0, r7, #28
 8000398:	3324      	adds	r3, #36	; 0x24
 800039a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800039c:	f000 f9f4 	bl	8000788 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	f107 001c 	add.w	r0, r7, #28
 80003a6:	3330      	adds	r3, #48	; 0x30
 80003a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003aa:	f000 f9ed 	bl	8000788 <writeMQTTString>
	}
	if (flags.bits.username)
 80003ae:	7d3b      	ldrb	r3, [r7, #20]
 80003b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d006      	beq.n	80003c8 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f107 001c 	add.w	r0, r7, #28
 80003c0:	3340      	adds	r3, #64	; 0x40
 80003c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003c4:	f000 f9e0 	bl	8000788 <writeMQTTString>
	if (flags.bits.password)
 80003c8:	7d3b      	ldrb	r3, [r7, #20]
 80003ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d006      	beq.n	80003e2 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f107 001c 	add.w	r0, r7, #28
 80003da:	334c      	adds	r3, #76	; 0x4c
 80003dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003de:	f000 f9d3 	bl	8000788 <writeMQTTString>

	rc = ptr - buf;
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	461a      	mov	r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80003ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3728      	adds	r7, #40	; 0x28
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	08005154 	.word	0x08005154
 80003fc:	0800515c 	.word	0x0800515c

08000400 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800040e:	2300      	movs	r3, #0
 8000410:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8000412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000414:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000416:	2300      	movs	r3, #0
 8000418:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f940 	bl	80006ac <readChar>
 800042c:	4603      	mov	r3, r0
 800042e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8000430:	7f3b      	ldrb	r3, [r7, #28]
 8000432:	f023 030f 	bic.w	r3, r3, #15
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b30      	cmp	r3, #48	; 0x30
 800043a:	d14b      	bne.n	80004d4 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800043c:	7f3b      	ldrb	r3, [r7, #28]
 800043e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000442:	b2db      	uxtb	r3, r3
 8000444:	461a      	mov	r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800044a:	7f3b      	ldrb	r3, [r7, #28]
 800044c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8000450:	b2db      	uxtb	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8000458:	7f3b      	ldrb	r3, [r7, #28]
 800045a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	461a      	mov	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	f107 0214 	add.w	r2, r7, #20
 800046c:	4611      	mov	r1, r2
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f8ec 	bl	800064c <MQTTPacket_decodeBuf>
 8000474:	6278      	str	r0, [r7, #36]	; 0x24
 8000476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000478:	69bb      	ldr	r3, [r7, #24]
 800047a:	4413      	add	r3, r2
 800047c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800047e:	69bb      	ldr	r3, [r7, #24]
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	4413      	add	r3, r2
 8000484:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8000486:	f107 0318 	add.w	r3, r7, #24
 800048a:	6a3a      	ldr	r2, [r7, #32]
 800048c:	4619      	mov	r1, r3
 800048e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000490:	f000 f9a8 	bl	80007e4 <readMQTTLenString>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d01e      	beq.n	80004d8 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 800049a:	6a3b      	ldr	r3, [r7, #32]
 800049c:	69ba      	ldr	r2, [r7, #24]
 800049e:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	db19      	blt.n	80004d8 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dd08      	ble.n	80004be <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80004ac:	f107 0318 	add.w	r3, r7, #24
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f8e1 	bl	8000678 <readInt>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80004be:	6a3b      	ldr	r3, [r7, #32]
 80004c0:	69ba      	ldr	r2, [r7, #24]
 80004c2:	1a9a      	subs	r2, r3, r2
 80004c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004c6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80004c8:	69ba      	ldr	r2, [r7, #24]
 80004ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004cc:	601a      	str	r2, [r3, #0]
	rc = 1;
 80004ce:	2301      	movs	r3, #1
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
 80004d2:	e002      	b.n	80004da <MQTTDeserialize_publish+0xda>
		goto exit;
 80004d4:	bf00      	nop
 80004d6:	e000      	b.n	80004da <MQTTDeserialize_publish+0xda>
exit:
 80004d8:	bf00      	nop
	FUNC_EXIT_RC(rc);
	return rc;
 80004da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3728      	adds	r7, #40	; 0x28
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	425a      	negs	r2, r3
 80004f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80004fe:	bf58      	it	pl
 8000500:	4253      	negpl	r3, r2
 8000502:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	da00      	bge.n	800050c <MQTTPacket_encode+0x28>
 800050a:	337f      	adds	r3, #127	; 0x7f
 800050c:	11db      	asrs	r3, r3, #7
 800050e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	dd03      	ble.n	800051e <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000516:	7afb      	ldrb	r3, [r7, #11]
 8000518:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800051c:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	1c5a      	adds	r2, r3, #1
 8000522:	60fa      	str	r2, [r7, #12]
 8000524:	461a      	mov	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	7afa      	ldrb	r2, [r7, #11]
 800052c:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	dcde      	bgt.n	80004f2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
	int len = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	3301      	adds	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	2b04      	cmp	r3, #4
 8000568:	dd03      	ble.n	8000572 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	60fb      	str	r3, [r7, #12]
			goto exit;
 8000570:	e01d      	b.n	80005ae <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8000572:	f107 020b 	add.w	r2, r7, #11
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2101      	movs	r1, #1
 800057a:	4610      	mov	r0, r2
 800057c:	4798      	blx	r3
 800057e:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d112      	bne.n	80005ac <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000590:	6979      	ldr	r1, [r7, #20]
 8000592:	fb01 f303 	mul.w	r3, r1, r3
 8000596:	441a      	add	r2, r3
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	01db      	lsls	r3, r3, #7
 80005a0:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 80005a2:	7afb      	ldrb	r3, [r7, #11]
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dbd6      	blt.n	8000558 <MQTTPacket_decode+0x18>
exit:
 80005aa:	e000      	b.n	80005ae <MQTTPacket_decode+0x6e>
			goto exit;
 80005ac:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 80005ae:	693b      	ldr	r3, [r7, #16]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b7f      	cmp	r3, #127	; 0x7f
 80005ca:	dc03      	bgt.n	80005d4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3301      	adds	r3, #1
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e012      	b.n	80005fa <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005da:	da03      	bge.n	80005e4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3302      	adds	r3, #2
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	e00a      	b.n	80005fa <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <MQTTPacket_len+0x50>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	dc03      	bgt.n	80005f4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3303      	adds	r3, #3
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	e002      	b.n	80005fa <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3304      	adds	r3, #4
 80005f8:	607b      	str	r3, [r7, #4]
	return rem_len;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	001ffffe 	.word	0x001ffffe

0800060c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e00a      	b.n	8000632 <bufchar+0x26>
		*c = *bufptr++;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <bufchar+0x3c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	4909      	ldr	r1, [pc, #36]	; (8000648 <bufchar+0x3c>)
 8000624:	600a      	str	r2, [r1, #0]
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	dbf0      	blt.n	800061c <bufchar+0x10>
	return count;
 800063a:	683b      	ldr	r3, [r7, #0]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	200001fc 	.word	0x200001fc

0800064c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000656:	4a06      	ldr	r2, [pc, #24]	; (8000670 <MQTTPacket_decodeBuf+0x24>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800065c:	6839      	ldr	r1, [r7, #0]
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MQTTPacket_decodeBuf+0x28>)
 8000660:	f7ff ff6e 	bl	8000540 <MQTTPacket_decode>
 8000664:	4603      	mov	r3, r0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200001fc 	.word	0x200001fc
 8000674:	0800060d 	.word	0x0800060d

08000678 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	3201      	adds	r2, #1
 8000690:	7812      	ldrb	r2, [r2, #0]
 8000692:	4413      	add	r3, r2
 8000694:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1c9a      	adds	r2, r3, #2
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	601a      	str	r2, [r3, #0]
	return len;
 80006a0:	68bb      	ldr	r3, [r7, #8]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
	return c;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	460b      	mov	r3, r1
 80006dc:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	78fa      	ldrb	r2, [r7, #3]
 80006e4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	da00      	bge.n	800070c <writeInt+0x12>
 800070a:	33ff      	adds	r3, #255	; 0xff
 800070c:	121b      	asrs	r3, r3, #8
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	425a      	negs	r2, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	bf58      	it	pl
 800072c:	4253      	negpl	r3, r2
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	6812      	ldr	r2, [r2, #0]
 8000732:	b2db      	uxtb	r3, r3
 8000734:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	601a      	str	r2, [r3, #0]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b084      	sub	sp, #16
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000754:	6838      	ldr	r0, [r7, #0]
 8000756:	f7ff fcfb 	bl	8000150 <strlen>
 800075a:	4603      	mov	r3, r0
 800075c:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800075e:	68f9      	ldr	r1, [r7, #12]
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ffca 	bl	80006fa <writeInt>
	memcpy(*pptr, string, len);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	6839      	ldr	r1, [r7, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f003 ffc6 	bl	8004700 <memcpy>
	*pptr += len;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	441a      	add	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]
}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	4638      	mov	r0, r7
 8000792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	dd12      	ble.n	80007c2 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4619      	mov	r1, r3
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f7ff ffaa 	bl	80006fa <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 ffa6 	bl	8004700 <memcpy>
		*pptr += mqttstring.lenstring.len;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	441a      	add	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 80007c0:	e00c      	b.n	80007dc <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	f7ff ffbc 	bl	800074a <writeCString>
}
 80007d2:	e003      	b.n	80007dc <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80007d4:	2100      	movs	r1, #0
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f7ff ff8f 	bl	80006fa <writeInt>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	1a9b      	subs	r3, r3, r2
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	dd1a      	ble.n	8000836 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8000800:	68b8      	ldr	r0, [r7, #8]
 8000802:	f7ff ff39 	bl	8000678 <readInt>
 8000806:	4602      	mov	r2, r0
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	6852      	ldr	r2, [r2, #4]
 8000814:	4413      	add	r3, r2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	429a      	cmp	r2, r3
 800081a:	d30c      	bcc.n	8000836 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	6852      	ldr	r2, [r2, #4]
 800082c:	441a      	add	r2, r3
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	601a      	str	r2, [r3, #0]
			rc = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800083c:	697b      	ldr	r3, [r7, #20]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d006      	beq.n	800086a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fc76 	bl	8000150 <strlen>
 8000864:	4603      	mov	r3, r0
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	e001      	b.n	800086e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	617b      	str	r3, [r7, #20]
	return rc;
 800086e:	697b      	ldr	r3, [r7, #20]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	4638      	mov	r0, r7
 8000882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800088a:	463b      	mov	r3, r7
 800088c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000890:	f7ff ffd9 	bl	8000846 <MQTTstrlen>
 8000894:	4603      	mov	r3, r0
 8000896:	1c9a      	adds	r2, r3, #2
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	4413      	add	r3, r2
 800089c:	697a      	ldr	r2, [r7, #20]
 800089e:	4413      	add	r3, r2
 80008a0:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dd02      	ble.n	80008ae <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3302      	adds	r3, #2
 80008ac:	617b      	str	r3, [r7, #20]
	return len;
 80008ae:	697b      	ldr	r3, [r7, #20]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af02      	add	r7, sp, #8
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4613      	mov	r3, r2
 80008c6:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80008d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008e2:	6838      	ldr	r0, [r7, #0]
 80008e4:	f7ff ffc8 	bl	8000878 <MQTTSerialize_publishLength>
 80008e8:	61b8      	str	r0, [r7, #24]
 80008ea:	69b8      	ldr	r0, [r7, #24]
 80008ec:	f7ff fe64 	bl	80005b8 <MQTTPacket_len>
 80008f0:	4602      	mov	r2, r0
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	4293      	cmp	r3, r2
 80008f6:	da03      	bge.n	8000900 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80008f8:	f06f 0301 	mvn.w	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
		goto exit;
 80008fe:	e04d      	b.n	800099c <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 8000900:	7c3b      	ldrb	r3, [r7, #16]
 8000902:	2203      	movs	r2, #3
 8000904:	f362 1307 	bfi	r3, r2, #4, #4
 8000908:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	b2da      	uxtb	r2, r3
 8000912:	7c3b      	ldrb	r3, [r7, #16]
 8000914:	f362 03c3 	bfi	r3, r2, #3, #1
 8000918:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	f003 0303 	and.w	r3, r3, #3
 8000920:	b2da      	uxtb	r2, r3
 8000922:	7c3b      	ldrb	r3, [r7, #16]
 8000924:	f362 0342 	bfi	r3, r2, #1, #2
 8000928:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800092a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	7c3b      	ldrb	r3, [r7, #16]
 8000936:	f362 0300 	bfi	r3, r2, #0, #1
 800093a:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800093c:	7c3a      	ldrb	r2, [r7, #16]
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fec4 	bl	80006d2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	69b9      	ldr	r1, [r7, #24]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fdc8 	bl	80004e4 <MQTTPacket_encode>
 8000954:	4602      	mov	r2, r0
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800095c:	f107 0014 	add.w	r0, r7, #20
 8000960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000966:	f7ff ff0f 	bl	8000788 <writeMQTTString>

	if (qos > 0)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	dd06      	ble.n	800097e <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8000970:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff febe 	bl	80006fa <writeInt>

	memcpy(ptr, payload, payloadlen);
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000982:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000984:	4618      	mov	r0, r3
 8000986:	f003 febb 	bl	8004700 <memcpy>
	ptr += payloadlen;
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800098e:	4413      	add	r3, r2
 8000990:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	461a      	mov	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800099c:	69fb      	ldr	r3, [r7, #28]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3720      	adds	r7, #32
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <Sim800_RxCallBack>:
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 80009ac:	4b50      	ldr	r3, [pc, #320]	; (8000af0 <Sim800_RxCallBack+0x148>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	1c5a      	adds	r2, r3, #1
 80009b2:	b291      	uxth	r1, r2
 80009b4:	4a4e      	ldr	r2, [pc, #312]	; (8000af0 <Sim800_RxCallBack+0x148>)
 80009b6:	8011      	strh	r1, [r2, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <Sim800_RxCallBack+0x14c>)
 80009bc:	7819      	ldrb	r1, [r3, #0]
 80009be:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <Sim800_RxCallBack+0x150>)
 80009c0:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0)
 80009c2:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <Sim800_RxCallBack+0x154>)
 80009c4:	7c9b      	ldrb	r3, [r3, #18]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d135      	bne.n	8000a36 <Sim800_RxCallBack+0x8e>
    {
        if (strstr((char *)rx_buffer, "\r\n") != NULL && rx_index == 2)
 80009ca:	494d      	ldr	r1, [pc, #308]	; (8000b00 <Sim800_RxCallBack+0x158>)
 80009cc:	484a      	ldr	r0, [pc, #296]	; (8000af8 <Sim800_RxCallBack+0x150>)
 80009ce:	f003 feff 	bl	80047d0 <strstr>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d007      	beq.n	80009e8 <Sim800_RxCallBack+0x40>
 80009d8:	4b45      	ldr	r3, [pc, #276]	; (8000af0 <Sim800_RxCallBack+0x148>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d103      	bne.n	80009e8 <Sim800_RxCallBack+0x40>
        {
            rx_index = 0;
 80009e0:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <Sim800_RxCallBack+0x148>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	801a      	strh	r2, [r3, #0]
 80009e6:	e026      	b.n	8000a36 <Sim800_RxCallBack+0x8e>
        }
        else if (strstr((char *)rx_buffer, "\r\n") != NULL)
 80009e8:	4945      	ldr	r1, [pc, #276]	; (8000b00 <Sim800_RxCallBack+0x158>)
 80009ea:	4843      	ldr	r0, [pc, #268]	; (8000af8 <Sim800_RxCallBack+0x150>)
 80009ec:	f003 fef0 	bl	80047d0 <strstr>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d01f      	beq.n	8000a36 <Sim800_RxCallBack+0x8e>
        {
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 80009f6:	4a43      	ldr	r2, [pc, #268]	; (8000b04 <Sim800_RxCallBack+0x15c>)
 80009f8:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <Sim800_RxCallBack+0x150>)
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8000a02:	461a      	mov	r2, r3
 8000a04:	f003 fe7c 	bl	8004700 <memcpy>
            clearRxBuffer();
 8000a08:	f000 f88e 	bl	8000b28 <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n"))
 8000a0c:	493e      	ldr	r1, [pc, #248]	; (8000b08 <Sim800_RxCallBack+0x160>)
 8000a0e:	483d      	ldr	r0, [pc, #244]	; (8000b04 <Sim800_RxCallBack+0x15c>)
 8000a10:	f003 fede 	bl	80047d0 <strstr>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <Sim800_RxCallBack+0x7a>
            {
                SIM800.mqttServer.connect = 0;
 8000a1a:	4b38      	ldr	r3, [pc, #224]	; (8000afc <Sim800_RxCallBack+0x154>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	749a      	strb	r2, [r3, #18]
 8000a20:	e009      	b.n	8000a36 <Sim800_RxCallBack+0x8e>
            }
            else if (strstr(mqtt_buffer, "CONNECT\r\n"))
 8000a22:	493a      	ldr	r1, [pc, #232]	; (8000b0c <Sim800_RxCallBack+0x164>)
 8000a24:	4837      	ldr	r0, [pc, #220]	; (8000b04 <Sim800_RxCallBack+0x15c>)
 8000a26:	f003 fed3 	bl	80047d0 <strstr>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <Sim800_RxCallBack+0x8e>
            {
                SIM800.mqttServer.connect = 1;
 8000a30:	4b32      	ldr	r3, [pc, #200]	; (8000afc <Sim800_RxCallBack+0x154>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *)rx_buffer, "CLOSED\r\n") || strstr((char *)rx_buffer, "ERROR\r\n") || strstr((char *)rx_buffer, "DEACT\r\n"))
 8000a36:	4936      	ldr	r1, [pc, #216]	; (8000b10 <Sim800_RxCallBack+0x168>)
 8000a38:	482f      	ldr	r0, [pc, #188]	; (8000af8 <Sim800_RxCallBack+0x150>)
 8000a3a:	f003 fec9 	bl	80047d0 <strstr>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10d      	bne.n	8000a60 <Sim800_RxCallBack+0xb8>
 8000a44:	4933      	ldr	r1, [pc, #204]	; (8000b14 <Sim800_RxCallBack+0x16c>)
 8000a46:	482c      	ldr	r0, [pc, #176]	; (8000af8 <Sim800_RxCallBack+0x150>)
 8000a48:	f003 fec2 	bl	80047d0 <strstr>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d106      	bne.n	8000a60 <Sim800_RxCallBack+0xb8>
 8000a52:	4931      	ldr	r1, [pc, #196]	; (8000b18 <Sim800_RxCallBack+0x170>)
 8000a54:	4828      	ldr	r0, [pc, #160]	; (8000af8 <Sim800_RxCallBack+0x150>)
 8000a56:	f003 febb 	bl	80047d0 <strstr>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <Sim800_RxCallBack+0xbe>
    {
        SIM800.mqttServer.connect = 0;
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <Sim800_RxCallBack+0x154>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48)
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <Sim800_RxCallBack+0x154>)
 8000a68:	7c9b      	ldrb	r3, [r3, #18]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d106      	bne.n	8000a7c <Sim800_RxCallBack+0xd4>
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <Sim800_RxCallBack+0x14c>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b30      	cmp	r3, #48	; 0x30
 8000a74:	d102      	bne.n	8000a7c <Sim800_RxCallBack+0xd4>
    {
        mqtt_receive = 1;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <Sim800_RxCallBack+0x174>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1)
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <Sim800_RxCallBack+0x174>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d124      	bne.n	8000ace <Sim800_RxCallBack+0x126>
    {
        mqtt_buffer[mqtt_index++] = rx_data;
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <Sim800_RxCallBack+0x178>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	b291      	uxth	r1, r2
 8000a8c:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <Sim800_RxCallBack+0x178>)
 8000a8e:	8011      	strh	r1, [r2, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <Sim800_RxCallBack+0x14c>)
 8000a94:	7819      	ldrb	r1, [r3, #0]
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <Sim800_RxCallBack+0x15c>)
 8000a98:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1])
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <Sim800_RxCallBack+0x178>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d90d      	bls.n	8000abe <Sim800_RxCallBack+0x116>
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <Sim800_RxCallBack+0x178>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <Sim800_RxCallBack+0x15c>)
 8000aaa:	7852      	ldrb	r2, [r2, #1]
 8000aac:	4293      	cmp	r3, r2
 8000aae:	dd06      	ble.n	8000abe <Sim800_RxCallBack+0x116>
        {
            MQTT_Receive((unsigned char *)mqtt_buffer);
 8000ab0:	4814      	ldr	r0, [pc, #80]	; (8000b04 <Sim800_RxCallBack+0x15c>)
 8000ab2:	f000 fa23 	bl	8000efc <MQTT_Receive>
            clearRxBuffer();
 8000ab6:	f000 f837 	bl	8000b28 <clearRxBuffer>
            clearMqttBuffer();
 8000aba:	f000 f847 	bl	8000b4c <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer))
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <Sim800_RxCallBack+0x178>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d901      	bls.n	8000ace <Sim800_RxCallBack+0x126>
        {
            clearMqttBuffer();
 8000aca:	f000 f83f 	bl	8000b4c <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer))
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <Sim800_RxCallBack+0x148>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d903      	bls.n	8000ae2 <Sim800_RxCallBack+0x13a>
    {
        clearRxBuffer();
 8000ada:	f000 f825 	bl	8000b28 <clearRxBuffer>
        clearMqttBuffer();
 8000ade:	f000 f835 	bl	8000b4c <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4903      	ldr	r1, [pc, #12]	; (8000af4 <Sim800_RxCallBack+0x14c>)
 8000ae6:	480f      	ldr	r0, [pc, #60]	; (8000b24 <Sim800_RxCallBack+0x17c>)
 8000ae8:	f002 f807 	bl	8002afa <HAL_UART_Receive_IT>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200007b8 	.word	0x200007b8
 8000af4:	20000200 	.word	0x20000200
 8000af8:	20000204 	.word	0x20000204
 8000afc:	20001d24 	.word	0x20001d24
 8000b00:	08005164 	.word	0x08005164
 8000b04:	200007bc 	.word	0x200007bc
 8000b08:	08005168 	.word	0x08005168
 8000b0c:	08005178 	.word	0x08005178
 8000b10:	08005184 	.word	0x08005184
 8000b14:	08005190 	.word	0x08005190
 8000b18:	08005198 	.word	0x08005198
 8000b1c:	200007ba 	.word	0x200007ba
 8000b20:	20000d70 	.word	0x20000d70
 8000b24:	20001e24 	.word	0x20001e24

08000b28 <clearRxBuffer>:
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <clearRxBuffer+0x1c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000b32:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000b36:	2100      	movs	r1, #0
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <clearRxBuffer+0x20>)
 8000b3a:	f003 fdec 	bl	8004716 <memset>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200007b8 	.word	0x200007b8
 8000b48:	20000204 	.word	0x20000204

08000b4c <clearMqttBuffer>:
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <clearMqttBuffer+0x20>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <clearMqttBuffer+0x24>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000b5c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000b60:	2100      	movs	r1, #0
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <clearMqttBuffer+0x28>)
 8000b64:	f003 fdd7 	bl	8004716 <memset>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200007ba 	.word	0x200007ba
 8000b70:	20000d70 	.word	0x20000d70
 8000b74:	200007bc 	.word	0x200007bc

08000b78 <SIM800_SendCommand>:
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
                         (uint16_t)strlen(command));
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f7ff fae2 	bl	8000150 <strlen>
 8000b8c:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *)command,
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	68f9      	ldr	r1, [r7, #12]
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <SIM800_SendCommand+0x50>)
 8000b96:	f001 ff6c 	bl	8002a72 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fc31 	bl	8003404 <osDelay>
#else
    HAL_Delay(delay);
#endif

    if (strstr(mqtt_buffer, reply) != NULL)
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <SIM800_SendCommand+0x54>)
 8000ba6:	f003 fe13 	bl	80047d0 <strstr>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <SIM800_SendCommand+0x40>
    {
        clearRxBuffer();
 8000bb0:	f7ff ffba 	bl	8000b28 <clearRxBuffer>
        return 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	e002      	b.n	8000bbe <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 8000bb8:	f7ff ffb6 	bl	8000b28 <clearRxBuffer>
    return 1;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20001e24 	.word	0x20001e24
 8000bcc:	200007bc 	.word	0x200007bc

08000bd0 <MQTT_Init>:
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	; 0x30
 8000bd4:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <MQTT_Init+0xe4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	749a      	strb	r2, [r3, #18]
    int error = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    char str[32] = {0};
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2220      	movs	r2, #32
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fd95 	bl	8004716 <memset>
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	4932      	ldr	r1, [pc, #200]	; (8000cb8 <MQTT_Init+0xe8>)
 8000bf0:	4832      	ldr	r0, [pc, #200]	; (8000cbc <MQTT_Init+0xec>)
 8000bf2:	f001 ff82 	bl	8002afa <HAL_UART_Receive_IT>

    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8000bf6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bfa:	4931      	ldr	r1, [pc, #196]	; (8000cc0 <MQTT_Init+0xf0>)
 8000bfc:	4831      	ldr	r0, [pc, #196]	; (8000cc4 <MQTT_Init+0xf4>)
 8000bfe:	f7ff ffbb 	bl	8000b78 <SIM800_SendCommand>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 8000c02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c06:	492e      	ldr	r1, [pc, #184]	; (8000cc0 <MQTT_Init+0xf0>)
 8000c08:	482f      	ldr	r0, [pc, #188]	; (8000cc8 <MQTT_Init+0xf8>)
 8000c0a:	f7ff ffb5 	bl	8000b78 <SIM800_SendCommand>
    error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
 8000c0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c12:	492e      	ldr	r1, [pc, #184]	; (8000ccc <MQTT_Init+0xfc>)
 8000c14:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <MQTT_Init+0x100>)
 8000c16:	f7ff ffaf 	bl	8000b78 <SIM800_SendCommand>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	4413      	add	r3, r2
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 8000c22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c26:	4926      	ldr	r1, [pc, #152]	; (8000cc0 <MQTT_Init+0xf0>)
 8000c28:	482a      	ldr	r0, [pc, #168]	; (8000cd4 <MQTT_Init+0x104>)
 8000c2a:	f7ff ffa5 	bl	8000b78 <SIM800_SendCommand>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	4413      	add	r3, r2
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
    error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
 8000c36:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c3a:	4921      	ldr	r1, [pc, #132]	; (8000cc0 <MQTT_Init+0xf0>)
 8000c3c:	4826      	ldr	r0, [pc, #152]	; (8000cd8 <MQTT_Init+0x108>)
 8000c3e:	f7ff ff9b 	bl	8000b78 <SIM800_SendCommand>
 8000c42:	4602      	mov	r2, r0
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	4413      	add	r3, r2
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24

    snprintf(str, sizeof(str), "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MQTT_Init+0xe4>)
 8000c4c:	6819      	ldr	r1, [r3, #0]
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MQTT_Init+0xe4>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <MQTT_Init+0xe4>)
 8000c54:	6892      	ldr	r2, [r2, #8]
 8000c56:	1d38      	adds	r0, r7, #4
 8000c58:	9201      	str	r2, [sp, #4]
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <MQTT_Init+0x10c>)
 8000c60:	2120      	movs	r1, #32
 8000c62:	f003 fd61 	bl	8004728 <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c6c:	4914      	ldr	r1, [pc, #80]	; (8000cc0 <MQTT_Init+0xf0>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff82 	bl	8000b78 <SIM800_SendCommand>
 8000c74:	4602      	mov	r2, r0
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	4413      	add	r3, r2
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24

    error += SIM800_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 8000c7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c80:	490f      	ldr	r1, [pc, #60]	; (8000cc0 <MQTT_Init+0xf0>)
 8000c82:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <MQTT_Init+0x110>)
 8000c84:	f7ff ff78 	bl	8000b78 <SIM800_SendCommand>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	4413      	add	r3, r2
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    SIM800_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 8000c90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <MQTT_Init+0x114>)
 8000c96:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <MQTT_Init+0x118>)
 8000c98:	f7ff ff6e 	bl	8000b78 <SIM800_SendCommand>
    if (error == 0)
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d103      	bne.n	8000caa <MQTT_Init+0xda>
    {
        MQTT_Connect();
 8000ca2:	f000 f823 	bl	8000cec <MQTT_Connect>
        return error;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	e000      	b.n	8000cac <MQTT_Init+0xdc>
    }
    else
    {
        return error;
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20001d24 	.word	0x20001d24
 8000cb8:	20000200 	.word	0x20000200
 8000cbc:	20001e24 	.word	0x20001e24
 8000cc0:	080051a0 	.word	0x080051a0
 8000cc4:	080051a8 	.word	0x080051a8
 8000cc8:	080051b0 	.word	0x080051b0
 8000ccc:	080051b8 	.word	0x080051b8
 8000cd0:	080051c4 	.word	0x080051c4
 8000cd4:	080051d4 	.word	0x080051d4
 8000cd8:	080051e4 	.word	0x080051e4
 8000cdc:	080051f4 	.word	0x080051f4
 8000ce0:	08005210 	.word	0x08005210
 8000ce4:	0800521c 	.word	0x0800521c
 8000ce8:	08005220 	.word	0x08005220

08000cec <MQTT_Connect>:
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0d8      	sub	sp, #352	; 0x160
 8000cf0:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8000cf2:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <MQTT_Connect+0xd0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    SIM800.mqttServer.connect = 0;
 8000cfa:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <MQTT_Connect+0xd0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8000d00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 fd04 	bl	8004716 <memset>
    unsigned char buf[128] = {0};
 8000d0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d12:	4618      	mov	r0, r3
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	461a      	mov	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f003 fcfc 	bl	8004716 <memset>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8000d1e:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MQTT_Connect+0xd0>)
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MQTT_Connect+0xd0>)
 8000d24:	8a1b      	ldrh	r3, [r3, #16]
 8000d26:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8000d2a:	4925      	ldr	r1, [pc, #148]	; (8000dc0 <MQTT_Connect+0xd4>)
 8000d2c:	f003 fd30 	bl	8004790 <siprintf>
    SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8000d30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d38:	4922      	ldr	r1, [pc, #136]	; (8000dc4 <MQTT_Connect+0xd8>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff1c 	bl	8000b78 <SIM800_SendCommand>
#if FREERTOS == 1
    osDelay(5000);
 8000d40:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d44:	f002 fb5e 	bl	8003404 <osDelay>
#else
    HAL_Delay(5000);
#endif
    if (SIM800.mqttServer.connect == 1)
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MQTT_Connect+0xd0>)
 8000d4a:	7c9b      	ldrb	r3, [r3, #18]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d130      	bne.n	8000db2 <MQTT_Connect+0xc6>
    {
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <MQTT_Connect+0xdc>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	4611      	mov	r1, r2
 8000d58:	2358      	movs	r3, #88	; 0x58
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f003 fcd0 	bl	8004700 <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MQTT_Connect+0xd0>)
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MQTT_Connect+0xd0>)
 8000d6a:	699a      	ldr	r2, [r3, #24]
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	64da      	str	r2, [r3, #76]	; 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MQTT_Connect+0xd0>)
 8000d72:	69da      	ldr	r2, [r3, #28]
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MQTT_Connect+0xd0>)
 8000d7a:	8c1a      	ldrh	r2, [r3, #32]
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2201      	movs	r2, #1
 8000d84:	769a      	strb	r2, [r3, #26]
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8000d86:	1d3a      	adds	r2, r7, #4
 8000d88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa48 	bl	8000224 <MQTTSerialize_connect>
 8000d94:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000d98:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000da2:	4619      	mov	r1, r3
 8000da4:	4809      	ldr	r0, [pc, #36]	; (8000dcc <MQTT_Connect+0xe0>)
 8000da6:	f001 fe64 	bl	8002a72 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
        osDelay(5000);
 8000daa:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dae:	f002 fb29 	bl	8003404 <osDelay>
#else
        HAL_Delay(5000);
#endif
    }
}
 8000db2:	bf00      	nop
 8000db4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20001d24 	.word	0x20001d24
 8000dc0:	0800522c 	.word	0x0800522c
 8000dc4:	080051a0 	.word	0x080051a0
 8000dc8:	08005248 	.word	0x08005248
 8000dcc:	20001e24 	.word	0x20001e24

08000dd0 <MQTT_Pub>:
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b0cf      	sub	sp, #316	; 0x13c
 8000dd4:	af08      	add	r7, sp, #32
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	6018      	str	r0, [r3, #0]
 8000dda:	463b      	mov	r3, r7
 8000ddc:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4618      	mov	r0, r3
 8000de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de8:	461a      	mov	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f003 fc93 	bl	8004716 <memset>

    MQTTString topicString = MQTTString_initializer;
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	1d3a      	adds	r2, r7, #4
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *)payload, (int)strlen(payload));
 8000e12:	463b      	mov	r3, r7
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	f7ff f99b 	bl	8000150 <strlen>
 8000e1a:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 8000e1c:	f107 0414 	add.w	r4, r7, #20
 8000e20:	9306      	str	r3, [sp, #24]
 8000e22:	463b      	mov	r3, r7
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	9305      	str	r3, [sp, #20]
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	ab02      	add	r3, sp, #8
 8000e2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e34:	2300      	movs	r3, #0
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e44:	4620      	mov	r0, r4
 8000e46:	f7ff fd37 	bl	80008b8 <MQTTSerialize_publish>
 8000e4a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MQTT_Pub+0xa0>)
 8000e5c:	f001 fe09 	bl	8002a72 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
 8000e60:	2064      	movs	r0, #100	; 0x64
 8000e62:	f002 facf 	bl	8003404 <osDelay>
#else
    HAL_Delay(100);
#endif
}
 8000e66:	bf00      	nop
 8000e68:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	20001e24 	.word	0x20001e24

08000e74 <MQTT_Sub>:
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0ca      	sub	sp, #296	; 0x128
 8000e78:	af04      	add	r7, sp, #16
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4618      	mov	r0, r3
 8000e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f003 fc43 	bl	8004716 <memset>

    MQTTString topicString = MQTTString_initializer;
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	1d3a      	adds	r2, r7, #4
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8000eb2:	f107 0014 	add.w	r0, r7, #20
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	f000 f887 	bl	8000fde <MQTTSerialize_subscribe>
 8000ed0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MQTT_Sub+0x84>)
 8000ee2:	f001 fdc6 	bl	8002a72 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(100);
 8000ee6:	2064      	movs	r0, #100	; 0x64
 8000ee8:	f002 fa8c 	bl	8003404 <osDelay>
#else
    HAL_Delay(100);
#endif
}
 8000eec:	bf00      	nop
 8000eee:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20001e24 	.word	0x20001e24

08000efc <MQTT_Receive>:
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af06      	add	r7, sp, #24
 8000f02:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 8000f04:	2240      	movs	r2, #64	; 0x40
 8000f06:	2100      	movs	r1, #0
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <MQTT_Receive+0x74>)
 8000f0a:	f003 fc04 	bl	8004716 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8000f0e:	2240      	movs	r2, #64	; 0x40
 8000f10:	2100      	movs	r1, #0
 8000f12:	4818      	ldr	r0, [pc, #96]	; (8000f74 <MQTT_Receive+0x78>)
 8000f14:	f003 fbff 	bl	8004716 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8000f18:	2304      	movs	r3, #4
 8000f1a:	9304      	str	r3, [sp, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	9303      	str	r3, [sp, #12]
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MQTT_Receive+0x7c>)
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MQTT_Receive+0x80>)
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <MQTT_Receive+0x84>)
 8000f34:	4913      	ldr	r1, [pc, #76]	; (8000f84 <MQTT_Receive+0x88>)
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MQTT_Receive+0x8c>)
 8000f38:	f7ff fa62 	bl	8000400 <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4619      	mov	r1, r3
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <MQTT_Receive+0x74>)
 8000f44:	f003 fbdc 	bl	8004700 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <MQTT_Receive+0x90>)
 8000f4c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MQTT_Receive+0x90>)
 8000f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f56:	461a      	mov	r2, r3
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MQTT_Receive+0x78>)
 8000f5a:	f003 fbd1 	bl	8004700 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MQTT_Receive+0x90>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20001d98 	.word	0x20001d98
 8000f74:	20001d54 	.word	0x20001d54
 8000f78:	20001d94 	.word	0x20001d94
 8000f7c:	20001d52 	.word	0x20001d52
 8000f80:	20001d50 	.word	0x20001d50
 8000f84:	20001d4c 	.word	0x20001d4c
 8000f88:	20001d49 	.word	0x20001d49
 8000f8c:	20001d24 	.word	0x20001d24

08000f90 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e013      	b.n	8000fcc <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fb8:	f7ff fc45 	bl	8000846 <MQTTstrlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	3303      	adds	r3, #3
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dbe7      	blt.n	8000fa4 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b08a      	sub	sp, #40	; 0x28
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	461a      	mov	r2, r3
 8000fec:	460b      	mov	r3, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8001008:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800100a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800100c:	f7ff ffc0 	bl	8000f90 <MQTTSerialize_subscribeLength>
 8001010:	61f8      	str	r0, [r7, #28]
 8001012:	69f8      	ldr	r0, [r7, #28]
 8001014:	f7ff fad0 	bl	80005b8 <MQTTPacket_len>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	4293      	cmp	r3, r2
 800101e:	da03      	bge.n	8001028 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001020:	f06f 0301 	mvn.w	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8001026:	e052      	b.n	80010ce <MQTTSerialize_subscribe+0xf0>
	}

	header.byte = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800102c:	7d3b      	ldrb	r3, [r7, #20]
 800102e:	2208      	movs	r2, #8
 8001030:	f362 1307 	bfi	r3, r2, #4, #4
 8001034:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	7d3b      	ldrb	r3, [r7, #20]
 8001040:	f362 03c3 	bfi	r3, r2, #3, #1
 8001044:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8001046:	7d3b      	ldrb	r3, [r7, #20]
 8001048:	2201      	movs	r2, #1
 800104a:	f362 0342 	bfi	r3, r2, #1, #2
 800104e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8001050:	7d3a      	ldrb	r2, [r7, #20]
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fb3a 	bl	80006d2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	69f9      	ldr	r1, [r7, #28]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa3e 	bl	80004e4 <MQTTPacket_encode>
 8001068:	4602      	mov	r2, r0
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4413      	add	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8001070:	88ba      	ldrh	r2, [r7, #4]
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fb3e 	bl	80006fa <writeInt>

	for (i = 0; i < count; ++i)
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	e01b      	b.n	80010bc <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8001084:	6a3a      	ldr	r2, [r7, #32]
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	461a      	mov	r2, r3
 8001090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001092:	4413      	add	r3, r2
 8001094:	f107 0018 	add.w	r0, r7, #24
 8001098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800109a:	f7ff fb75 	bl	8000788 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	f107 0318 	add.w	r3, r7, #24
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fb0e 	bl	80006d2 <writeChar>
	for (i = 0; i < count; ++i)
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	3301      	adds	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	6a3a      	ldr	r2, [r7, #32]
 80010be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbdf      	blt.n	8001084 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <vApplicationGetIdleTaskMemory+0x28>)
 80010e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <vApplicationGetIdleTaskMemory+0x2c>)
 80010ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000d74 	.word	0x20000d74
 8001104:	20000dc8 	.word	0x20000dc8

08001108 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_FREERTOS_Init+0x30>)
 8001110:	1d3c      	adds	r4, r7, #4
 8001112:	461d      	mov	r5, r3
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f002 f921 	bl	800336c <osThreadCreate>
 800112a:	4602      	mov	r2, r0
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <MX_FREERTOS_Init+0x34>)
 800112e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}
 8001138:	080052b8 	.word	0x080052b8
 800113c:	20001d20 	.word	0x20001d20

08001140 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f002 f95b 	bl	8003404 <osDelay>
 800114e:	e7fb      	b.n	8001148 <StartDefaultTask+0x8>

08001150 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_GPIO_Init+0x28>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <MX_GPIO_Init+0x28>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b05      	ldr	r3, [pc, #20]	; (8001178 <MX_GPIO_Init+0x28>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 SIM800.sim.apn = "internet";
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <main+0xb8>)
 8001184:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <main+0xbc>)
 8001186:	601a      	str	r2, [r3, #0]
	   SIM800.sim.apn_user = "";
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <main+0xb8>)
 800118a:	4a2c      	ldr	r2, [pc, #176]	; (800123c <main+0xc0>)
 800118c:	605a      	str	r2, [r3, #4]
	   SIM800.sim.apn_pass = "";
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <main+0xb8>)
 8001190:	4a2a      	ldr	r2, [pc, #168]	; (800123c <main+0xc0>)
 8001192:	609a      	str	r2, [r3, #8]
	   SIM800.mqttServer.host = "mqtt.mqtt.ru";
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <main+0xb8>)
 8001196:	4a2a      	ldr	r2, [pc, #168]	; (8001240 <main+0xc4>)
 8001198:	60da      	str	r2, [r3, #12]
	   SIM800.mqttServer.port = 1883;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <main+0xb8>)
 800119c:	f240 725b 	movw	r2, #1883	; 0x75b
 80011a0:	821a      	strh	r2, [r3, #16]
	   SIM800.mqttClient.username = "user";
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <main+0xb8>)
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <main+0xc8>)
 80011a6:	615a      	str	r2, [r3, #20]
	   SIM800.mqttClient.pass = "pass";
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <main+0xb8>)
 80011aa:	4a27      	ldr	r2, [pc, #156]	; (8001248 <main+0xcc>)
 80011ac:	619a      	str	r2, [r3, #24]
	   SIM800.mqttClient.clientID = "TestSub";
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <main+0xb8>)
 80011b0:	4a26      	ldr	r2, [pc, #152]	; (800124c <main+0xd0>)
 80011b2:	61da      	str	r2, [r3, #28]
	   SIM800.mqttClient.keepAliveInterval = 120;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <main+0xb8>)
 80011b6:	2278      	movs	r2, #120	; 0x78
 80011b8:	841a      	strh	r2, [r3, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f000 fa39 	bl	8001630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f84f 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f7ff ffc5 	bl	8001150 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011c6:	f000 f991 	bl	80014ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80011ca:	f7ff ff9d 	bl	8001108 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80011ce:	f002 f8c6 	bl	800335e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

      MQTT_Init();
 80011d2:	f7ff fcfd 	bl	8000bd0 <MQTT_Init>
      uint8_t sub = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
 // add subscribe to topic "test"
 // ```
   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while (1) {
       if (SIM800.mqttServer.connect == 0) {
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <main+0xb8>)
 80011dc:	7c9b      	ldrb	r3, [r3, #18]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <main+0x6e>
           MQTT_Init();
 80011e2:	f7ff fcf5 	bl	8000bd0 <MQTT_Init>
           sub = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
       }
       if (SIM800.mqttServer.connect == 1) {
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <main+0xb8>)
 80011ec:	7c9b      	ldrb	r3, [r3, #18]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d11a      	bne.n	8001228 <main+0xac>
           if(sub == 0){
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d104      	bne.n	8001202 <main+0x86>
               MQTT_Sub("test");
 80011f8:	4815      	ldr	r0, [pc, #84]	; (8001250 <main+0xd4>)
 80011fa:	f7ff fe3b 	bl	8000e74 <MQTT_Sub>
               sub = 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
           }
           MQTT_Pub("STM32", "test");
 8001202:	4913      	ldr	r1, [pc, #76]	; (8001250 <main+0xd4>)
 8001204:	4813      	ldr	r0, [pc, #76]	; (8001254 <main+0xd8>)
 8001206:	f7ff fde3 	bl	8000dd0 <MQTT_Pub>

           if(SIM800.mqttReceive.newEvent) {
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <main+0xb8>)
 800120c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <main+0xac>
               unsigned char *topic = SIM800.mqttReceive.topic;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <main+0xdc>)
 8001216:	60bb      	str	r3, [r7, #8]
               int payload = atoi(SIM800.mqttReceive.payload);
 8001218:	4810      	ldr	r0, [pc, #64]	; (800125c <main+0xe0>)
 800121a:	f003 fa43 	bl	80046a4 <atoi>
 800121e:	6078      	str	r0, [r7, #4]
               SIM800.mqttReceive.newEvent = 0;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <main+0xb8>)
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
           }
       }
       HAL_Delay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122c:	f000 fa32 	bl	8001694 <HAL_Delay>
       if (SIM800.mqttServer.connect == 0) {
 8001230:	e7d3      	b.n	80011da <main+0x5e>
 8001232:	bf00      	nop
 8001234:	20001d24 	.word	0x20001d24
 8001238:	080052d4 	.word	0x080052d4
 800123c:	080052e0 	.word	0x080052e0
 8001240:	080052e4 	.word	0x080052e4
 8001244:	080052f4 	.word	0x080052f4
 8001248:	080052fc 	.word	0x080052fc
 800124c:	08005304 	.word	0x08005304
 8001250:	0800530c 	.word	0x0800530c
 8001254:	08005314 	.word	0x08005314
 8001258:	20001d98 	.word	0x20001d98
 800125c:	20001d54 	.word	0x20001d54

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b090      	sub	sp, #64	; 0x40
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	2228      	movs	r2, #40	; 0x28
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fa51 	bl	8004716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001286:	2301      	movs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128a:	2310      	movs	r3, #16
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fd08 	bl	8001cac <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012a2:	f000 f82b 	bl	80012fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 ff74 	bl	80021ac <HAL_RCC_ClockConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ca:	f000 f817 	bl	80012fc <Error_Handler>
  }
}
 80012ce:	bf00      	nop
 80012d0:	3740      	adds	r7, #64	; 0x40
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_TIM_PeriodElapsedCallback>:

  */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ea:	f000 f9b7 	bl	800165c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40012c00 	.word	0x40012c00

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_MspInit+0x5c>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <HAL_MspInit+0x5c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_MspInit+0x5c>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_MspInit+0x5c>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_MspInit+0x5c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_MspInit+0x5c>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_MspInit+0x60>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_MspInit+0x60>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000

0800136c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	2019      	movs	r0, #25
 8001382:	f000 fa5e 	bl	8001842 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001386:	2019      	movs	r0, #25
 8001388:	f000 fa77 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800138c:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <HAL_InitTick+0x9c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_InitTick+0x9c>)
 8001392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_InitTick+0x9c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a4:	f107 0210 	add.w	r2, r7, #16
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 f87a 	bl	80024a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013b4:	f001 f864 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 80013b8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	4a13      	ldr	r2, [pc, #76]	; (800140c <HAL_InitTick+0xa0>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0c9b      	lsrs	r3, r3, #18
 80013c4:	3b01      	subs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_InitTick+0xa4>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <HAL_InitTick+0xa8>)
 80013cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_InitTick+0xa4>)
 80013d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_InitTick+0xa4>)
 80013d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_InitTick+0xa4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_InitTick+0xa4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_InitTick+0xa4>)
 80013ea:	f001 f8ab 	bl	8002544 <HAL_TIM_Base_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d104      	bne.n	80013fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80013f4:	4806      	ldr	r0, [pc, #24]	; (8001410 <HAL_InitTick+0xa4>)
 80013f6:	f001 f8fd 	bl	80025f4 <HAL_TIM_Base_Start_IT>
 80013fa:	4603      	mov	r3, r0
 80013fc:	e000      	b.n	8001400 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	431bde83 	.word	0x431bde83
 8001410:	20001ddc 	.word	0x20001ddc
 8001414:	40012c00 	.word	0x40012c00

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <HardFault_Handler+0x4>

0800142a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <BusFault_Handler+0x4>

08001436 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <UsageFault_Handler+0x4>

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM1_UP_IRQHandler+0x10>)
 800144e:	f001 f923 	bl	8002698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20001ddc 	.word	0x20001ddc

0800145c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */

	Sim800_RxCallBack();
 8001460:	f7ff faa2 	bl	80009a8 <Sim800_RxCallBack>

  HAL_UART_IRQHandler(&huart2);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <USART2_IRQHandler+0x14>)
 8001466:	f001 fb79 	bl	8002b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20001e24 	.word	0x20001e24

08001474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <_sbrk+0x5c>)
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <_sbrk+0x60>)
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <_sbrk+0x64>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <_sbrk+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <_sbrk+0x64>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d207      	bcs.n	80014b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a4:	f003 f902 	bl	80046ac <__errno>
 80014a8:	4602      	mov	r2, r0
 80014aa:	230c      	movs	r3, #12
 80014ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	e009      	b.n	80014c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <_sbrk+0x64>)
 80014c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c6:	68fb      	ldr	r3, [r7, #12]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20005000 	.word	0x20005000
 80014d4:	00000400 	.word	0x00000400
 80014d8:	20000fc8 	.word	0x20000fc8
 80014dc:	20001e70 	.word	0x20001e70

080014e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_USART2_UART_Init+0x50>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_USART2_UART_Init+0x4c>)
 8001524:	f001 fa58 	bl	80029d8 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800152e:	f7ff fee5 	bl	80012fc <Error_Handler>
  }

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20001e24 	.word	0x20001e24
 800153c:	40004400 	.word	0x40004400

08001540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <HAL_UART_MspInit+0x98>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d137      	bne.n	80015d0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001560:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <HAL_UART_MspInit+0x9c>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <HAL_UART_MspInit+0x9c>)
 8001566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156a:	61d3      	str	r3, [r2, #28]
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_UART_MspInit+0x9c>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_UART_MspInit+0x9c>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_UART_MspInit+0x9c>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_UART_MspInit+0x9c>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001590:	2304      	movs	r3, #4
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <HAL_UART_MspInit+0xa0>)
 80015a4:	f000 fa28 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015a8:	2308      	movs	r3, #8
 80015aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <HAL_UART_MspInit+0xa0>)
 80015bc:	f000 fa1c 	bl	80019f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	210a      	movs	r1, #10
 80015c4:	2026      	movs	r0, #38	; 0x26
 80015c6:	f000 f93c 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ca:	2026      	movs	r0, #38	; 0x26
 80015cc:	f000 f955 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40004400 	.word	0x40004400
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010800 	.word	0x40010800

080015e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015e6:	490d      	ldr	r1, [pc, #52]	; (800161c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015fc:	4c0a      	ldr	r4, [pc, #40]	; (8001628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800160a:	f7ff ff69 	bl	80014e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f003 f853 	bl	80046b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001612:	f7ff fdb3 	bl	800117c <main>
  bx lr
 8001616:	4770      	bx	lr
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800161c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001620:	08005498 	.word	0x08005498
  ldr r2, =_sbss
 8001624:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001628:	20001e70 	.word	0x20001e70

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>
	...

08001630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x28>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x28>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f8f3 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff fe90 	bl	800136c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe5c 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000

0800165c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_IncTick+0x1c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_IncTick+0x20>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_IncTick+0x20>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000008 	.word	0x20000008
 800167c:	20001e68 	.word	0x20001e68

08001680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <HAL_GetTick+0x10>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	20001e68 	.word	0x20001e68

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff fff0 	bl	8001680 <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_Delay+0x40>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffe0 	bl	8001680 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000008 	.word	0x20000008

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4906      	ldr	r1, [pc, #24]	; (8001770 <__NVIC_EnableIRQ+0x34>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff4f 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff64 	bl	8001720 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ffb2 	bl	80017c8 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff81 	bl	8001774 <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff57 	bl	800173c <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d008      	beq.n	80018be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2204      	movs	r2, #4
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e020      	b.n	8001900 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 020e 	bic.w	r2, r2, #14
 80018cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
	...

0800190c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800191e:	2b02      	cmp	r3, #2
 8001920:	d005      	beq.n	800192e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2204      	movs	r2, #4
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e051      	b.n	80019d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 020e 	bic.w	r2, r2, #14
 800193c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0201 	bic.w	r2, r2, #1
 800194c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a22      	ldr	r2, [pc, #136]	; (80019dc <HAL_DMA_Abort_IT+0xd0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d029      	beq.n	80019ac <HAL_DMA_Abort_IT+0xa0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <HAL_DMA_Abort_IT+0xd4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d022      	beq.n	80019a8 <HAL_DMA_Abort_IT+0x9c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_DMA_Abort_IT+0xd8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d01a      	beq.n	80019a2 <HAL_DMA_Abort_IT+0x96>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_DMA_Abort_IT+0xdc>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d012      	beq.n	800199c <HAL_DMA_Abort_IT+0x90>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1c      	ldr	r2, [pc, #112]	; (80019ec <HAL_DMA_Abort_IT+0xe0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00a      	beq.n	8001996 <HAL_DMA_Abort_IT+0x8a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1a      	ldr	r2, [pc, #104]	; (80019f0 <HAL_DMA_Abort_IT+0xe4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d102      	bne.n	8001990 <HAL_DMA_Abort_IT+0x84>
 800198a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800198e:	e00e      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 8001990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001994:	e00b      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 8001996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199a:	e008      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	e005      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 80019a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a6:	e002      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 80019a8:	2310      	movs	r3, #16
 80019aa:	e000      	b.n	80019ae <HAL_DMA_Abort_IT+0xa2>
 80019ac:	2301      	movs	r3, #1
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_DMA_Abort_IT+0xe8>)
 80019b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
    } 
  }
  return status;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40020008 	.word	0x40020008
 80019e0:	4002001c 	.word	0x4002001c
 80019e4:	40020030 	.word	0x40020030
 80019e8:	40020044 	.word	0x40020044
 80019ec:	40020058 	.word	0x40020058
 80019f0:	4002006c 	.word	0x4002006c
 80019f4:	40020000 	.word	0x40020000

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b08b      	sub	sp, #44	; 0x2c
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0a:	e127      	b.n	8001c5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8116 	bne.w	8001c56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d034      	beq.n	8001a9c <HAL_GPIO_Init+0xa4>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d80d      	bhi.n	8001a52 <HAL_GPIO_Init+0x5a>
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d02b      	beq.n	8001a92 <HAL_GPIO_Init+0x9a>
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d804      	bhi.n	8001a48 <HAL_GPIO_Init+0x50>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d031      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d01c      	beq.n	8001a80 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a46:	e048      	b.n	8001ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d043      	beq.n	8001ad4 <HAL_GPIO_Init+0xdc>
 8001a4c:	2b11      	cmp	r3, #17
 8001a4e:	d01b      	beq.n	8001a88 <HAL_GPIO_Init+0x90>
          break;
 8001a50:	e043      	b.n	8001ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a52:	4a89      	ldr	r2, [pc, #548]	; (8001c78 <HAL_GPIO_Init+0x280>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d026      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a58:	4a87      	ldr	r2, [pc, #540]	; (8001c78 <HAL_GPIO_Init+0x280>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d806      	bhi.n	8001a6c <HAL_GPIO_Init+0x74>
 8001a5e:	4a87      	ldr	r2, [pc, #540]	; (8001c7c <HAL_GPIO_Init+0x284>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d020      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a64:	4a86      	ldr	r2, [pc, #536]	; (8001c80 <HAL_GPIO_Init+0x288>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d01d      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
          break;
 8001a6a:	e036      	b.n	8001ada <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a6c:	4a85      	ldr	r2, [pc, #532]	; (8001c84 <HAL_GPIO_Init+0x28c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a72:	4a85      	ldr	r2, [pc, #532]	; (8001c88 <HAL_GPIO_Init+0x290>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d016      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
 8001a78:	4a84      	ldr	r2, [pc, #528]	; (8001c8c <HAL_GPIO_Init+0x294>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0xae>
          break;
 8001a7e:	e02c      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e028      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e023      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	3308      	adds	r3, #8
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e01e      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	330c      	adds	r3, #12
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e019      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d102      	bne.n	8001ab4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aae:	2304      	movs	r3, #4
 8001ab0:	623b      	str	r3, [r7, #32]
          break;
 8001ab2:	e012      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001abc:	2308      	movs	r3, #8
 8001abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	611a      	str	r2, [r3, #16]
          break;
 8001ac6:	e008      	b.n	8001ada <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	615a      	str	r2, [r3, #20]
          break;
 8001ad2:	e002      	b.n	8001ada <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
          break;
 8001ad8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2bff      	cmp	r3, #255	; 0xff
 8001ade:	d801      	bhi.n	8001ae4 <HAL_GPIO_Init+0xec>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	e001      	b.n	8001ae8 <HAL_GPIO_Init+0xf0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2bff      	cmp	r3, #255	; 0xff
 8001aee:	d802      	bhi.n	8001af6 <HAL_GPIO_Init+0xfe>
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_Init+0x104>
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	3b08      	subs	r3, #8
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	210f      	movs	r1, #15
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	6a39      	ldr	r1, [r7, #32]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	431a      	orrs	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8096 	beq.w	8001c56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2a:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_GPIO_Init+0x298>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_GPIO_Init+0x298>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b56      	ldr	r3, [pc, #344]	; (8001c90 <HAL_GPIO_Init+0x298>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b42:	4a54      	ldr	r2, [pc, #336]	; (8001c94 <HAL_GPIO_Init+0x29c>)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4013      	ands	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_GPIO_Init+0x2a0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x19e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_GPIO_Init+0x2a4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x19a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <HAL_GPIO_Init+0x2a8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x196>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a48      	ldr	r2, [pc, #288]	; (8001ca4 <HAL_GPIO_Init+0x2ac>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x192>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x1a0>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e004      	b.n	8001b98 <HAL_GPIO_Init+0x1a0>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_Init+0x1a0>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_GPIO_Init+0x1a0>
 8001b96:	2300      	movs	r3, #0
 8001b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9a:	f002 0203 	and.w	r2, r2, #3
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	4093      	lsls	r3, r2
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba8:	493a      	ldr	r1, [pc, #232]	; (8001c94 <HAL_GPIO_Init+0x29c>)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc2:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4938      	ldr	r1, [pc, #224]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
 8001bce:	e006      	b.n	8001bde <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4933      	ldr	r1, [pc, #204]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bea:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	492e      	ldr	r1, [pc, #184]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
 8001bf6:	e006      	b.n	8001c06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	4929      	ldr	r1, [pc, #164]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4924      	ldr	r1, [pc, #144]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	491f      	ldr	r1, [pc, #124]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	491a      	ldr	r1, [pc, #104]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60cb      	str	r3, [r1, #12]
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4915      	ldr	r1, [pc, #84]	; (8001ca8 <HAL_GPIO_Init+0x2b0>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f47f aed0 	bne.w	8001a0c <HAL_GPIO_Init+0x14>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	372c      	adds	r7, #44	; 0x2c
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	10210000 	.word	0x10210000
 8001c7c:	10110000 	.word	0x10110000
 8001c80:	10120000 	.word	0x10120000
 8001c84:	10310000 	.word	0x10310000
 8001c88:	10320000 	.word	0x10320000
 8001c8c:	10220000 	.word	0x10220000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000
 8001c98:	40010800 	.word	0x40010800
 8001c9c:	40010c00 	.word	0x40010c00
 8001ca0:	40011000 	.word	0x40011000
 8001ca4:	40011400 	.word	0x40011400
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e26c      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8087 	beq.w	8001dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ccc:	4b92      	ldr	r3, [pc, #584]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d00c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd8:	4b8f      	ldr	r3, [pc, #572]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d112      	bne.n	8001d0a <HAL_RCC_OscConfig+0x5e>
 8001ce4:	4b8c      	ldr	r3, [pc, #560]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d10b      	bne.n	8001d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf2:	4b89      	ldr	r3, [pc, #548]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x12c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d168      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e246      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x76>
 8001d14:	4b80      	ldr	r3, [pc, #512]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a7f      	ldr	r2, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e02e      	b.n	8001d80 <HAL_RCC_OscConfig+0xd4>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x98>
 8001d2a:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a7a      	ldr	r2, [pc, #488]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b78      	ldr	r3, [pc, #480]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a77      	ldr	r2, [pc, #476]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e01d      	b.n	8001d80 <HAL_RCC_OscConfig+0xd4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0xbc>
 8001d4e:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a71      	ldr	r2, [pc, #452]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4b6f      	ldr	r3, [pc, #444]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6e      	ldr	r2, [pc, #440]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0xd4>
 8001d68:	4b6b      	ldr	r3, [pc, #428]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6a      	ldr	r2, [pc, #424]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b68      	ldr	r3, [pc, #416]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a67      	ldr	r2, [pc, #412]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fc7a 	bl	8001680 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fc76 	bl	8001680 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1fa      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0xe4>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fc66 	bl	8001680 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fc62 	bl	8001680 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1e6      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x10c>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d063      	beq.n	8001eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001df2:	4b49      	ldr	r3, [pc, #292]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x18c>
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x176>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e1ba      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4939      	ldr	r1, [pc, #228]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	e03a      	b.n	8001eae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e40:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff fc1b 	bl	8001680 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7ff fc17 	bl	8001680 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e19b      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4927      	ldr	r1, [pc, #156]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_RCC_OscConfig+0x270>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff fbfa 	bl	8001680 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff fbf6 	bl	8001680 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e17a      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d03a      	beq.n	8001f30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d019      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_RCC_OscConfig+0x274>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fbda 	bl	8001680 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fbd6 	bl	8001680 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e15a      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f000 fb0a 	bl	8002508 <RCC_Delay>
 8001ef4:	e01c      	b.n	8001f30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efc:	f7ff fbc0 	bl	8001680 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f02:	e00f      	b.n	8001f24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f04:	f7ff fbbc 	bl	8001680 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d908      	bls.n	8001f24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e140      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	42420000 	.word	0x42420000
 8001f20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b9e      	ldr	r3, [pc, #632]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e9      	bne.n	8001f04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a6 	beq.w	800208a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b97      	ldr	r3, [pc, #604]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10d      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	4b94      	ldr	r3, [pc, #592]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a93      	ldr	r2, [pc, #588]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	61d3      	str	r3, [r2, #28]
 8001f5a:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b8e      	ldr	r3, [pc, #568]	; (80021a4 <HAL_RCC_OscConfig+0x4f8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f76:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x4f8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a8a      	ldr	r2, [pc, #552]	; (80021a4 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f82:	f7ff fb7d 	bl	8001680 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8a:	f7ff fb79 	bl	8001680 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b64      	cmp	r3, #100	; 0x64
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0fd      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	4b81      	ldr	r3, [pc, #516]	; (80021a4 <HAL_RCC_OscConfig+0x4f8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x312>
 8001fb0:	4b7b      	ldr	r3, [pc, #492]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a7a      	ldr	r2, [pc, #488]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e02d      	b.n	800201a <HAL_RCC_OscConfig+0x36e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x334>
 8001fc6:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a75      	ldr	r2, [pc, #468]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	4b73      	ldr	r3, [pc, #460]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a72      	ldr	r2, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	6213      	str	r3, [r2, #32]
 8001fde:	e01c      	b.n	800201a <HAL_RCC_OscConfig+0x36e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d10c      	bne.n	8002002 <HAL_RCC_OscConfig+0x356>
 8001fe8:	4b6d      	ldr	r3, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a6c      	ldr	r2, [pc, #432]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a69      	ldr	r2, [pc, #420]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6213      	str	r3, [r2, #32]
 8002000:	e00b      	b.n	800201a <HAL_RCC_OscConfig+0x36e>
 8002002:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a66      	ldr	r2, [pc, #408]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a63      	ldr	r2, [pc, #396]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d015      	beq.n	800204e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7ff fb2d 	bl	8001680 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7ff fb29 	bl	8001680 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0ab      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	4b57      	ldr	r3, [pc, #348]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0ee      	beq.n	800202a <HAL_RCC_OscConfig+0x37e>
 800204c:	e014      	b.n	8002078 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204e:	f7ff fb17 	bl	8001680 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002054:	e00a      	b.n	800206c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7ff fb13 	bl	8001680 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f241 3288 	movw	r2, #5000	; 0x1388
 8002064:	4293      	cmp	r3, r2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e095      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1ee      	bne.n	8002056 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d105      	bne.n	800208a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800207e:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a47      	ldr	r2, [pc, #284]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002088:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8081 	beq.w	8002196 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002094:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d061      	beq.n	8002164 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d146      	bne.n	8002136 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a8:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <HAL_RCC_OscConfig+0x4fc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7ff fae7 	bl	8001680 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7ff fae3 	bl	8001680 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e067      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c8:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020dc:	d108      	bne.n	80020f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020de:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	492d      	ldr	r1, [pc, #180]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a19      	ldr	r1, [r3, #32]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	430b      	orrs	r3, r1
 8002102:	4927      	ldr	r1, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_RCC_OscConfig+0x4fc>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7ff fab7 	bl	8001680 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff fab3 	bl	8001680 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e037      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x46a>
 8002134:	e02f      	b.n	8002196 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_RCC_OscConfig+0x4fc>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff faa0 	bl	8001680 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff fa9c 	bl	8001680 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e020      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x498>
 8002162:	e018      	b.n	8002196 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e013      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	429a      	cmp	r2, r3
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
 80021a8:	42420060 	.word	0x42420060

080021ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0d0      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d910      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b67      	ldr	r3, [pc, #412]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4965      	ldr	r1, [pc, #404]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b63      	ldr	r3, [pc, #396]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b59      	ldr	r3, [pc, #356]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a58      	ldr	r2, [pc, #352]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002212:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a52      	ldr	r2, [pc, #328]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800222a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222c:	4b50      	ldr	r3, [pc, #320]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	494d      	ldr	r1, [pc, #308]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d040      	beq.n	80022cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d115      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b41      	ldr	r3, [pc, #260]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e073      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06b      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4936      	ldr	r1, [pc, #216]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800229c:	f7ff f9f0 	bl	8001680 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7ff f9ec 	bl	8001680 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e053      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d210      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 0207 	bic.w	r2, r3, #7
 80022e2:	4922      	ldr	r1, [pc, #136]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e032      	b.n	8002362 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4916      	ldr	r1, [pc, #88]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490e      	ldr	r1, [pc, #56]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f821 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800233e:	4601      	mov	r1, r0
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	5cd3      	ldrb	r3, [r2, r3]
 800234e:	fa21 f303 	lsr.w	r3, r1, r3
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <HAL_RCC_ClockConfig+0x1cc>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1d0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f806 	bl	800136c <HAL_InitTick>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40022000 	.word	0x40022000
 8002370:	40021000 	.word	0x40021000
 8002374:	08005338 	.word	0x08005338
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b490      	push	{r4, r7}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002388:	1d3c      	adds	r4, r7, #4
 800238a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800238c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002390:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x40>
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d003      	beq.n	80023c6 <HAL_RCC_GetSysClockFreq+0x46>
 80023be:	e02d      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023c2:	623b      	str	r3, [r7, #32]
      break;
 80023c4:	e02d      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	0c9b      	lsrs	r3, r3, #18
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023d2:	4413      	add	r3, r2
 80023d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c5b      	lsrs	r3, r3, #17
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023f2:	4413      	add	r3, r2
 80023f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	4a0f      	ldr	r2, [pc, #60]	; (800243c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023fe:	fb02 f203 	mul.w	r2, r2, r3
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	e004      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	4a0c      	ldr	r2, [pc, #48]	; (8002440 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	623b      	str	r3, [r7, #32]
      break;
 800241a:	e002      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_RCC_GetSysClockFreq+0xbc>)
 800241e:	623b      	str	r3, [r7, #32]
      break;
 8002420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002422:	6a3b      	ldr	r3, [r7, #32]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bc90      	pop	{r4, r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	0800531c 	.word	0x0800531c
 8002434:	0800532c 	.word	0x0800532c
 8002438:	40021000 	.word	0x40021000
 800243c:	007a1200 	.word	0x007a1200
 8002440:	003d0900 	.word	0x003d0900

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b02      	ldr	r3, [pc, #8]	; (8002454 <HAL_RCC_GetHCLKFreq+0x10>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff2 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002460:	4601      	mov	r1, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4a03      	ldr	r2, [pc, #12]	; (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	08005348 	.word	0x08005348

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002484:	f7ff ffde 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002488:	4601      	mov	r1, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0adb      	lsrs	r3, r3, #11
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4a03      	ldr	r2, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08005348 	.word	0x08005348

080024a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	220f      	movs	r2, #15
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_GetClockConfig+0x58>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_RCC_GetClockConfig+0x58>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_GetClockConfig+0x58>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_GetClockConfig+0x58>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0207 	and.w	r2, r3, #7
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	40021000 	.word	0x40021000
 8002504:	40022000 	.word	0x40022000

08002508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <RCC_Delay+0x34>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <RCC_Delay+0x38>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0a5b      	lsrs	r3, r3, #9
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002524:	bf00      	nop
  }
  while (Delay --);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	60fa      	str	r2, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <RCC_Delay+0x1c>
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e041      	b.n	80025da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f839 	bl	80025e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 f9b4 	bl	80028f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d001      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e03a      	b.n	8002682 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a18      	ldr	r2, [pc, #96]	; (800268c <HAL_TIM_Base_Start_IT+0x98>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00e      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x58>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002636:	d009      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x58>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <HAL_TIM_Base_Start_IT+0x9c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x58>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <HAL_TIM_Base_Start_IT+0xa0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d111      	bne.n	8002670 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b06      	cmp	r3, #6
 800265c:	d010      	beq.n	8002680 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266e:	e007      	b.n	8002680 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400
 8002694:	40000800 	.word	0x40000800

08002698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d122      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d11b      	bne.n	80026f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0202 	mvn.w	r2, #2
 80026c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8ed 	bl	80028ba <HAL_TIM_IC_CaptureCallback>
 80026e0:	e005      	b.n	80026ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8e0 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f8ef 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0204 	mvn.w	r2, #4
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8c3 	bl	80028ba <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8b6 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f8c5 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b08      	cmp	r3, #8
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b08      	cmp	r3, #8
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0208 	mvn.w	r2, #8
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f899 	bl	80028ba <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f88c 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f89b 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0210 	mvn.w	r2, #16
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2208      	movs	r2, #8
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f86f 	bl	80028ba <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f862 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f871 	bl	80028cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d10e      	bne.n	800281c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0201 	mvn.w	r2, #1
 8002814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fd5e 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	2b80      	cmp	r3, #128	; 0x80
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8bf 	bl	80029c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f835 	bl	80028de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0220 	mvn.w	r2, #32
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f88a 	bl	80029b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <TIM_Base_SetConfig+0xb8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00b      	beq.n	8002920 <TIM_Base_SetConfig+0x30>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d007      	beq.n	8002920 <TIM_Base_SetConfig+0x30>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a26      	ldr	r2, [pc, #152]	; (80029ac <TIM_Base_SetConfig+0xbc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x30>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <TIM_Base_SetConfig+0xc0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d108      	bne.n	8002932 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <TIM_Base_SetConfig+0xb8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <TIM_Base_SetConfig+0x62>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0x62>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a19      	ldr	r2, [pc, #100]	; (80029ac <TIM_Base_SetConfig+0xbc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0x62>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <TIM_Base_SetConfig+0xc0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <TIM_Base_SetConfig+0xb8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d103      	bne.n	8002998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	615a      	str	r2, [r3, #20]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800

080029b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e03f      	b.n	8002a6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fd9e 	bl	8001540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2224      	movs	r2, #36	; 0x24
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fbf9 	bl	8003214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d130      	bne.n	8002aee <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_UART_Transmit_IT+0x26>
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e029      	b.n	8002af0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Transmit_IT+0x38>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e022      	b.n	8002af0 <HAL_UART_Transmit_IT+0x7e>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	88fa      	ldrh	r2, [r7, #6]
 8002abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	88fa      	ldrh	r2, [r7, #6]
 8002ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2221      	movs	r2, #33	; 0x21
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ae8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	4613      	mov	r3, r2
 8002b06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d11d      	bne.n	8002b50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <HAL_UART_Receive_IT+0x26>
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e016      	b.n	8002b52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Receive_IT+0x38>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e00f      	b.n	8002b52 <HAL_UART_Receive_IT+0x58>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9da 	bl	8002f00 <UART_Start_Receive_IT>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	e000      	b.n	8002b52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b50:	2302      	movs	r3, #2
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10d      	bne.n	8002bae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_UART_IRQHandler+0x52>
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fa8a 	bl	80030c0 <UART_Receive_IT>
      return;
 8002bac:	e17c      	b.n	8002ea8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80b1 	beq.w	8002d18 <HAL_UART_IRQHandler+0x1bc>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d105      	bne.n	8002bcc <HAL_UART_IRQHandler+0x70>
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80a6 	beq.w	8002d18 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_UART_IRQHandler+0x90>
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_UART_IRQHandler+0xb0>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f043 0202 	orr.w	r2, r3, #2
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_UART_IRQHandler+0xd0>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00f      	beq.n	8002c56 <HAL_UART_IRQHandler+0xfa>
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <HAL_UART_IRQHandler+0xee>
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0208 	orr.w	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 811f 	beq.w	8002e9e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_UART_IRQHandler+0x11e>
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fa23 	bl	80030c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x146>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d031      	beq.n	8002d06 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f965 	bl	8002f72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d023      	beq.n	8002cfe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d013      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	4a77      	ldr	r2, [pc, #476]	; (8002eb0 <HAL_UART_IRQHandler+0x354>)
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fe16 	bl	800190c <HAL_DMA_Abort_IT>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e00e      	b.n	8002d14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f8ee 	bl	8002ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	e00a      	b.n	8002d14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8ea 	bl	8002ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	e006      	b.n	8002d14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8e6 	bl	8002ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d12:	e0c4      	b.n	8002e9e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	bf00      	nop
    return;
 8002d16:	e0c2      	b.n	8002e9e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 80a1 	bne.w	8002e64 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 809b 	beq.w	8002e64 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8095 	beq.w	8002e64 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d04e      	beq.n	8002dfc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d68:	8a3b      	ldrh	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8099 	beq.w	8002ea2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d74:	8a3a      	ldrh	r2, [r7, #16]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	f080 8093 	bcs.w	8002ea2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8a3a      	ldrh	r2, [r7, #16]
 8002d80:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d02b      	beq.n	8002de4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0210 	bic.w	r2, r2, #16
 8002dd8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fd59 	bl	8001896 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f878 	bl	8002eea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dfa:	e052      	b.n	8002ea2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d048      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002e14:	8a7b      	ldrh	r3, [r7, #18]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d045      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e28:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0210 	bic.w	r2, r2, #16
 8002e56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e58:	8a7b      	ldrh	r3, [r7, #18]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f844 	bl	8002eea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e62:	e020      	b.n	8002ea6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_UART_IRQHandler+0x324>
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8ba 	bl	8002ff2 <UART_Transmit_IT>
    return;
 8002e7e:	e013      	b.n	8002ea8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x34c>
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8fb 	bl	8003090 <UART_EndTransmit_IT>
    return;
 8002e9a:	bf00      	nop
 8002e9c:	e004      	b.n	8002ea8 <HAL_UART_IRQHandler+0x34c>
    return;
 8002e9e:	bf00      	nop
 8002ea0:	e002      	b.n	8002ea8 <HAL_UART_IRQHandler+0x34c>
      return;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <HAL_UART_IRQHandler+0x34c>
      return;
 8002ea6:	bf00      	nop
  }
}
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08002fcb 	.word	0x08002fcb

08002eb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2222      	movs	r2, #34	; 0x22
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f44:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0220 	orr.w	r2, r2, #32
 8002f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f88:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0210 	bic.w	r2, r2, #16
 8002fb0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff ff77 	bl	8002ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b21      	cmp	r3, #33	; 0x21
 8003004:	d13e      	bne.n	8003084 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300e:	d114      	bne.n	800303a <UART_Transmit_IT+0x48>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d110      	bne.n	800303a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800302c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	1c9a      	adds	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	621a      	str	r2, [r3, #32]
 8003038:	e008      	b.n	800304c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	1c59      	adds	r1, r3, #1
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6211      	str	r1, [r2, #32]
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29b      	uxth	r3, r3
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4619      	mov	r1, r3
 800305a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10f      	bne.n	8003080 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800306e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff feff 	bl	8002eb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b22      	cmp	r3, #34	; 0x22
 80030d2:	f040 8099 	bne.w	8003208 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030de:	d117      	bne.n	8003110 <UART_Receive_IT+0x50>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d113      	bne.n	8003110 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fe:	b29a      	uxth	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	1c9a      	adds	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	629a      	str	r2, [r3, #40]	; 0x28
 800310e:	e026      	b.n	800315e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	d007      	beq.n	8003134 <UART_Receive_IT+0x74>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <UART_Receive_IT+0x82>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	e008      	b.n	8003154 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800314e:	b2da      	uxtb	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29b      	uxth	r3, r3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4619      	mov	r1, r3
 800316c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800316e:	2b00      	cmp	r3, #0
 8003170:	d148      	bne.n	8003204 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0220 	bic.w	r2, r2, #32
 8003180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d123      	bne.n	80031fa <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0210 	bic.w	r2, r2, #16
 80031c6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d10a      	bne.n	80031ec <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f0:	4619      	mov	r1, r3
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff fe79 	bl	8002eea <HAL_UARTEx_RxEventCallback>
 80031f8:	e002      	b.n	8003200 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fe63 	bl	8002ec6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e002      	b.n	800320a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800324e:	f023 030c 	bic.w	r3, r3, #12
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	430b      	orrs	r3, r1
 800325a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <UART_SetConfig+0x114>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d103      	bne.n	8003284 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800327c:	f7ff f900 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	e002      	b.n	800328a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7ff f8e8 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8003288:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a0:	4a22      	ldr	r2, [pc, #136]	; (800332c <UART_SetConfig+0x118>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	0119      	lsls	r1, r3, #4
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009a      	lsls	r2, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <UART_SetConfig+0x118>)
 80032c2:	fba3 0302 	umull	r0, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	fb00 f303 	mul.w	r3, r0, r3
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	3332      	adds	r3, #50	; 0x32
 80032d4:	4a15      	ldr	r2, [pc, #84]	; (800332c <UART_SetConfig+0x118>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e0:	4419      	add	r1, r3
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009a      	lsls	r2, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <UART_SetConfig+0x118>)
 80032fa:	fba3 0302 	umull	r0, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2064      	movs	r0, #100	; 0x64
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	3332      	adds	r3, #50	; 0x32
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <UART_SetConfig+0x118>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	440a      	add	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40013800 	.word	0x40013800
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800333e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003342:	2b84      	cmp	r3, #132	; 0x84
 8003344:	d005      	beq.n	8003352 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003346:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	3303      	adds	r3, #3
 8003350:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003352:	68fb      	ldr	r3, [r7, #12]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003362:	f000 facd 	bl	8003900 <vTaskStartScheduler>
  
  return osOK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}

0800336c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800336c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af04      	add	r7, sp, #16
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <osThreadCreate+0x54>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01c      	beq.n	80033c0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685c      	ldr	r4, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681d      	ldr	r5, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691e      	ldr	r6, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ffc9 	bl	8003330 <makeFreeRtosPriority>
 800339e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033a8:	9202      	str	r2, [sp, #8]
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	9100      	str	r1, [sp, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	4632      	mov	r2, r6
 80033b2:	4629      	mov	r1, r5
 80033b4:	4620      	mov	r0, r4
 80033b6:	f000 f8e8 	bl	800358a <xTaskCreateStatic>
 80033ba:	4603      	mov	r3, r0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e01c      	b.n	80033fa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685c      	ldr	r4, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033cc:	b29e      	uxth	r6, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ffab 	bl	8003330 <makeFreeRtosPriority>
 80033da:	4602      	mov	r2, r0
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4632      	mov	r2, r6
 80033e8:	4629      	mov	r1, r5
 80033ea:	4620      	mov	r0, r4
 80033ec:	f000 f926 	bl	800363c <xTaskCreate>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033fa:	68fb      	ldr	r3, [r7, #12]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003404 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <osDelay+0x16>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	e000      	b.n	800341c <osDelay+0x18>
 800341a:	2301      	movs	r3, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fa3b 	bl	8003898 <vTaskDelay>
  
  return osOK;
 8003422:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f103 0208 	add.w	r2, r3, #8
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f103 0208 	add.w	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f103 0208 	add.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d103      	bne.n	80034e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e00c      	b.n	8003502 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3308      	adds	r3, #8
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e002      	b.n	80034f6 <vListInsert+0x2e>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d2f6      	bcs.n	80034f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	601a      	str	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d103      	bne.n	800356c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	1e5a      	subs	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr

0800358a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800358a:	b580      	push	{r7, lr}
 800358c:	b08e      	sub	sp, #56	; 0x38
 800358e:	af04      	add	r7, sp, #16
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	e7fe      	b.n	80035b0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <xTaskCreateStatic+0x42>
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e7fe      	b.n	80035ca <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035cc:	2354      	movs	r3, #84	; 0x54
 80035ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b54      	cmp	r3, #84	; 0x54
 80035d4:	d009      	beq.n	80035ea <xTaskCreateStatic+0x60>
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	e7fe      	b.n	80035e8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01e      	beq.n	800362e <xTaskCreateStatic+0xa4>
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01b      	beq.n	800362e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003608:	2300      	movs	r3, #0
 800360a:	9303      	str	r3, [sp, #12]
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	9302      	str	r3, [sp, #8]
 8003610:	f107 0314 	add.w	r3, r7, #20
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f850 	bl	80036c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003628:	f000 f8cc 	bl	80037c4 <prvAddNewTaskToReadyList>
 800362c:	e001      	b.n	8003632 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003632:	697b      	ldr	r3, [r7, #20]
	}
 8003634:	4618      	mov	r0, r3
 8003636:	3728      	adds	r7, #40	; 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08c      	sub	sp, #48	; 0x30
 8003640:	af04      	add	r7, sp, #16
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fe53 	bl	80042fc <pvPortMalloc>
 8003656:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800365e:	2054      	movs	r0, #84	; 0x54
 8003660:	f000 fe4c 	bl	80042fc <pvPortMalloc>
 8003664:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
 8003672:	e005      	b.n	8003680 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003674:	6978      	ldr	r0, [r7, #20]
 8003676:	f000 ff03 	bl	8004480 <vPortFree>
 800367a:	e001      	b.n	8003680 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d017      	beq.n	80036b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	2300      	movs	r3, #0
 8003692:	9303      	str	r3, [sp, #12]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	9302      	str	r3, [sp, #8]
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f80e 	bl	80036c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036aa:	69f8      	ldr	r0, [r7, #28]
 80036ac:	f000 f88a 	bl	80037c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036b0:	2301      	movs	r3, #1
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	e002      	b.n	80036bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036bc:	69bb      	ldr	r3, [r7, #24]
	}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b088      	sub	sp, #32
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036de:	3b01      	subs	r3, #1
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	f023 0307 	bic.w	r3, r3, #7
 80036ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <prvInitialiseNewTask+0x46>
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e7fe      	b.n	800370a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	e012      	b.n	8003738 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	7819      	ldrb	r1, [r3, #0]
 800371a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	3334      	adds	r3, #52	; 0x34
 8003722:	460a      	mov	r2, r1
 8003724:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3301      	adds	r3, #1
 8003736:	61fb      	str	r3, [r7, #28]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	d9e9      	bls.n	8003712 <prvInitialiseNewTask+0x4c>
 800373e:	e000      	b.n	8003742 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003740:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	2b06      	cmp	r3, #6
 800374e:	d901      	bls.n	8003754 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003750:	2306      	movs	r3, #6
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	2200      	movs	r2, #0
 8003764:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	3304      	adds	r3, #4
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fe7d 	bl	800346a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	3318      	adds	r3, #24
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fe78 	bl	800346a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	f1c3 0207 	rsb	r2, r3, #7
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	2200      	movs	r2, #0
 8003794:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	68f9      	ldr	r1, [r7, #12]
 80037a2:	69b8      	ldr	r0, [r7, #24]
 80037a4:	f000 fc06 	bl	8003fb4 <pxPortInitialiseStack>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ba:	bf00      	nop
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037cc:	f000 fcdc 	bl	8004188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <prvAddNewTaskToReadyList+0xb8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a29      	ldr	r2, [pc, #164]	; (800387c <prvAddNewTaskToReadyList+0xb8>)
 80037d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037da:	4b29      	ldr	r3, [pc, #164]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037e2:	4a27      	ldr	r2, [pc, #156]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037e8:	4b24      	ldr	r3, [pc, #144]	; (800387c <prvAddNewTaskToReadyList+0xb8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d110      	bne.n	8003812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037f0:	f000 fabc 	bl	8003d6c <prvInitialiseTaskLists>
 80037f4:	e00d      	b.n	8003812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037f6:	4b23      	ldr	r3, [pc, #140]	; (8003884 <prvAddNewTaskToReadyList+0xc0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	429a      	cmp	r2, r3
 800380a:	d802      	bhi.n	8003812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800380c:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <prvAddNewTaskToReadyList+0xc4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <prvAddNewTaskToReadyList+0xc4>)
 800381a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	2201      	movs	r2, #1
 8003822:	409a      	lsls	r2, r3
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <prvAddNewTaskToReadyList+0xc8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4313      	orrs	r3, r2
 800382a:	4a18      	ldr	r2, [pc, #96]	; (800388c <prvAddNewTaskToReadyList+0xc8>)
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4a15      	ldr	r2, [pc, #84]	; (8003890 <prvAddNewTaskToReadyList+0xcc>)
 800383c:	441a      	add	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7ff fe1c 	bl	8003482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800384a:	f000 fccb 	bl	80041e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <prvAddNewTaskToReadyList+0xc0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <prvAddNewTaskToReadyList+0xbc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	429a      	cmp	r2, r3
 8003862:	d207      	bcs.n	8003874 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <prvAddNewTaskToReadyList+0xd0>)
 8003866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	200010cc 	.word	0x200010cc
 8003880:	20000fcc 	.word	0x20000fcc
 8003884:	200010d8 	.word	0x200010d8
 8003888:	200010e8 	.word	0x200010e8
 800388c:	200010d4 	.word	0x200010d4
 8003890:	20000fd0 	.word	0x20000fd0
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <vTaskDelay+0x60>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <vTaskDelay+0x2e>
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	e7fe      	b.n	80038c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80038c6:	f000 f879 	bl	80039bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038ca:	2100      	movs	r1, #0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fb0b 	bl	8003ee8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038d2:	f000 f881 	bl	80039d8 <xTaskResumeAll>
 80038d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d107      	bne.n	80038ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <vTaskDelay+0x64>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	200010f4 	.word	0x200010f4
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800390e:	463a      	mov	r2, r7
 8003910:	1d39      	adds	r1, r7, #4
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd fbde 	bl	80010d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	2300      	movs	r3, #0
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	460a      	mov	r2, r1
 800392e:	491d      	ldr	r1, [pc, #116]	; (80039a4 <vTaskStartScheduler+0xa4>)
 8003930:	481d      	ldr	r0, [pc, #116]	; (80039a8 <vTaskStartScheduler+0xa8>)
 8003932:	f7ff fe2a 	bl	800358a <xTaskCreateStatic>
 8003936:	4602      	mov	r2, r0
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <vTaskStartScheduler+0xac>)
 800393a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <vTaskStartScheduler+0xac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003944:	2301      	movs	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	e001      	b.n	800394e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d115      	bne.n	8003980 <vTaskStartScheduler+0x80>
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003966:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <vTaskStartScheduler+0xb0>)
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <vTaskStartScheduler+0xb4>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <vTaskStartScheduler+0xb8>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800397a:	f000 fb95 	bl	80040a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800397e:	e00d      	b.n	800399c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d109      	bne.n	800399c <vTaskStartScheduler+0x9c>
 8003988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e7fe      	b.n	800399a <vTaskStartScheduler+0x9a>
}
 800399c:	bf00      	nop
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	08005330 	.word	0x08005330
 80039a8:	08003d3d 	.word	0x08003d3d
 80039ac:	200010f0 	.word	0x200010f0
 80039b0:	200010ec 	.word	0x200010ec
 80039b4:	200010d8 	.word	0x200010d8
 80039b8:	200010d0 	.word	0x200010d0

080039bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <vTaskSuspendAll+0x18>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	4a03      	ldr	r2, [pc, #12]	; (80039d4 <vTaskSuspendAll+0x18>)
 80039c8:	6013      	str	r3, [r2, #0]
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	200010f4 	.word	0x200010f4

080039d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039e6:	4b41      	ldr	r3, [pc, #260]	; (8003aec <xTaskResumeAll+0x114>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <xTaskResumeAll+0x2a>
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	e7fe      	b.n	8003a00 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a02:	f000 fbc1 	bl	8004188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <xTaskResumeAll+0x114>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	4a37      	ldr	r2, [pc, #220]	; (8003aec <xTaskResumeAll+0x114>)
 8003a0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <xTaskResumeAll+0x114>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d161      	bne.n	8003adc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a18:	4b35      	ldr	r3, [pc, #212]	; (8003af0 <xTaskResumeAll+0x118>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d05d      	beq.n	8003adc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a20:	e02e      	b.n	8003a80 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <xTaskResumeAll+0x11c>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3318      	adds	r3, #24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fd82 	bl	8003538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fd7d 	bl	8003538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	2201      	movs	r2, #1
 8003a44:	409a      	lsls	r2, r3
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <xTaskResumeAll+0x120>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	4a2a      	ldr	r2, [pc, #168]	; (8003af8 <xTaskResumeAll+0x120>)
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4a27      	ldr	r2, [pc, #156]	; (8003afc <xTaskResumeAll+0x124>)
 8003a5e:	441a      	add	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7ff fd0b 	bl	8003482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <xTaskResumeAll+0x128>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <xTaskResumeAll+0x12c>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a80:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <xTaskResumeAll+0x11c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1cc      	bne.n	8003a22 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a8e:	f000 fa07 	bl	8003ea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <xTaskResumeAll+0x130>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a9e:	f000 f837 	bl	8003b10 <xTaskIncrementTick>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003aa8:	4b16      	ldr	r3, [pc, #88]	; (8003b04 <xTaskResumeAll+0x12c>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f1      	bne.n	8003a9e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <xTaskResumeAll+0x130>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <xTaskResumeAll+0x12c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <xTaskResumeAll+0x134>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003adc:	f000 fb82 	bl	80041e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200010f4 	.word	0x200010f4
 8003af0:	200010cc 	.word	0x200010cc
 8003af4:	2000108c 	.word	0x2000108c
 8003af8:	200010d4 	.word	0x200010d4
 8003afc:	20000fd0 	.word	0x20000fd0
 8003b00:	20000fcc 	.word	0x20000fcc
 8003b04:	200010e0 	.word	0x200010e0
 8003b08:	200010dc 	.word	0x200010dc
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1a:	4b50      	ldr	r3, [pc, #320]	; (8003c5c <xTaskIncrementTick+0x14c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 808c 	bne.w	8003c3c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b24:	4b4e      	ldr	r3, [pc, #312]	; (8003c60 <xTaskIncrementTick+0x150>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b2c:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <xTaskIncrementTick+0x150>)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d11f      	bne.n	8003b78 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b38:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <xTaskIncrementTick+0x154>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <xTaskIncrementTick+0x46>
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	e7fe      	b.n	8003b54 <xTaskIncrementTick+0x44>
 8003b56:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <xTaskIncrementTick+0x154>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	4b42      	ldr	r3, [pc, #264]	; (8003c68 <xTaskIncrementTick+0x158>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <xTaskIncrementTick+0x154>)
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <xTaskIncrementTick+0x158>)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b40      	ldr	r3, [pc, #256]	; (8003c6c <xTaskIncrementTick+0x15c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4a3e      	ldr	r2, [pc, #248]	; (8003c6c <xTaskIncrementTick+0x15c>)
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	f000 f994 	bl	8003ea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b78:	4b3d      	ldr	r3, [pc, #244]	; (8003c70 <xTaskIncrementTick+0x160>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d34d      	bcc.n	8003c1e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b82:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <xTaskIncrementTick+0x154>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <xTaskIncrementTick+0x80>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <xTaskIncrementTick+0x82>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <xTaskIncrementTick+0x160>)
 8003b98:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9c:	601a      	str	r2, [r3, #0]
					break;
 8003b9e:	e03e      	b.n	8003c1e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <xTaskIncrementTick+0x154>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d203      	bcs.n	8003bc0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bb8:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <xTaskIncrementTick+0x160>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
						break;
 8003bbe:	e02e      	b.n	8003c1e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fcb7 	bl	8003538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d004      	beq.n	8003bdc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3318      	adds	r3, #24
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fcae 	bl	8003538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <xTaskIncrementTick+0x164>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <xTaskIncrementTick+0x164>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <xTaskIncrementTick+0x168>)
 8003bfc:	441a      	add	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f7ff fc3c 	bl	8003482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <xTaskIncrementTick+0x16c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3b4      	bcc.n	8003b82 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c1c:	e7b1      	b.n	8003b82 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <xTaskIncrementTick+0x16c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4914      	ldr	r1, [pc, #80]	; (8003c78 <xTaskIncrementTick+0x168>)
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d907      	bls.n	8003c46 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	e004      	b.n	8003c46 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c3c:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <xTaskIncrementTick+0x170>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <xTaskIncrementTick+0x170>)
 8003c44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <xTaskIncrementTick+0x174>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c52:	697b      	ldr	r3, [r7, #20]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200010f4 	.word	0x200010f4
 8003c60:	200010d0 	.word	0x200010d0
 8003c64:	20001084 	.word	0x20001084
 8003c68:	20001088 	.word	0x20001088
 8003c6c:	200010e4 	.word	0x200010e4
 8003c70:	200010ec 	.word	0x200010ec
 8003c74:	200010d4 	.word	0x200010d4
 8003c78:	20000fd0 	.word	0x20000fd0
 8003c7c:	20000fcc 	.word	0x20000fcc
 8003c80:	200010dc 	.word	0x200010dc
 8003c84:	200010e0 	.word	0x200010e0

08003c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <vTaskSwitchContext+0xa0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c96:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <vTaskSwitchContext+0xa4>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c9c:	e03e      	b.n	8003d1c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <vTaskSwitchContext+0xa4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ca4:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <vTaskSwitchContext+0xa8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003cb2:	7afb      	ldrb	r3, [r7, #11]
 8003cb4:	f1c3 031f 	rsb	r3, r3, #31
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	491e      	ldr	r1, [pc, #120]	; (8003d34 <vTaskSwitchContext+0xac>)
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	e7fe      	b.n	8003ce0 <vTaskSwitchContext+0x58>
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <vTaskSwitchContext+0xac>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	3308      	adds	r3, #8
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d104      	bne.n	8003d12 <vTaskSwitchContext+0x8a>
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <vTaskSwitchContext+0xb0>)
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	200010f4 	.word	0x200010f4
 8003d2c:	200010e0 	.word	0x200010e0
 8003d30:	200010d4 	.word	0x200010d4
 8003d34:	20000fd0 	.word	0x20000fd0
 8003d38:	20000fcc 	.word	0x20000fcc

08003d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d44:	f000 f852 	bl	8003dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <prvIdleTask+0x28>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d9f9      	bls.n	8003d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <prvIdleTask+0x2c>)
 8003d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d60:	e7f0      	b.n	8003d44 <prvIdleTask+0x8>
 8003d62:	bf00      	nop
 8003d64:	20000fd0 	.word	0x20000fd0
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	e00c      	b.n	8003d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <prvInitialiseTaskLists+0x60>)
 8003d84:	4413      	add	r3, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fb50 	bl	800342c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d9ef      	bls.n	8003d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d98:	480d      	ldr	r0, [pc, #52]	; (8003dd0 <prvInitialiseTaskLists+0x64>)
 8003d9a:	f7ff fb47 	bl	800342c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d9e:	480d      	ldr	r0, [pc, #52]	; (8003dd4 <prvInitialiseTaskLists+0x68>)
 8003da0:	f7ff fb44 	bl	800342c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003da4:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <prvInitialiseTaskLists+0x6c>)
 8003da6:	f7ff fb41 	bl	800342c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003daa:	480c      	ldr	r0, [pc, #48]	; (8003ddc <prvInitialiseTaskLists+0x70>)
 8003dac:	f7ff fb3e 	bl	800342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003db0:	480b      	ldr	r0, [pc, #44]	; (8003de0 <prvInitialiseTaskLists+0x74>)
 8003db2:	f7ff fb3b 	bl	800342c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003db6:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <prvInitialiseTaskLists+0x78>)
 8003db8:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <prvInitialiseTaskLists+0x64>)
 8003dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <prvInitialiseTaskLists+0x7c>)
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <prvInitialiseTaskLists+0x68>)
 8003dc0:	601a      	str	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000fd0 	.word	0x20000fd0
 8003dd0:	2000105c 	.word	0x2000105c
 8003dd4:	20001070 	.word	0x20001070
 8003dd8:	2000108c 	.word	0x2000108c
 8003ddc:	200010a0 	.word	0x200010a0
 8003de0:	200010b8 	.word	0x200010b8
 8003de4:	20001084 	.word	0x20001084
 8003de8:	20001088 	.word	0x20001088

08003dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003df2:	e019      	b.n	8003e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003df4:	f000 f9c8 	bl	8004188 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <prvCheckTasksWaitingTermination+0x4c>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fb97 	bl	8003538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <prvCheckTasksWaitingTermination+0x50>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <prvCheckTasksWaitingTermination+0x50>)
 8003e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <prvCheckTasksWaitingTermination+0x54>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <prvCheckTasksWaitingTermination+0x54>)
 8003e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e1e:	f000 f9e1 	bl	80041e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f80e 	bl	8003e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <prvCheckTasksWaitingTermination+0x54>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e1      	bne.n	8003df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	200010a0 	.word	0x200010a0
 8003e3c:	200010cc 	.word	0x200010cc
 8003e40:	200010b4 	.word	0x200010b4

08003e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d108      	bne.n	8003e68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fb10 	bl	8004480 <vPortFree>
				vPortFree( pxTCB );
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fb0d 	bl	8004480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e66:	e017      	b.n	8003e98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d103      	bne.n	8003e7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fb04 	bl	8004480 <vPortFree>
	}
 8003e78:	e00e      	b.n	8003e98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d009      	beq.n	8003e98 <prvDeleteTCB+0x54>
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	e7fe      	b.n	8003e96 <prvDeleteTCB+0x52>
	}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <prvResetNextTaskUnblockTime+0x40>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <prvResetNextTaskUnblockTime+0x14>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <prvResetNextTaskUnblockTime+0x16>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <prvResetNextTaskUnblockTime+0x44>)
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ec2:	e008      	b.n	8003ed6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <prvResetNextTaskUnblockTime+0x40>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <prvResetNextTaskUnblockTime+0x44>)
 8003ed4:	6013      	str	r3, [r2, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	20001084 	.word	0x20001084
 8003ee4:	200010ec 	.word	0x200010ec

08003ee8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ef2:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef8:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff fb1a 	bl	8003538 <uxListRemove>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	2201      	movs	r2, #1
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43da      	mvns	r2, r3
 8003f18:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d10a      	bne.n	8003f40 <prvAddCurrentTaskToDelayedList+0x58>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3304      	adds	r3, #4
 8003f36:	4619      	mov	r1, r3
 8003f38:	481a      	ldr	r0, [pc, #104]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f3a:	f7ff faa2 	bl	8003482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f3e:	e026      	b.n	8003f8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f48:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d209      	bcs.n	8003f6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f7ff faaf 	bl	80034c8 <vListInsert>
}
 8003f6a:	e010      	b.n	8003f8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f7ff faa5 	bl	80034c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d202      	bcs.n	8003f8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003f88:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6013      	str	r3, [r2, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200010d0 	.word	0x200010d0
 8003f9c:	20000fcc 	.word	0x20000fcc
 8003fa0:	200010d4 	.word	0x200010d4
 8003fa4:	200010b8 	.word	0x200010b8
 8003fa8:	20001088 	.word	0x20001088
 8003fac:	20001084 	.word	0x20001084
 8003fb0:	200010ec 	.word	0x200010ec

08003fb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3b04      	subs	r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3b04      	subs	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 0201 	bic.w	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3b04      	subs	r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fe4:	4a08      	ldr	r2, [pc, #32]	; (8004008 <pxPortInitialiseStack+0x54>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3b14      	subs	r3, #20
 8003fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b20      	subs	r3, #32
 8003ffa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	0800400d 	.word	0x0800400d

0800400c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <prvTaskExitError+0x4c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d009      	beq.n	8004034 <prvTaskExitError+0x28>
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e7fe      	b.n	8004032 <prvTaskExitError+0x26>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004046:	bf00      	nop
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0fc      	beq.n	8004048 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	2000000c 	.word	0x2000000c
 800405c:	00000000 	.word	0x00000000

08004060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <pxCurrentTCBConst2>)
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	6808      	ldr	r0, [r1, #0]
 8004066:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800406a:	f380 8809 	msr	PSP, r0
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f04f 0000 	mov.w	r0, #0
 8004076:	f380 8811 	msr	BASEPRI, r0
 800407a:	f04e 0e0d 	orr.w	lr, lr, #13
 800407e:	4770      	bx	lr

08004080 <pxCurrentTCBConst2>:
 8004080:	20000fcc 	.word	0x20000fcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop

08004088 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004088:	4806      	ldr	r0, [pc, #24]	; (80040a4 <prvPortStartFirstTask+0x1c>)
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	6800      	ldr	r0, [r0, #0]
 800408e:	f380 8808 	msr	MSP, r0
 8004092:	b662      	cpsie	i
 8004094:	b661      	cpsie	f
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	df00      	svc	0
 80040a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040a2:	bf00      	nop
 80040a4:	e000ed08 	.word	0xe000ed08

080040a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <xPortStartScheduler+0xcc>)
 80040b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4b29      	ldr	r3, [pc, #164]	; (8004178 <xPortStartScheduler+0xd0>)
 80040d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040d6:	4b29      	ldr	r3, [pc, #164]	; (800417c <xPortStartScheduler+0xd4>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040dc:	e009      	b.n	80040f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040de:	4b27      	ldr	r3, [pc, #156]	; (800417c <xPortStartScheduler+0xd4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	4a25      	ldr	r2, [pc, #148]	; (800417c <xPortStartScheduler+0xd4>)
 80040e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d0ef      	beq.n	80040de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040fe:	4b1f      	ldr	r3, [pc, #124]	; (800417c <xPortStartScheduler+0xd4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f1c3 0307 	rsb	r3, r3, #7
 8004106:	2b04      	cmp	r3, #4
 8004108:	d009      	beq.n	800411e <xPortStartScheduler+0x76>
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	e7fe      	b.n	800411c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <xPortStartScheduler+0xd4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	4a15      	ldr	r2, [pc, #84]	; (800417c <xPortStartScheduler+0xd4>)
 8004126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <xPortStartScheduler+0xd4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004130:	4a12      	ldr	r2, [pc, #72]	; (800417c <xPortStartScheduler+0xd4>)
 8004132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <xPortStartScheduler+0xd8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a0f      	ldr	r2, [pc, #60]	; (8004180 <xPortStartScheduler+0xd8>)
 8004142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <xPortStartScheduler+0xd8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a0c      	ldr	r2, [pc, #48]	; (8004180 <xPortStartScheduler+0xd8>)
 800414e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004154:	f000 f8b0 	bl	80042b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <xPortStartScheduler+0xdc>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800415e:	f7ff ff93 	bl	8004088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004162:	f7ff fd91 	bl	8003c88 <vTaskSwitchContext>
	prvTaskExitError();
 8004166:	f7ff ff51 	bl	800400c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	e000e400 	.word	0xe000e400
 8004178:	200010f8 	.word	0x200010f8
 800417c:	200010fc 	.word	0x200010fc
 8004180:	e000ed20 	.word	0xe000ed20
 8004184:	2000000c 	.word	0x2000000c

08004188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <vPortEnterCritical+0x54>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3301      	adds	r3, #1
 80041a6:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <vPortEnterCritical+0x54>)
 80041a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <vPortEnterCritical+0x54>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d10e      	bne.n	80041d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <vPortEnterCritical+0x58>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <vPortEnterCritical+0x48>
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	e7fe      	b.n	80041ce <vPortEnterCritical+0x46>
	}
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	2000000c 	.word	0x2000000c
 80041e0:	e000ed04 	.word	0xe000ed04

080041e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <vPortExitCritical+0x48>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <vPortExitCritical+0x22>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	e7fe      	b.n	8004204 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <vPortExitCritical+0x48>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3b01      	subs	r3, #1
 800420c:	4a07      	ldr	r2, [pc, #28]	; (800422c <vPortExitCritical+0x48>)
 800420e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <vPortExitCritical+0x48>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d104      	bne.n	8004222 <vPortExitCritical+0x3e>
 8004218:	2300      	movs	r3, #0
 800421a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	2000000c 	.word	0x2000000c

08004230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004230:	f3ef 8009 	mrs	r0, PSP
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <pxCurrentTCBConst>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004240:	6010      	str	r0, [r2, #0]
 8004242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800424a:	f380 8811 	msr	BASEPRI, r0
 800424e:	f7ff fd1b 	bl	8003c88 <vTaskSwitchContext>
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8811 	msr	BASEPRI, r0
 800425a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800425e:	6819      	ldr	r1, [r3, #0]
 8004260:	6808      	ldr	r0, [r1, #0]
 8004262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004266:	f380 8809 	msr	PSP, r0
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	4770      	bx	lr

08004270 <pxCurrentTCBConst>:
 8004270:	20000fcc 	.word	0x20000fcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop

08004278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004290:	f7ff fc3e 	bl	8003b10 <xTaskIncrementTick>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <SysTick_Handler+0x3c>)
 800429c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <vPortSetupTimerInterrupt+0x30>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <vPortSetupTimerInterrupt+0x34>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <vPortSetupTimerInterrupt+0x38>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <vPortSetupTimerInterrupt+0x3c>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	099b      	lsrs	r3, r3, #6
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <vPortSetupTimerInterrupt+0x40>)
 80042d6:	3b01      	subs	r3, #1
 80042d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042da:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <vPortSetupTimerInterrupt+0x30>)
 80042dc:	2207      	movs	r2, #7
 80042de:	601a      	str	r2, [r3, #0]
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	e000e010 	.word	0xe000e010
 80042ec:	e000e018 	.word	0xe000e018
 80042f0:	20000000 	.word	0x20000000
 80042f4:	10624dd3 	.word	0x10624dd3
 80042f8:	e000e014 	.word	0xe000e014

080042fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004308:	f7ff fb58 	bl	80039bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800430c:	4b57      	ldr	r3, [pc, #348]	; (800446c <pvPortMalloc+0x170>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004314:	f000 f90c 	bl	8004530 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004318:	4b55      	ldr	r3, [pc, #340]	; (8004470 <pvPortMalloc+0x174>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 808c 	bne.w	800443e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01c      	beq.n	8004366 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800432c:	2208      	movs	r2, #8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	2b00      	cmp	r3, #0
 800433c:	d013      	beq.n	8004366 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f023 0307 	bic.w	r3, r3, #7
 8004344:	3308      	adds	r3, #8
 8004346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <pvPortMalloc+0x6a>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e7fe      	b.n	8004364 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d068      	beq.n	800443e <pvPortMalloc+0x142>
 800436c:	4b41      	ldr	r3, [pc, #260]	; (8004474 <pvPortMalloc+0x178>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d863      	bhi.n	800443e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004376:	4b40      	ldr	r3, [pc, #256]	; (8004478 <pvPortMalloc+0x17c>)
 8004378:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800437a:	4b3f      	ldr	r3, [pc, #252]	; (8004478 <pvPortMalloc+0x17c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004380:	e004      	b.n	800438c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d903      	bls.n	800439e <pvPortMalloc+0xa2>
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f1      	bne.n	8004382 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800439e:	4b33      	ldr	r3, [pc, #204]	; (800446c <pvPortMalloc+0x170>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d04a      	beq.n	800443e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2208      	movs	r2, #8
 80043ae:	4413      	add	r3, r2
 80043b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	1ad2      	subs	r2, r2, r3
 80043c2:	2308      	movs	r3, #8
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d91e      	bls.n	8004408 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d009      	beq.n	80043f0 <pvPortMalloc+0xf4>
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	e7fe      	b.n	80043ee <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004402:	69b8      	ldr	r0, [r7, #24]
 8004404:	f000 f8f6 	bl	80045f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004408:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <pvPortMalloc+0x178>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	4a18      	ldr	r2, [pc, #96]	; (8004474 <pvPortMalloc+0x178>)
 8004414:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004416:	4b17      	ldr	r3, [pc, #92]	; (8004474 <pvPortMalloc+0x178>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <pvPortMalloc+0x180>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d203      	bcs.n	800442a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <pvPortMalloc+0x178>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a15      	ldr	r2, [pc, #84]	; (800447c <pvPortMalloc+0x180>)
 8004428:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <pvPortMalloc+0x174>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	431a      	orrs	r2, r3
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800443e:	f7ff facb 	bl	80039d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <pvPortMalloc+0x164>
 800444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	e7fe      	b.n	800445e <pvPortMalloc+0x162>
	return pvReturn;
 8004460:	69fb      	ldr	r3, [r7, #28]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3728      	adds	r7, #40	; 0x28
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20001d08 	.word	0x20001d08
 8004470:	20001d14 	.word	0x20001d14
 8004474:	20001d0c 	.word	0x20001d0c
 8004478:	20001d00 	.word	0x20001d00
 800447c:	20001d10 	.word	0x20001d10

08004480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d046      	beq.n	8004520 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004492:	2308      	movs	r3, #8
 8004494:	425b      	negs	r3, r3
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4413      	add	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4b20      	ldr	r3, [pc, #128]	; (8004528 <vPortFree+0xa8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <vPortFree+0x42>
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e7fe      	b.n	80044c0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <vPortFree+0x5e>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	e7fe      	b.n	80044dc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	4b11      	ldr	r3, [pc, #68]	; (8004528 <vPortFree+0xa8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d019      	beq.n	8004520 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d115      	bne.n	8004520 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <vPortFree+0xa8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	43db      	mvns	r3, r3
 80044fe:	401a      	ands	r2, r3
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004504:	f7ff fa5a 	bl	80039bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <vPortFree+0xac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4413      	add	r3, r2
 8004512:	4a06      	ldr	r2, [pc, #24]	; (800452c <vPortFree+0xac>)
 8004514:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004516:	6938      	ldr	r0, [r7, #16]
 8004518:	f000 f86c 	bl	80045f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800451c:	f7ff fa5c 	bl	80039d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004520:	bf00      	nop
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	20001d14 	.word	0x20001d14
 800452c:	20001d0c 	.word	0x20001d0c

08004530 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004536:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800453a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800453c:	4b27      	ldr	r3, [pc, #156]	; (80045dc <prvHeapInit+0xac>)
 800453e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3307      	adds	r3, #7
 800454e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0307 	bic.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <prvHeapInit+0xac>)
 8004560:	4413      	add	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004568:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <prvHeapInit+0xb0>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <prvHeapInit+0xb0>)
 8004570:	2200      	movs	r2, #0
 8004572:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4413      	add	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800457c:	2208      	movs	r2, #8
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0307 	bic.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <prvHeapInit+0xb4>)
 8004590:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004592:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <prvHeapInit+0xb4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <prvHeapInit+0xb4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <prvHeapInit+0xb4>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <prvHeapInit+0xb8>)
 80045be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4a09      	ldr	r2, [pc, #36]	; (80045ec <prvHeapInit+0xbc>)
 80045c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <prvHeapInit+0xc0>)
 80045ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045ce:	601a      	str	r2, [r3, #0]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20001100 	.word	0x20001100
 80045e0:	20001d00 	.word	0x20001d00
 80045e4:	20001d08 	.word	0x20001d08
 80045e8:	20001d10 	.word	0x20001d10
 80045ec:	20001d0c 	.word	0x20001d0c
 80045f0:	20001d14 	.word	0x20001d14

080045f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045fc:	4b27      	ldr	r3, [pc, #156]	; (800469c <prvInsertBlockIntoFreeList+0xa8>)
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e002      	b.n	8004608 <prvInsertBlockIntoFreeList+0x14>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d8f7      	bhi.n	8004602 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d108      	bne.n	8004636 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	441a      	add	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d118      	bne.n	800467c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <prvInsertBlockIntoFreeList+0xac>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d00d      	beq.n	8004672 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e008      	b.n	8004684 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <prvInsertBlockIntoFreeList+0xac>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e003      	b.n	8004684 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	d002      	beq.n	8004692 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	20001d00 	.word	0x20001d00
 80046a0:	20001d08 	.word	0x20001d08

080046a4 <atoi>:
 80046a4:	220a      	movs	r2, #10
 80046a6:	2100      	movs	r1, #0
 80046a8:	f000 b928 	b.w	80048fc <strtol>

080046ac <__errno>:
 80046ac:	4b01      	ldr	r3, [pc, #4]	; (80046b4 <__errno+0x8>)
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000010 	.word	0x20000010

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	2500      	movs	r5, #0
 80046bc:	4e0c      	ldr	r6, [pc, #48]	; (80046f0 <__libc_init_array+0x38>)
 80046be:	4c0d      	ldr	r4, [pc, #52]	; (80046f4 <__libc_init_array+0x3c>)
 80046c0:	1ba4      	subs	r4, r4, r6
 80046c2:	10a4      	asrs	r4, r4, #2
 80046c4:	42a5      	cmp	r5, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	f000 fd38 	bl	800513c <_init>
 80046cc:	2500      	movs	r5, #0
 80046ce:	4e0a      	ldr	r6, [pc, #40]	; (80046f8 <__libc_init_array+0x40>)
 80046d0:	4c0a      	ldr	r4, [pc, #40]	; (80046fc <__libc_init_array+0x44>)
 80046d2:	1ba4      	subs	r4, r4, r6
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	42a5      	cmp	r5, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046e0:	4798      	blx	r3
 80046e2:	3501      	adds	r5, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046ea:	4798      	blx	r3
 80046ec:	3501      	adds	r5, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	08005490 	.word	0x08005490
 80046f4:	08005490 	.word	0x08005490
 80046f8:	08005490 	.word	0x08005490
 80046fc:	08005494 	.word	0x08005494

08004700 <memcpy>:
 8004700:	b510      	push	{r4, lr}
 8004702:	1e43      	subs	r3, r0, #1
 8004704:	440a      	add	r2, r1
 8004706:	4291      	cmp	r1, r2
 8004708:	d100      	bne.n	800470c <memcpy+0xc>
 800470a:	bd10      	pop	{r4, pc}
 800470c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004714:	e7f7      	b.n	8004706 <memcpy+0x6>

08004716 <memset>:
 8004716:	4603      	mov	r3, r0
 8004718:	4402      	add	r2, r0
 800471a:	4293      	cmp	r3, r2
 800471c:	d100      	bne.n	8004720 <memset+0xa>
 800471e:	4770      	bx	lr
 8004720:	f803 1b01 	strb.w	r1, [r3], #1
 8004724:	e7f9      	b.n	800471a <memset+0x4>
	...

08004728 <sniprintf>:
 8004728:	b40c      	push	{r2, r3}
 800472a:	b530      	push	{r4, r5, lr}
 800472c:	4b17      	ldr	r3, [pc, #92]	; (800478c <sniprintf+0x64>)
 800472e:	1e0c      	subs	r4, r1, #0
 8004730:	b09d      	sub	sp, #116	; 0x74
 8004732:	681d      	ldr	r5, [r3, #0]
 8004734:	da08      	bge.n	8004748 <sniprintf+0x20>
 8004736:	238b      	movs	r3, #139	; 0x8b
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	b01d      	add	sp, #116	; 0x74
 8004740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004744:	b002      	add	sp, #8
 8004746:	4770      	bx	lr
 8004748:	f44f 7302 	mov.w	r3, #520	; 0x208
 800474c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004750:	bf0c      	ite	eq
 8004752:	4623      	moveq	r3, r4
 8004754:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004758:	9304      	str	r3, [sp, #16]
 800475a:	9307      	str	r3, [sp, #28]
 800475c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004760:	9002      	str	r0, [sp, #8]
 8004762:	9006      	str	r0, [sp, #24]
 8004764:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004768:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800476a:	ab21      	add	r3, sp, #132	; 0x84
 800476c:	a902      	add	r1, sp, #8
 800476e:	4628      	mov	r0, r5
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	f000 f949 	bl	8004a08 <_svfiprintf_r>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	bfbc      	itt	lt
 800477a:	238b      	movlt	r3, #139	; 0x8b
 800477c:	602b      	strlt	r3, [r5, #0]
 800477e:	2c00      	cmp	r4, #0
 8004780:	d0dd      	beq.n	800473e <sniprintf+0x16>
 8004782:	2200      	movs	r2, #0
 8004784:	9b02      	ldr	r3, [sp, #8]
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e7d9      	b.n	800473e <sniprintf+0x16>
 800478a:	bf00      	nop
 800478c:	20000010 	.word	0x20000010

08004790 <siprintf>:
 8004790:	b40e      	push	{r1, r2, r3}
 8004792:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004796:	b500      	push	{lr}
 8004798:	b09c      	sub	sp, #112	; 0x70
 800479a:	ab1d      	add	r3, sp, #116	; 0x74
 800479c:	9002      	str	r0, [sp, #8]
 800479e:	9006      	str	r0, [sp, #24]
 80047a0:	9107      	str	r1, [sp, #28]
 80047a2:	9104      	str	r1, [sp, #16]
 80047a4:	4808      	ldr	r0, [pc, #32]	; (80047c8 <siprintf+0x38>)
 80047a6:	4909      	ldr	r1, [pc, #36]	; (80047cc <siprintf+0x3c>)
 80047a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ac:	9105      	str	r1, [sp, #20]
 80047ae:	6800      	ldr	r0, [r0, #0]
 80047b0:	a902      	add	r1, sp, #8
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	f000 f928 	bl	8004a08 <_svfiprintf_r>
 80047b8:	2200      	movs	r2, #0
 80047ba:	9b02      	ldr	r3, [sp, #8]
 80047bc:	701a      	strb	r2, [r3, #0]
 80047be:	b01c      	add	sp, #112	; 0x70
 80047c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80047c4:	b003      	add	sp, #12
 80047c6:	4770      	bx	lr
 80047c8:	20000010 	.word	0x20000010
 80047cc:	ffff0208 	.word	0xffff0208

080047d0 <strstr>:
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d2:	7803      	ldrb	r3, [r0, #0]
 80047d4:	b17b      	cbz	r3, 80047f6 <strstr+0x26>
 80047d6:	4604      	mov	r4, r0
 80047d8:	7823      	ldrb	r3, [r4, #0]
 80047da:	4620      	mov	r0, r4
 80047dc:	1c66      	adds	r6, r4, #1
 80047de:	b17b      	cbz	r3, 8004800 <strstr+0x30>
 80047e0:	1e4a      	subs	r2, r1, #1
 80047e2:	1e63      	subs	r3, r4, #1
 80047e4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80047e8:	b14d      	cbz	r5, 80047fe <strstr+0x2e>
 80047ea:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80047ee:	4634      	mov	r4, r6
 80047f0:	42af      	cmp	r7, r5
 80047f2:	d0f7      	beq.n	80047e4 <strstr+0x14>
 80047f4:	e7f0      	b.n	80047d8 <strstr+0x8>
 80047f6:	780b      	ldrb	r3, [r1, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf18      	it	ne
 80047fc:	2000      	movne	r0, #0
 80047fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004800:	4618      	mov	r0, r3
 8004802:	e7fc      	b.n	80047fe <strstr+0x2e>

08004804 <_strtol_l.isra.0>:
 8004804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	4680      	mov	r8, r0
 800480a:	4689      	mov	r9, r1
 800480c:	4692      	mov	sl, r2
 800480e:	461e      	mov	r6, r3
 8004810:	460f      	mov	r7, r1
 8004812:	463d      	mov	r5, r7
 8004814:	9808      	ldr	r0, [sp, #32]
 8004816:	f815 4b01 	ldrb.w	r4, [r5], #1
 800481a:	f000 f885 	bl	8004928 <__locale_ctype_ptr_l>
 800481e:	4420      	add	r0, r4
 8004820:	7843      	ldrb	r3, [r0, #1]
 8004822:	f013 0308 	ands.w	r3, r3, #8
 8004826:	d132      	bne.n	800488e <_strtol_l.isra.0+0x8a>
 8004828:	2c2d      	cmp	r4, #45	; 0x2d
 800482a:	d132      	bne.n	8004892 <_strtol_l.isra.0+0x8e>
 800482c:	2201      	movs	r2, #1
 800482e:	787c      	ldrb	r4, [r7, #1]
 8004830:	1cbd      	adds	r5, r7, #2
 8004832:	2e00      	cmp	r6, #0
 8004834:	d05d      	beq.n	80048f2 <_strtol_l.isra.0+0xee>
 8004836:	2e10      	cmp	r6, #16
 8004838:	d109      	bne.n	800484e <_strtol_l.isra.0+0x4a>
 800483a:	2c30      	cmp	r4, #48	; 0x30
 800483c:	d107      	bne.n	800484e <_strtol_l.isra.0+0x4a>
 800483e:	782b      	ldrb	r3, [r5, #0]
 8004840:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004844:	2b58      	cmp	r3, #88	; 0x58
 8004846:	d14f      	bne.n	80048e8 <_strtol_l.isra.0+0xe4>
 8004848:	2610      	movs	r6, #16
 800484a:	786c      	ldrb	r4, [r5, #1]
 800484c:	3502      	adds	r5, #2
 800484e:	2a00      	cmp	r2, #0
 8004850:	bf14      	ite	ne
 8004852:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004856:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800485a:	2700      	movs	r7, #0
 800485c:	fbb1 fcf6 	udiv	ip, r1, r6
 8004860:	4638      	mov	r0, r7
 8004862:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004866:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800486a:	2b09      	cmp	r3, #9
 800486c:	d817      	bhi.n	800489e <_strtol_l.isra.0+0x9a>
 800486e:	461c      	mov	r4, r3
 8004870:	42a6      	cmp	r6, r4
 8004872:	dd23      	ble.n	80048bc <_strtol_l.isra.0+0xb8>
 8004874:	1c7b      	adds	r3, r7, #1
 8004876:	d007      	beq.n	8004888 <_strtol_l.isra.0+0x84>
 8004878:	4584      	cmp	ip, r0
 800487a:	d31c      	bcc.n	80048b6 <_strtol_l.isra.0+0xb2>
 800487c:	d101      	bne.n	8004882 <_strtol_l.isra.0+0x7e>
 800487e:	45a6      	cmp	lr, r4
 8004880:	db19      	blt.n	80048b6 <_strtol_l.isra.0+0xb2>
 8004882:	2701      	movs	r7, #1
 8004884:	fb00 4006 	mla	r0, r0, r6, r4
 8004888:	f815 4b01 	ldrb.w	r4, [r5], #1
 800488c:	e7eb      	b.n	8004866 <_strtol_l.isra.0+0x62>
 800488e:	462f      	mov	r7, r5
 8004890:	e7bf      	b.n	8004812 <_strtol_l.isra.0+0xe>
 8004892:	2c2b      	cmp	r4, #43	; 0x2b
 8004894:	bf04      	itt	eq
 8004896:	1cbd      	addeq	r5, r7, #2
 8004898:	787c      	ldrbeq	r4, [r7, #1]
 800489a:	461a      	mov	r2, r3
 800489c:	e7c9      	b.n	8004832 <_strtol_l.isra.0+0x2e>
 800489e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80048a2:	2b19      	cmp	r3, #25
 80048a4:	d801      	bhi.n	80048aa <_strtol_l.isra.0+0xa6>
 80048a6:	3c37      	subs	r4, #55	; 0x37
 80048a8:	e7e2      	b.n	8004870 <_strtol_l.isra.0+0x6c>
 80048aa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80048ae:	2b19      	cmp	r3, #25
 80048b0:	d804      	bhi.n	80048bc <_strtol_l.isra.0+0xb8>
 80048b2:	3c57      	subs	r4, #87	; 0x57
 80048b4:	e7dc      	b.n	8004870 <_strtol_l.isra.0+0x6c>
 80048b6:	f04f 37ff 	mov.w	r7, #4294967295
 80048ba:	e7e5      	b.n	8004888 <_strtol_l.isra.0+0x84>
 80048bc:	1c7b      	adds	r3, r7, #1
 80048be:	d108      	bne.n	80048d2 <_strtol_l.isra.0+0xce>
 80048c0:	2322      	movs	r3, #34	; 0x22
 80048c2:	4608      	mov	r0, r1
 80048c4:	f8c8 3000 	str.w	r3, [r8]
 80048c8:	f1ba 0f00 	cmp.w	sl, #0
 80048cc:	d107      	bne.n	80048de <_strtol_l.isra.0+0xda>
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d2:	b102      	cbz	r2, 80048d6 <_strtol_l.isra.0+0xd2>
 80048d4:	4240      	negs	r0, r0
 80048d6:	f1ba 0f00 	cmp.w	sl, #0
 80048da:	d0f8      	beq.n	80048ce <_strtol_l.isra.0+0xca>
 80048dc:	b10f      	cbz	r7, 80048e2 <_strtol_l.isra.0+0xde>
 80048de:	f105 39ff 	add.w	r9, r5, #4294967295
 80048e2:	f8ca 9000 	str.w	r9, [sl]
 80048e6:	e7f2      	b.n	80048ce <_strtol_l.isra.0+0xca>
 80048e8:	2430      	movs	r4, #48	; 0x30
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	d1af      	bne.n	800484e <_strtol_l.isra.0+0x4a>
 80048ee:	2608      	movs	r6, #8
 80048f0:	e7ad      	b.n	800484e <_strtol_l.isra.0+0x4a>
 80048f2:	2c30      	cmp	r4, #48	; 0x30
 80048f4:	d0a3      	beq.n	800483e <_strtol_l.isra.0+0x3a>
 80048f6:	260a      	movs	r6, #10
 80048f8:	e7a9      	b.n	800484e <_strtol_l.isra.0+0x4a>
	...

080048fc <strtol>:
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <strtol+0x24>)
 80048fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004900:	681c      	ldr	r4, [r3, #0]
 8004902:	4d08      	ldr	r5, [pc, #32]	; (8004924 <strtol+0x28>)
 8004904:	6a23      	ldr	r3, [r4, #32]
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf08      	it	eq
 800490a:	462b      	moveq	r3, r5
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	4613      	mov	r3, r2
 8004910:	460a      	mov	r2, r1
 8004912:	4601      	mov	r1, r0
 8004914:	4620      	mov	r0, r4
 8004916:	f7ff ff75 	bl	8004804 <_strtol_l.isra.0>
 800491a:	b003      	add	sp, #12
 800491c:	bd30      	pop	{r4, r5, pc}
 800491e:	bf00      	nop
 8004920:	20000010 	.word	0x20000010
 8004924:	20000074 	.word	0x20000074

08004928 <__locale_ctype_ptr_l>:
 8004928:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800492c:	4770      	bx	lr

0800492e <__ascii_mbtowc>:
 800492e:	b082      	sub	sp, #8
 8004930:	b901      	cbnz	r1, 8004934 <__ascii_mbtowc+0x6>
 8004932:	a901      	add	r1, sp, #4
 8004934:	b142      	cbz	r2, 8004948 <__ascii_mbtowc+0x1a>
 8004936:	b14b      	cbz	r3, 800494c <__ascii_mbtowc+0x1e>
 8004938:	7813      	ldrb	r3, [r2, #0]
 800493a:	600b      	str	r3, [r1, #0]
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	1c10      	adds	r0, r2, #0
 8004940:	bf18      	it	ne
 8004942:	2001      	movne	r0, #1
 8004944:	b002      	add	sp, #8
 8004946:	4770      	bx	lr
 8004948:	4610      	mov	r0, r2
 800494a:	e7fb      	b.n	8004944 <__ascii_mbtowc+0x16>
 800494c:	f06f 0001 	mvn.w	r0, #1
 8004950:	e7f8      	b.n	8004944 <__ascii_mbtowc+0x16>

08004952 <__ssputs_r>:
 8004952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004956:	688e      	ldr	r6, [r1, #8]
 8004958:	4682      	mov	sl, r0
 800495a:	429e      	cmp	r6, r3
 800495c:	460c      	mov	r4, r1
 800495e:	4690      	mov	r8, r2
 8004960:	4699      	mov	r9, r3
 8004962:	d837      	bhi.n	80049d4 <__ssputs_r+0x82>
 8004964:	898a      	ldrh	r2, [r1, #12]
 8004966:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800496a:	d031      	beq.n	80049d0 <__ssputs_r+0x7e>
 800496c:	2302      	movs	r3, #2
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	6909      	ldr	r1, [r1, #16]
 8004972:	1a6f      	subs	r7, r5, r1
 8004974:	6965      	ldr	r5, [r4, #20]
 8004976:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800497a:	fb95 f5f3 	sdiv	r5, r5, r3
 800497e:	f109 0301 	add.w	r3, r9, #1
 8004982:	443b      	add	r3, r7
 8004984:	429d      	cmp	r5, r3
 8004986:	bf38      	it	cc
 8004988:	461d      	movcc	r5, r3
 800498a:	0553      	lsls	r3, r2, #21
 800498c:	d530      	bpl.n	80049f0 <__ssputs_r+0x9e>
 800498e:	4629      	mov	r1, r5
 8004990:	f000 fb3a 	bl	8005008 <_malloc_r>
 8004994:	4606      	mov	r6, r0
 8004996:	b950      	cbnz	r0, 80049ae <__ssputs_r+0x5c>
 8004998:	230c      	movs	r3, #12
 800499a:	f04f 30ff 	mov.w	r0, #4294967295
 800499e:	f8ca 3000 	str.w	r3, [sl]
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ae:	463a      	mov	r2, r7
 80049b0:	6921      	ldr	r1, [r4, #16]
 80049b2:	f7ff fea5 	bl	8004700 <memcpy>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	6126      	str	r6, [r4, #16]
 80049c4:	443e      	add	r6, r7
 80049c6:	6026      	str	r6, [r4, #0]
 80049c8:	464e      	mov	r6, r9
 80049ca:	6165      	str	r5, [r4, #20]
 80049cc:	1bed      	subs	r5, r5, r7
 80049ce:	60a5      	str	r5, [r4, #8]
 80049d0:	454e      	cmp	r6, r9
 80049d2:	d900      	bls.n	80049d6 <__ssputs_r+0x84>
 80049d4:	464e      	mov	r6, r9
 80049d6:	4632      	mov	r2, r6
 80049d8:	4641      	mov	r1, r8
 80049da:	6820      	ldr	r0, [r4, #0]
 80049dc:	f000 faaf 	bl	8004f3e <memmove>
 80049e0:	68a3      	ldr	r3, [r4, #8]
 80049e2:	2000      	movs	r0, #0
 80049e4:	1b9b      	subs	r3, r3, r6
 80049e6:	60a3      	str	r3, [r4, #8]
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	441e      	add	r6, r3
 80049ec:	6026      	str	r6, [r4, #0]
 80049ee:	e7dc      	b.n	80049aa <__ssputs_r+0x58>
 80049f0:	462a      	mov	r2, r5
 80049f2:	f000 fb63 	bl	80050bc <_realloc_r>
 80049f6:	4606      	mov	r6, r0
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d1e2      	bne.n	80049c2 <__ssputs_r+0x70>
 80049fc:	6921      	ldr	r1, [r4, #16]
 80049fe:	4650      	mov	r0, sl
 8004a00:	f000 fab6 	bl	8004f70 <_free_r>
 8004a04:	e7c8      	b.n	8004998 <__ssputs_r+0x46>
	...

08004a08 <_svfiprintf_r>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	461d      	mov	r5, r3
 8004a0e:	898b      	ldrh	r3, [r1, #12]
 8004a10:	b09d      	sub	sp, #116	; 0x74
 8004a12:	061f      	lsls	r7, r3, #24
 8004a14:	4680      	mov	r8, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	4616      	mov	r6, r2
 8004a1a:	d50f      	bpl.n	8004a3c <_svfiprintf_r+0x34>
 8004a1c:	690b      	ldr	r3, [r1, #16]
 8004a1e:	b96b      	cbnz	r3, 8004a3c <_svfiprintf_r+0x34>
 8004a20:	2140      	movs	r1, #64	; 0x40
 8004a22:	f000 faf1 	bl	8005008 <_malloc_r>
 8004a26:	6020      	str	r0, [r4, #0]
 8004a28:	6120      	str	r0, [r4, #16]
 8004a2a:	b928      	cbnz	r0, 8004a38 <_svfiprintf_r+0x30>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	f8c8 3000 	str.w	r3, [r8]
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	e0c8      	b.n	8004bca <_svfiprintf_r+0x1c2>
 8004a38:	2340      	movs	r3, #64	; 0x40
 8004a3a:	6163      	str	r3, [r4, #20]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a40:	2320      	movs	r3, #32
 8004a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a46:	2330      	movs	r3, #48	; 0x30
 8004a48:	f04f 0b01 	mov.w	fp, #1
 8004a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a50:	9503      	str	r5, [sp, #12]
 8004a52:	4637      	mov	r7, r6
 8004a54:	463d      	mov	r5, r7
 8004a56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a5a:	b10b      	cbz	r3, 8004a60 <_svfiprintf_r+0x58>
 8004a5c:	2b25      	cmp	r3, #37	; 0x25
 8004a5e:	d13e      	bne.n	8004ade <_svfiprintf_r+0xd6>
 8004a60:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a64:	d00b      	beq.n	8004a7e <_svfiprintf_r+0x76>
 8004a66:	4653      	mov	r3, sl
 8004a68:	4632      	mov	r2, r6
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	f7ff ff70 	bl	8004952 <__ssputs_r>
 8004a72:	3001      	adds	r0, #1
 8004a74:	f000 80a4 	beq.w	8004bc0 <_svfiprintf_r+0x1b8>
 8004a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7a:	4453      	add	r3, sl
 8004a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7e:	783b      	ldrb	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 809d 	beq.w	8004bc0 <_svfiprintf_r+0x1b8>
 8004a86:	2300      	movs	r3, #0
 8004a88:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	9307      	str	r3, [sp, #28]
 8004a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a98:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9a:	462f      	mov	r7, r5
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004aa2:	4850      	ldr	r0, [pc, #320]	; (8004be4 <_svfiprintf_r+0x1dc>)
 8004aa4:	f000 fa3d 	bl	8004f22 <memchr>
 8004aa8:	9b04      	ldr	r3, [sp, #16]
 8004aaa:	b9d0      	cbnz	r0, 8004ae2 <_svfiprintf_r+0xda>
 8004aac:	06d9      	lsls	r1, r3, #27
 8004aae:	bf44      	itt	mi
 8004ab0:	2220      	movmi	r2, #32
 8004ab2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ab6:	071a      	lsls	r2, r3, #28
 8004ab8:	bf44      	itt	mi
 8004aba:	222b      	movmi	r2, #43	; 0x2b
 8004abc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ac0:	782a      	ldrb	r2, [r5, #0]
 8004ac2:	2a2a      	cmp	r2, #42	; 0x2a
 8004ac4:	d015      	beq.n	8004af2 <_svfiprintf_r+0xea>
 8004ac6:	462f      	mov	r7, r5
 8004ac8:	2000      	movs	r0, #0
 8004aca:	250a      	movs	r5, #10
 8004acc:	9a07      	ldr	r2, [sp, #28]
 8004ace:	4639      	mov	r1, r7
 8004ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad4:	3b30      	subs	r3, #48	; 0x30
 8004ad6:	2b09      	cmp	r3, #9
 8004ad8:	d94d      	bls.n	8004b76 <_svfiprintf_r+0x16e>
 8004ada:	b1b8      	cbz	r0, 8004b0c <_svfiprintf_r+0x104>
 8004adc:	e00f      	b.n	8004afe <_svfiprintf_r+0xf6>
 8004ade:	462f      	mov	r7, r5
 8004ae0:	e7b8      	b.n	8004a54 <_svfiprintf_r+0x4c>
 8004ae2:	4a40      	ldr	r2, [pc, #256]	; (8004be4 <_svfiprintf_r+0x1dc>)
 8004ae4:	463d      	mov	r5, r7
 8004ae6:	1a80      	subs	r0, r0, r2
 8004ae8:	fa0b f000 	lsl.w	r0, fp, r0
 8004aec:	4318      	orrs	r0, r3
 8004aee:	9004      	str	r0, [sp, #16]
 8004af0:	e7d3      	b.n	8004a9a <_svfiprintf_r+0x92>
 8004af2:	9a03      	ldr	r2, [sp, #12]
 8004af4:	1d11      	adds	r1, r2, #4
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	9103      	str	r1, [sp, #12]
 8004afa:	2a00      	cmp	r2, #0
 8004afc:	db01      	blt.n	8004b02 <_svfiprintf_r+0xfa>
 8004afe:	9207      	str	r2, [sp, #28]
 8004b00:	e004      	b.n	8004b0c <_svfiprintf_r+0x104>
 8004b02:	4252      	negs	r2, r2
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	9207      	str	r2, [sp, #28]
 8004b0a:	9304      	str	r3, [sp, #16]
 8004b0c:	783b      	ldrb	r3, [r7, #0]
 8004b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b10:	d10c      	bne.n	8004b2c <_svfiprintf_r+0x124>
 8004b12:	787b      	ldrb	r3, [r7, #1]
 8004b14:	2b2a      	cmp	r3, #42	; 0x2a
 8004b16:	d133      	bne.n	8004b80 <_svfiprintf_r+0x178>
 8004b18:	9b03      	ldr	r3, [sp, #12]
 8004b1a:	3702      	adds	r7, #2
 8004b1c:	1d1a      	adds	r2, r3, #4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	9203      	str	r2, [sp, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bfb8      	it	lt
 8004b26:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b2a:	9305      	str	r3, [sp, #20]
 8004b2c:	4d2e      	ldr	r5, [pc, #184]	; (8004be8 <_svfiprintf_r+0x1e0>)
 8004b2e:	2203      	movs	r2, #3
 8004b30:	7839      	ldrb	r1, [r7, #0]
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 f9f5 	bl	8004f22 <memchr>
 8004b38:	b138      	cbz	r0, 8004b4a <_svfiprintf_r+0x142>
 8004b3a:	2340      	movs	r3, #64	; 0x40
 8004b3c:	1b40      	subs	r0, r0, r5
 8004b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b42:	9b04      	ldr	r3, [sp, #16]
 8004b44:	3701      	adds	r7, #1
 8004b46:	4303      	orrs	r3, r0
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	7839      	ldrb	r1, [r7, #0]
 8004b4c:	2206      	movs	r2, #6
 8004b4e:	4827      	ldr	r0, [pc, #156]	; (8004bec <_svfiprintf_r+0x1e4>)
 8004b50:	1c7e      	adds	r6, r7, #1
 8004b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b56:	f000 f9e4 	bl	8004f22 <memchr>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d038      	beq.n	8004bd0 <_svfiprintf_r+0x1c8>
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <_svfiprintf_r+0x1e8>)
 8004b60:	bb13      	cbnz	r3, 8004ba8 <_svfiprintf_r+0x1a0>
 8004b62:	9b03      	ldr	r3, [sp, #12]
 8004b64:	3307      	adds	r3, #7
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	3308      	adds	r3, #8
 8004b6c:	9303      	str	r3, [sp, #12]
 8004b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b70:	444b      	add	r3, r9
 8004b72:	9309      	str	r3, [sp, #36]	; 0x24
 8004b74:	e76d      	b.n	8004a52 <_svfiprintf_r+0x4a>
 8004b76:	fb05 3202 	mla	r2, r5, r2, r3
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	e7a6      	b.n	8004ace <_svfiprintf_r+0xc6>
 8004b80:	2300      	movs	r3, #0
 8004b82:	250a      	movs	r5, #10
 8004b84:	4619      	mov	r1, r3
 8004b86:	3701      	adds	r7, #1
 8004b88:	9305      	str	r3, [sp, #20]
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b90:	3a30      	subs	r2, #48	; 0x30
 8004b92:	2a09      	cmp	r2, #9
 8004b94:	d903      	bls.n	8004b9e <_svfiprintf_r+0x196>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0c8      	beq.n	8004b2c <_svfiprintf_r+0x124>
 8004b9a:	9105      	str	r1, [sp, #20]
 8004b9c:	e7c6      	b.n	8004b2c <_svfiprintf_r+0x124>
 8004b9e:	fb05 2101 	mla	r1, r5, r1, r2
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	e7f0      	b.n	8004b8a <_svfiprintf_r+0x182>
 8004ba8:	ab03      	add	r3, sp, #12
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	4622      	mov	r2, r4
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <_svfiprintf_r+0x1ec>)
 8004bb0:	a904      	add	r1, sp, #16
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	f3af 8000 	nop.w
 8004bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bbc:	4681      	mov	r9, r0
 8004bbe:	d1d6      	bne.n	8004b6e <_svfiprintf_r+0x166>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	065b      	lsls	r3, r3, #25
 8004bc4:	f53f af35 	bmi.w	8004a32 <_svfiprintf_r+0x2a>
 8004bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bca:	b01d      	add	sp, #116	; 0x74
 8004bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <_svfiprintf_r+0x1ec>)
 8004bd8:	a904      	add	r1, sp, #16
 8004bda:	4640      	mov	r0, r8
 8004bdc:	f000 f882 	bl	8004ce4 <_printf_i>
 8004be0:	e7ea      	b.n	8004bb8 <_svfiprintf_r+0x1b0>
 8004be2:	bf00      	nop
 8004be4:	0800535a 	.word	0x0800535a
 8004be8:	08005360 	.word	0x08005360
 8004bec:	08005364 	.word	0x08005364
 8004bf0:	00000000 	.word	0x00000000
 8004bf4:	08004953 	.word	0x08004953

08004bf8 <_printf_common>:
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	4691      	mov	r9, r2
 8004bfe:	461f      	mov	r7, r3
 8004c00:	688a      	ldr	r2, [r1, #8]
 8004c02:	690b      	ldr	r3, [r1, #16]
 8004c04:	4606      	mov	r6, r0
 8004c06:	4293      	cmp	r3, r2
 8004c08:	bfb8      	it	lt
 8004c0a:	4613      	movlt	r3, r2
 8004c0c:	f8c9 3000 	str.w	r3, [r9]
 8004c10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c14:	460c      	mov	r4, r1
 8004c16:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c1a:	b112      	cbz	r2, 8004c22 <_printf_common+0x2a>
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f8c9 3000 	str.w	r3, [r9]
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	0699      	lsls	r1, r3, #26
 8004c26:	bf42      	ittt	mi
 8004c28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c2c:	3302      	addmi	r3, #2
 8004c2e:	f8c9 3000 	strmi.w	r3, [r9]
 8004c32:	6825      	ldr	r5, [r4, #0]
 8004c34:	f015 0506 	ands.w	r5, r5, #6
 8004c38:	d107      	bne.n	8004c4a <_printf_common+0x52>
 8004c3a:	f104 0a19 	add.w	sl, r4, #25
 8004c3e:	68e3      	ldr	r3, [r4, #12]
 8004c40:	f8d9 2000 	ldr.w	r2, [r9]
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	42ab      	cmp	r3, r5
 8004c48:	dc29      	bgt.n	8004c9e <_printf_common+0xa6>
 8004c4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	3300      	adds	r3, #0
 8004c52:	bf18      	it	ne
 8004c54:	2301      	movne	r3, #1
 8004c56:	0692      	lsls	r2, r2, #26
 8004c58:	d42e      	bmi.n	8004cb8 <_printf_common+0xc0>
 8004c5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c5e:	4639      	mov	r1, r7
 8004c60:	4630      	mov	r0, r6
 8004c62:	47c0      	blx	r8
 8004c64:	3001      	adds	r0, #1
 8004c66:	d021      	beq.n	8004cac <_printf_common+0xb4>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	68e5      	ldr	r5, [r4, #12]
 8004c6c:	f003 0306 	and.w	r3, r3, #6
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	bf18      	it	ne
 8004c74:	2500      	movne	r5, #0
 8004c76:	f8d9 2000 	ldr.w	r2, [r9]
 8004c7a:	f04f 0900 	mov.w	r9, #0
 8004c7e:	bf08      	it	eq
 8004c80:	1aad      	subeq	r5, r5, r2
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	6922      	ldr	r2, [r4, #16]
 8004c86:	bf08      	it	eq
 8004c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	bfc4      	itt	gt
 8004c90:	1a9b      	subgt	r3, r3, r2
 8004c92:	18ed      	addgt	r5, r5, r3
 8004c94:	341a      	adds	r4, #26
 8004c96:	454d      	cmp	r5, r9
 8004c98:	d11a      	bne.n	8004cd0 <_printf_common+0xd8>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e008      	b.n	8004cb0 <_printf_common+0xb8>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4652      	mov	r2, sl
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	47c0      	blx	r8
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d103      	bne.n	8004cb4 <_printf_common+0xbc>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	e7c2      	b.n	8004c3e <_printf_common+0x46>
 8004cb8:	2030      	movs	r0, #48	; 0x30
 8004cba:	18e1      	adds	r1, r4, r3
 8004cbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cc6:	4422      	add	r2, r4
 8004cc8:	3302      	adds	r3, #2
 8004cca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cce:	e7c4      	b.n	8004c5a <_printf_common+0x62>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	47c0      	blx	r8
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d0e6      	beq.n	8004cac <_printf_common+0xb4>
 8004cde:	f109 0901 	add.w	r9, r9, #1
 8004ce2:	e7d8      	b.n	8004c96 <_printf_common+0x9e>

08004ce4 <_printf_i>:
 8004ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ce8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004cec:	460c      	mov	r4, r1
 8004cee:	7e09      	ldrb	r1, [r1, #24]
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	296e      	cmp	r1, #110	; 0x6e
 8004cf4:	4617      	mov	r7, r2
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	4698      	mov	r8, r3
 8004cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cfc:	f000 80b3 	beq.w	8004e66 <_printf_i+0x182>
 8004d00:	d822      	bhi.n	8004d48 <_printf_i+0x64>
 8004d02:	2963      	cmp	r1, #99	; 0x63
 8004d04:	d036      	beq.n	8004d74 <_printf_i+0x90>
 8004d06:	d80a      	bhi.n	8004d1e <_printf_i+0x3a>
 8004d08:	2900      	cmp	r1, #0
 8004d0a:	f000 80b9 	beq.w	8004e80 <_printf_i+0x19c>
 8004d0e:	2958      	cmp	r1, #88	; 0x58
 8004d10:	f000 8083 	beq.w	8004e1a <_printf_i+0x136>
 8004d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d1c:	e032      	b.n	8004d84 <_printf_i+0xa0>
 8004d1e:	2964      	cmp	r1, #100	; 0x64
 8004d20:	d001      	beq.n	8004d26 <_printf_i+0x42>
 8004d22:	2969      	cmp	r1, #105	; 0x69
 8004d24:	d1f6      	bne.n	8004d14 <_printf_i+0x30>
 8004d26:	6820      	ldr	r0, [r4, #0]
 8004d28:	6813      	ldr	r3, [r2, #0]
 8004d2a:	0605      	lsls	r5, r0, #24
 8004d2c:	f103 0104 	add.w	r1, r3, #4
 8004d30:	d52a      	bpl.n	8004d88 <_printf_i+0xa4>
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6011      	str	r1, [r2, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da03      	bge.n	8004d42 <_printf_i+0x5e>
 8004d3a:	222d      	movs	r2, #45	; 0x2d
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d42:	486f      	ldr	r0, [pc, #444]	; (8004f00 <_printf_i+0x21c>)
 8004d44:	220a      	movs	r2, #10
 8004d46:	e039      	b.n	8004dbc <_printf_i+0xd8>
 8004d48:	2973      	cmp	r1, #115	; 0x73
 8004d4a:	f000 809d 	beq.w	8004e88 <_printf_i+0x1a4>
 8004d4e:	d808      	bhi.n	8004d62 <_printf_i+0x7e>
 8004d50:	296f      	cmp	r1, #111	; 0x6f
 8004d52:	d020      	beq.n	8004d96 <_printf_i+0xb2>
 8004d54:	2970      	cmp	r1, #112	; 0x70
 8004d56:	d1dd      	bne.n	8004d14 <_printf_i+0x30>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	f043 0320 	orr.w	r3, r3, #32
 8004d5e:	6023      	str	r3, [r4, #0]
 8004d60:	e003      	b.n	8004d6a <_printf_i+0x86>
 8004d62:	2975      	cmp	r1, #117	; 0x75
 8004d64:	d017      	beq.n	8004d96 <_printf_i+0xb2>
 8004d66:	2978      	cmp	r1, #120	; 0x78
 8004d68:	d1d4      	bne.n	8004d14 <_printf_i+0x30>
 8004d6a:	2378      	movs	r3, #120	; 0x78
 8004d6c:	4865      	ldr	r0, [pc, #404]	; (8004f04 <_printf_i+0x220>)
 8004d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d72:	e055      	b.n	8004e20 <_printf_i+0x13c>
 8004d74:	6813      	ldr	r3, [r2, #0]
 8004d76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d7a:	1d19      	adds	r1, r3, #4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6011      	str	r1, [r2, #0]
 8004d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d84:	2301      	movs	r3, #1
 8004d86:	e08c      	b.n	8004ea2 <_printf_i+0x1be>
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d8e:	6011      	str	r1, [r2, #0]
 8004d90:	bf18      	it	ne
 8004d92:	b21b      	sxthne	r3, r3
 8004d94:	e7cf      	b.n	8004d36 <_printf_i+0x52>
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	6825      	ldr	r5, [r4, #0]
 8004d9a:	1d18      	adds	r0, r3, #4
 8004d9c:	6010      	str	r0, [r2, #0]
 8004d9e:	0628      	lsls	r0, r5, #24
 8004da0:	d501      	bpl.n	8004da6 <_printf_i+0xc2>
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	e002      	b.n	8004dac <_printf_i+0xc8>
 8004da6:	0668      	lsls	r0, r5, #25
 8004da8:	d5fb      	bpl.n	8004da2 <_printf_i+0xbe>
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	296f      	cmp	r1, #111	; 0x6f
 8004dae:	bf14      	ite	ne
 8004db0:	220a      	movne	r2, #10
 8004db2:	2208      	moveq	r2, #8
 8004db4:	4852      	ldr	r0, [pc, #328]	; (8004f00 <_printf_i+0x21c>)
 8004db6:	2100      	movs	r1, #0
 8004db8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dbc:	6865      	ldr	r5, [r4, #4]
 8004dbe:	2d00      	cmp	r5, #0
 8004dc0:	60a5      	str	r5, [r4, #8]
 8004dc2:	f2c0 8095 	blt.w	8004ef0 <_printf_i+0x20c>
 8004dc6:	6821      	ldr	r1, [r4, #0]
 8004dc8:	f021 0104 	bic.w	r1, r1, #4
 8004dcc:	6021      	str	r1, [r4, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d13d      	bne.n	8004e4e <_printf_i+0x16a>
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	f040 808e 	bne.w	8004ef4 <_printf_i+0x210>
 8004dd8:	4665      	mov	r5, ip
 8004dda:	2a08      	cmp	r2, #8
 8004ddc:	d10b      	bne.n	8004df6 <_printf_i+0x112>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	07db      	lsls	r3, r3, #31
 8004de2:	d508      	bpl.n	8004df6 <_printf_i+0x112>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	6862      	ldr	r2, [r4, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	bfde      	ittt	le
 8004dec:	2330      	movle	r3, #48	; 0x30
 8004dee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004df6:	ebac 0305 	sub.w	r3, ip, r5
 8004dfa:	6123      	str	r3, [r4, #16]
 8004dfc:	f8cd 8000 	str.w	r8, [sp]
 8004e00:	463b      	mov	r3, r7
 8004e02:	aa03      	add	r2, sp, #12
 8004e04:	4621      	mov	r1, r4
 8004e06:	4630      	mov	r0, r6
 8004e08:	f7ff fef6 	bl	8004bf8 <_printf_common>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d14d      	bne.n	8004eac <_printf_i+0x1c8>
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	b005      	add	sp, #20
 8004e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e1a:	4839      	ldr	r0, [pc, #228]	; (8004f00 <_printf_i+0x21c>)
 8004e1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e20:	6813      	ldr	r3, [r2, #0]
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	1d1d      	adds	r5, r3, #4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6015      	str	r5, [r2, #0]
 8004e2a:	060a      	lsls	r2, r1, #24
 8004e2c:	d50b      	bpl.n	8004e46 <_printf_i+0x162>
 8004e2e:	07ca      	lsls	r2, r1, #31
 8004e30:	bf44      	itt	mi
 8004e32:	f041 0120 	orrmi.w	r1, r1, #32
 8004e36:	6021      	strmi	r1, [r4, #0]
 8004e38:	b91b      	cbnz	r3, 8004e42 <_printf_i+0x15e>
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	f022 0220 	bic.w	r2, r2, #32
 8004e40:	6022      	str	r2, [r4, #0]
 8004e42:	2210      	movs	r2, #16
 8004e44:	e7b7      	b.n	8004db6 <_printf_i+0xd2>
 8004e46:	064d      	lsls	r5, r1, #25
 8004e48:	bf48      	it	mi
 8004e4a:	b29b      	uxthmi	r3, r3
 8004e4c:	e7ef      	b.n	8004e2e <_printf_i+0x14a>
 8004e4e:	4665      	mov	r5, ip
 8004e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e54:	fb02 3311 	mls	r3, r2, r1, r3
 8004e58:	5cc3      	ldrb	r3, [r0, r3]
 8004e5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e5e:	460b      	mov	r3, r1
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d1f5      	bne.n	8004e50 <_printf_i+0x16c>
 8004e64:	e7b9      	b.n	8004dda <_printf_i+0xf6>
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	1d18      	adds	r0, r3, #4
 8004e6c:	6961      	ldr	r1, [r4, #20]
 8004e6e:	6010      	str	r0, [r2, #0]
 8004e70:	0628      	lsls	r0, r5, #24
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	d501      	bpl.n	8004e7a <_printf_i+0x196>
 8004e76:	6019      	str	r1, [r3, #0]
 8004e78:	e002      	b.n	8004e80 <_printf_i+0x19c>
 8004e7a:	066a      	lsls	r2, r5, #25
 8004e7c:	d5fb      	bpl.n	8004e76 <_printf_i+0x192>
 8004e7e:	8019      	strh	r1, [r3, #0]
 8004e80:	2300      	movs	r3, #0
 8004e82:	4665      	mov	r5, ip
 8004e84:	6123      	str	r3, [r4, #16]
 8004e86:	e7b9      	b.n	8004dfc <_printf_i+0x118>
 8004e88:	6813      	ldr	r3, [r2, #0]
 8004e8a:	1d19      	adds	r1, r3, #4
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	681d      	ldr	r5, [r3, #0]
 8004e90:	6862      	ldr	r2, [r4, #4]
 8004e92:	2100      	movs	r1, #0
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 f844 	bl	8004f22 <memchr>
 8004e9a:	b108      	cbz	r0, 8004ea0 <_printf_i+0x1bc>
 8004e9c:	1b40      	subs	r0, r0, r5
 8004e9e:	6060      	str	r0, [r4, #4]
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eaa:	e7a7      	b.n	8004dfc <_printf_i+0x118>
 8004eac:	6923      	ldr	r3, [r4, #16]
 8004eae:	462a      	mov	r2, r5
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	47c0      	blx	r8
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d0aa      	beq.n	8004e10 <_printf_i+0x12c>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	079b      	lsls	r3, r3, #30
 8004ebe:	d413      	bmi.n	8004ee8 <_printf_i+0x204>
 8004ec0:	68e0      	ldr	r0, [r4, #12]
 8004ec2:	9b03      	ldr	r3, [sp, #12]
 8004ec4:	4298      	cmp	r0, r3
 8004ec6:	bfb8      	it	lt
 8004ec8:	4618      	movlt	r0, r3
 8004eca:	e7a3      	b.n	8004e14 <_printf_i+0x130>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	464a      	mov	r2, r9
 8004ed0:	4639      	mov	r1, r7
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	47c0      	blx	r8
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d09a      	beq.n	8004e10 <_printf_i+0x12c>
 8004eda:	3501      	adds	r5, #1
 8004edc:	68e3      	ldr	r3, [r4, #12]
 8004ede:	9a03      	ldr	r2, [sp, #12]
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	42ab      	cmp	r3, r5
 8004ee4:	dcf2      	bgt.n	8004ecc <_printf_i+0x1e8>
 8004ee6:	e7eb      	b.n	8004ec0 <_printf_i+0x1dc>
 8004ee8:	2500      	movs	r5, #0
 8004eea:	f104 0919 	add.w	r9, r4, #25
 8004eee:	e7f5      	b.n	8004edc <_printf_i+0x1f8>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ac      	bne.n	8004e4e <_printf_i+0x16a>
 8004ef4:	7803      	ldrb	r3, [r0, #0]
 8004ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004efa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004efe:	e76c      	b.n	8004dda <_printf_i+0xf6>
 8004f00:	0800536b 	.word	0x0800536b
 8004f04:	0800537c 	.word	0x0800537c

08004f08 <__ascii_wctomb>:
 8004f08:	b149      	cbz	r1, 8004f1e <__ascii_wctomb+0x16>
 8004f0a:	2aff      	cmp	r2, #255	; 0xff
 8004f0c:	bf8b      	itete	hi
 8004f0e:	238a      	movhi	r3, #138	; 0x8a
 8004f10:	700a      	strbls	r2, [r1, #0]
 8004f12:	6003      	strhi	r3, [r0, #0]
 8004f14:	2001      	movls	r0, #1
 8004f16:	bf88      	it	hi
 8004f18:	f04f 30ff 	movhi.w	r0, #4294967295
 8004f1c:	4770      	bx	lr
 8004f1e:	4608      	mov	r0, r1
 8004f20:	4770      	bx	lr

08004f22 <memchr>:
 8004f22:	b510      	push	{r4, lr}
 8004f24:	b2c9      	uxtb	r1, r1
 8004f26:	4402      	add	r2, r0
 8004f28:	4290      	cmp	r0, r2
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	d101      	bne.n	8004f32 <memchr+0x10>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e003      	b.n	8004f3a <memchr+0x18>
 8004f32:	781c      	ldrb	r4, [r3, #0]
 8004f34:	3001      	adds	r0, #1
 8004f36:	428c      	cmp	r4, r1
 8004f38:	d1f6      	bne.n	8004f28 <memchr+0x6>
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	bd10      	pop	{r4, pc}

08004f3e <memmove>:
 8004f3e:	4288      	cmp	r0, r1
 8004f40:	b510      	push	{r4, lr}
 8004f42:	eb01 0302 	add.w	r3, r1, r2
 8004f46:	d807      	bhi.n	8004f58 <memmove+0x1a>
 8004f48:	1e42      	subs	r2, r0, #1
 8004f4a:	4299      	cmp	r1, r3
 8004f4c:	d00a      	beq.n	8004f64 <memmove+0x26>
 8004f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f56:	e7f8      	b.n	8004f4a <memmove+0xc>
 8004f58:	4283      	cmp	r3, r0
 8004f5a:	d9f5      	bls.n	8004f48 <memmove+0xa>
 8004f5c:	1881      	adds	r1, r0, r2
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	42d3      	cmn	r3, r2
 8004f62:	d100      	bne.n	8004f66 <memmove+0x28>
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f6e:	e7f7      	b.n	8004f60 <memmove+0x22>

08004f70 <_free_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4605      	mov	r5, r0
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d043      	beq.n	8005000 <_free_r+0x90>
 8004f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7c:	1f0c      	subs	r4, r1, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfb8      	it	lt
 8004f82:	18e4      	addlt	r4, r4, r3
 8004f84:	f000 f8d0 	bl	8005128 <__malloc_lock>
 8004f88:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <_free_r+0x94>)
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	b933      	cbnz	r3, 8004f9e <_free_r+0x2e>
 8004f90:	6063      	str	r3, [r4, #4]
 8004f92:	6014      	str	r4, [r2, #0]
 8004f94:	4628      	mov	r0, r5
 8004f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f9a:	f000 b8c6 	b.w	800512a <__malloc_unlock>
 8004f9e:	42a3      	cmp	r3, r4
 8004fa0:	d90b      	bls.n	8004fba <_free_r+0x4a>
 8004fa2:	6821      	ldr	r1, [r4, #0]
 8004fa4:	1862      	adds	r2, r4, r1
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	bf01      	itttt	eq
 8004faa:	681a      	ldreq	r2, [r3, #0]
 8004fac:	685b      	ldreq	r3, [r3, #4]
 8004fae:	1852      	addeq	r2, r2, r1
 8004fb0:	6022      	streq	r2, [r4, #0]
 8004fb2:	6063      	str	r3, [r4, #4]
 8004fb4:	6004      	str	r4, [r0, #0]
 8004fb6:	e7ed      	b.n	8004f94 <_free_r+0x24>
 8004fb8:	4613      	mov	r3, r2
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	b10a      	cbz	r2, 8004fc2 <_free_r+0x52>
 8004fbe:	42a2      	cmp	r2, r4
 8004fc0:	d9fa      	bls.n	8004fb8 <_free_r+0x48>
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	1858      	adds	r0, r3, r1
 8004fc6:	42a0      	cmp	r0, r4
 8004fc8:	d10b      	bne.n	8004fe2 <_free_r+0x72>
 8004fca:	6820      	ldr	r0, [r4, #0]
 8004fcc:	4401      	add	r1, r0
 8004fce:	1858      	adds	r0, r3, r1
 8004fd0:	4282      	cmp	r2, r0
 8004fd2:	6019      	str	r1, [r3, #0]
 8004fd4:	d1de      	bne.n	8004f94 <_free_r+0x24>
 8004fd6:	6810      	ldr	r0, [r2, #0]
 8004fd8:	6852      	ldr	r2, [r2, #4]
 8004fda:	4401      	add	r1, r0
 8004fdc:	6019      	str	r1, [r3, #0]
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	e7d8      	b.n	8004f94 <_free_r+0x24>
 8004fe2:	d902      	bls.n	8004fea <_free_r+0x7a>
 8004fe4:	230c      	movs	r3, #12
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	e7d4      	b.n	8004f94 <_free_r+0x24>
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	1821      	adds	r1, r4, r0
 8004fee:	428a      	cmp	r2, r1
 8004ff0:	bf01      	itttt	eq
 8004ff2:	6811      	ldreq	r1, [r2, #0]
 8004ff4:	6852      	ldreq	r2, [r2, #4]
 8004ff6:	1809      	addeq	r1, r1, r0
 8004ff8:	6021      	streq	r1, [r4, #0]
 8004ffa:	6062      	str	r2, [r4, #4]
 8004ffc:	605c      	str	r4, [r3, #4]
 8004ffe:	e7c9      	b.n	8004f94 <_free_r+0x24>
 8005000:	bd38      	pop	{r3, r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	20001d18 	.word	0x20001d18

08005008 <_malloc_r>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	1ccd      	adds	r5, r1, #3
 800500c:	f025 0503 	bic.w	r5, r5, #3
 8005010:	3508      	adds	r5, #8
 8005012:	2d0c      	cmp	r5, #12
 8005014:	bf38      	it	cc
 8005016:	250c      	movcc	r5, #12
 8005018:	2d00      	cmp	r5, #0
 800501a:	4606      	mov	r6, r0
 800501c:	db01      	blt.n	8005022 <_malloc_r+0x1a>
 800501e:	42a9      	cmp	r1, r5
 8005020:	d903      	bls.n	800502a <_malloc_r+0x22>
 8005022:	230c      	movs	r3, #12
 8005024:	6033      	str	r3, [r6, #0]
 8005026:	2000      	movs	r0, #0
 8005028:	bd70      	pop	{r4, r5, r6, pc}
 800502a:	f000 f87d 	bl	8005128 <__malloc_lock>
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <_malloc_r+0xac>)
 8005030:	6814      	ldr	r4, [r2, #0]
 8005032:	4621      	mov	r1, r4
 8005034:	b991      	cbnz	r1, 800505c <_malloc_r+0x54>
 8005036:	4c20      	ldr	r4, [pc, #128]	; (80050b8 <_malloc_r+0xb0>)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	b91b      	cbnz	r3, 8005044 <_malloc_r+0x3c>
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f863 	bl	8005108 <_sbrk_r>
 8005042:	6020      	str	r0, [r4, #0]
 8005044:	4629      	mov	r1, r5
 8005046:	4630      	mov	r0, r6
 8005048:	f000 f85e 	bl	8005108 <_sbrk_r>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d124      	bne.n	800509a <_malloc_r+0x92>
 8005050:	230c      	movs	r3, #12
 8005052:	4630      	mov	r0, r6
 8005054:	6033      	str	r3, [r6, #0]
 8005056:	f000 f868 	bl	800512a <__malloc_unlock>
 800505a:	e7e4      	b.n	8005026 <_malloc_r+0x1e>
 800505c:	680b      	ldr	r3, [r1, #0]
 800505e:	1b5b      	subs	r3, r3, r5
 8005060:	d418      	bmi.n	8005094 <_malloc_r+0x8c>
 8005062:	2b0b      	cmp	r3, #11
 8005064:	d90f      	bls.n	8005086 <_malloc_r+0x7e>
 8005066:	600b      	str	r3, [r1, #0]
 8005068:	18cc      	adds	r4, r1, r3
 800506a:	50cd      	str	r5, [r1, r3]
 800506c:	4630      	mov	r0, r6
 800506e:	f000 f85c 	bl	800512a <__malloc_unlock>
 8005072:	f104 000b 	add.w	r0, r4, #11
 8005076:	1d23      	adds	r3, r4, #4
 8005078:	f020 0007 	bic.w	r0, r0, #7
 800507c:	1ac3      	subs	r3, r0, r3
 800507e:	d0d3      	beq.n	8005028 <_malloc_r+0x20>
 8005080:	425a      	negs	r2, r3
 8005082:	50e2      	str	r2, [r4, r3]
 8005084:	e7d0      	b.n	8005028 <_malloc_r+0x20>
 8005086:	684b      	ldr	r3, [r1, #4]
 8005088:	428c      	cmp	r4, r1
 800508a:	bf16      	itet	ne
 800508c:	6063      	strne	r3, [r4, #4]
 800508e:	6013      	streq	r3, [r2, #0]
 8005090:	460c      	movne	r4, r1
 8005092:	e7eb      	b.n	800506c <_malloc_r+0x64>
 8005094:	460c      	mov	r4, r1
 8005096:	6849      	ldr	r1, [r1, #4]
 8005098:	e7cc      	b.n	8005034 <_malloc_r+0x2c>
 800509a:	1cc4      	adds	r4, r0, #3
 800509c:	f024 0403 	bic.w	r4, r4, #3
 80050a0:	42a0      	cmp	r0, r4
 80050a2:	d005      	beq.n	80050b0 <_malloc_r+0xa8>
 80050a4:	1a21      	subs	r1, r4, r0
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 f82e 	bl	8005108 <_sbrk_r>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0cf      	beq.n	8005050 <_malloc_r+0x48>
 80050b0:	6025      	str	r5, [r4, #0]
 80050b2:	e7db      	b.n	800506c <_malloc_r+0x64>
 80050b4:	20001d18 	.word	0x20001d18
 80050b8:	20001d1c 	.word	0x20001d1c

080050bc <_realloc_r>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	4607      	mov	r7, r0
 80050c0:	4614      	mov	r4, r2
 80050c2:	460e      	mov	r6, r1
 80050c4:	b921      	cbnz	r1, 80050d0 <_realloc_r+0x14>
 80050c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050ca:	4611      	mov	r1, r2
 80050cc:	f7ff bf9c 	b.w	8005008 <_malloc_r>
 80050d0:	b922      	cbnz	r2, 80050dc <_realloc_r+0x20>
 80050d2:	f7ff ff4d 	bl	8004f70 <_free_r>
 80050d6:	4625      	mov	r5, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050dc:	f000 f826 	bl	800512c <_malloc_usable_size_r>
 80050e0:	42a0      	cmp	r0, r4
 80050e2:	d20f      	bcs.n	8005104 <_realloc_r+0x48>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4638      	mov	r0, r7
 80050e8:	f7ff ff8e 	bl	8005008 <_malloc_r>
 80050ec:	4605      	mov	r5, r0
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0f2      	beq.n	80050d8 <_realloc_r+0x1c>
 80050f2:	4631      	mov	r1, r6
 80050f4:	4622      	mov	r2, r4
 80050f6:	f7ff fb03 	bl	8004700 <memcpy>
 80050fa:	4631      	mov	r1, r6
 80050fc:	4638      	mov	r0, r7
 80050fe:	f7ff ff37 	bl	8004f70 <_free_r>
 8005102:	e7e9      	b.n	80050d8 <_realloc_r+0x1c>
 8005104:	4635      	mov	r5, r6
 8005106:	e7e7      	b.n	80050d8 <_realloc_r+0x1c>

08005108 <_sbrk_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	2300      	movs	r3, #0
 800510c:	4c05      	ldr	r4, [pc, #20]	; (8005124 <_sbrk_r+0x1c>)
 800510e:	4605      	mov	r5, r0
 8005110:	4608      	mov	r0, r1
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	f7fc f9ae 	bl	8001474 <_sbrk>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_sbrk_r+0x1a>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	b103      	cbz	r3, 8005122 <_sbrk_r+0x1a>
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	20001e6c 	.word	0x20001e6c

08005128 <__malloc_lock>:
 8005128:	4770      	bx	lr

0800512a <__malloc_unlock>:
 800512a:	4770      	bx	lr

0800512c <_malloc_usable_size_r>:
 800512c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005130:	1f18      	subs	r0, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	bfbc      	itt	lt
 8005136:	580b      	ldrlt	r3, [r1, r0]
 8005138:	18c0      	addlt	r0, r0, r3
 800513a:	4770      	bx	lr

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
