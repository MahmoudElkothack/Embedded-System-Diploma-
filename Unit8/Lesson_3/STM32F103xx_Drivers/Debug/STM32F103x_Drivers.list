
STM32F103x_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dd4  08000ddc  00010ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dd4  08000dd4  00010ddc  2**0
                  CONTENTS
  4 .ARM          00000000  08000dd4  08000dd4  00010ddc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dd4  08000ddc  00010ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dd4  08000dd4  00010dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dd8  08000dd8  00010dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000ddc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000ddc  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ddc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fb8  00000000  00000000  00010e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000098c  00000000  00000000  00014dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a20  00000000  00000000  00015749  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00016170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00016330  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000252d  00000000  00000000  00016498  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002019  00000000  00000000  000189c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009f43  00000000  00000000  0001a9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024921  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000560  00000000  00000000  0002499c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dbc 	.word	0x08000dbc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000dbc 	.word	0x08000dbc

08000170 <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_DISABLE() ;
	NVIC_IRQ40_EXTI10_15_DISABLE() ;
}

// ----------------------------------------- ISR Functions -----------------------------------------
void EXTI0_IRQHandler (void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 0) ;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]() ;
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000028 	.word	0x20000028

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void) {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 1) ;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]() ;
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000028 	.word	0x20000028

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 2) ;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]() ;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000028 	.word	0x20000028

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 3) ;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]() ;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000028 	.word	0x20000028

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 4) ;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]() ;
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000028 	.word	0x20000028

08000224 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 5) ;
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[5]() ;
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 6)) {
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 6) ;
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[6]() ;
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 7)) {
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 7) ;
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[7]() ;
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 8)) {
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 8) ;
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[8]() ;
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 9)) {
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 9) ;
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[9]() ;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
	}
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000028 	.word	0x20000028

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 80002d0:	4b26      	ldr	r3, [pc, #152]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 10) ;
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a22      	ldr	r2, [pc, #136]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[10]() ;
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 11)) {
 80002ee:	4b1f      	ldr	r3, [pc, #124]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 11) ;
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a1b      	ldr	r2, [pc, #108]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[11]() ;
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 12)) {
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 12) ;
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a13      	ldr	r2, [pc, #76]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[12]() ;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 13)) {
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 13) ;
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a0c      	ldr	r2, [pc, #48]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[13]() ;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 14)) {
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 14) ;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[14]() ;
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	}
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010400 	.word	0x40010400
 8000370:	20000028 	.word	0x20000028

08000374 <GPIO_CRLH_GetPosition>:
 *
 *      Author: Mahmoud Elkot
 */
#include "GPIO.h"

static GPIO_CRLH_GetPosition (uint16_t PinNumber) {
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b80      	cmp	r3, #128	; 0x80
 8000382:	d042      	beq.n	800040a <GPIO_CRLH_GetPosition+0x96>
 8000384:	2b80      	cmp	r3, #128	; 0x80
 8000386:	dc11      	bgt.n	80003ac <GPIO_CRLH_GetPosition+0x38>
 8000388:	2b08      	cmp	r3, #8
 800038a:	d036      	beq.n	80003fa <GPIO_CRLH_GetPosition+0x86>
 800038c:	2b08      	cmp	r3, #8
 800038e:	dc06      	bgt.n	800039e <GPIO_CRLH_GetPosition+0x2a>
 8000390:	2b02      	cmp	r3, #2
 8000392:	d02e      	beq.n	80003f2 <GPIO_CRLH_GetPosition+0x7e>
 8000394:	2b04      	cmp	r3, #4
 8000396:	d02e      	beq.n	80003f6 <GPIO_CRLH_GetPosition+0x82>
 8000398:	2b01      	cmp	r3, #1
 800039a:	d028      	beq.n	80003ee <GPIO_CRLH_GetPosition+0x7a>
 800039c:	e047      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
 800039e:	2b20      	cmp	r3, #32
 80003a0:	d02f      	beq.n	8000402 <GPIO_CRLH_GetPosition+0x8e>
 80003a2:	2b40      	cmp	r3, #64	; 0x40
 80003a4:	d02f      	beq.n	8000406 <GPIO_CRLH_GetPosition+0x92>
 80003a6:	2b10      	cmp	r3, #16
 80003a8:	d029      	beq.n	80003fe <GPIO_CRLH_GetPosition+0x8a>
 80003aa:	e040      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
 80003ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b0:	d033      	beq.n	800041a <GPIO_CRLH_GetPosition+0xa6>
 80003b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b6:	dc09      	bgt.n	80003cc <GPIO_CRLH_GetPosition+0x58>
 80003b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003bc:	d029      	beq.n	8000412 <GPIO_CRLH_GetPosition+0x9e>
 80003be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003c2:	d028      	beq.n	8000416 <GPIO_CRLH_GetPosition+0xa2>
 80003c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c8:	d021      	beq.n	800040e <GPIO_CRLH_GetPosition+0x9a>
 80003ca:	e030      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
 80003cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d0:	d027      	beq.n	8000422 <GPIO_CRLH_GetPosition+0xae>
 80003d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d6:	dc03      	bgt.n	80003e0 <GPIO_CRLH_GetPosition+0x6c>
 80003d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003dc:	d01f      	beq.n	800041e <GPIO_CRLH_GetPosition+0xaa>
 80003de:	e026      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
 80003e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003e4:	d01f      	beq.n	8000426 <GPIO_CRLH_GetPosition+0xb2>
 80003e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003ea:	d01e      	beq.n	800042a <GPIO_CRLH_GetPosition+0xb6>
 80003ec:	e01f      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
	case GPIO_PIN_0 :
		return 0 ;
 80003ee:	2300      	movs	r3, #0
 80003f0:	e01d      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 80003f2:	2304      	movs	r3, #4
 80003f4:	e01b      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 80003f6:	2308      	movs	r3, #8
 80003f8:	e019      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 80003fa:	230c      	movs	r3, #12
 80003fc:	e017      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 80003fe:	2310      	movs	r3, #16
 8000400:	e015      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 8000402:	2314      	movs	r3, #20
 8000404:	e013      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 8000406:	2318      	movs	r3, #24
 8000408:	e011      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 800040a:	231c      	movs	r3, #28
 800040c:	e00f      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 800040e:	2300      	movs	r3, #0
 8000410:	e00d      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 8000412:	2304      	movs	r3, #4
 8000414:	e00b      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 8000416:	2308      	movs	r3, #8
 8000418:	e009      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 800041a:	230c      	movs	r3, #12
 800041c:	e007      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 800041e:	2310      	movs	r3, #16
 8000420:	e005      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 8000422:	2314      	movs	r3, #20
 8000424:	e003      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 8000426:	2318      	movs	r3, #24
 8000428:	e001      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 800042a:	231c      	movs	r3, #28
 800042c:	e7ff      	b.n	800042e <GPIO_CRLH_GetPosition+0xba>
		break ;
	}
}
 800042e:	4618      	mov	r0, r3
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <MCAL_GPIO_Init>:
 * 		@return value		-	none
 * 		Note			-	STM32F103C6 has GPIO A,B,C,D,E,F,G Modules
 * 						But LQFP48 Package has only GPIO A , B , part of C , part of D
 *
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig) {
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]

	uint8_t Pin_Config_Value = 0 ;
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]

	// Port Configuration register Low (GPIOx_CRL) configure PINS from 0 to 7
	// Port Configuration register High (GPIOx_CRH) configure PINS from 8 to 15
	volatile uint32_t* ConfigReg = NULL ;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
	ConfigReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ) ? (&GPIOx->CRL) : (&GPIOx->CRH) ;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	2bff      	cmp	r3, #255	; 0xff
 8000450:	d801      	bhi.n	8000456 <MCAL_GPIO_Init+0x1e>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	e001      	b.n	800045a <MCAL_GPIO_Init+0x22>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	3304      	adds	r3, #4
 800045a:	60bb      	str	r3, [r7, #8]

	// clear CNF and MODE
	(*ConfigReg) &= ~ (0xF << GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ;
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff87 	bl	8000374 <GPIO_CRLH_GetPosition>
 8000466:	4602      	mov	r2, r0
 8000468:	230f      	movs	r3, #15
 800046a:	4093      	lsls	r3, r2
 800046c:	43da      	mvns	r2, r3
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	401a      	ands	r2, r3
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	601a      	str	r2, [r3, #0]

	// if pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_AF_OPEN_DRAIN) || (PinConfig->GPIO_MODE == GPIO_MODE_AF_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPEN_DRAIN) ) {
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	789b      	ldrb	r3, [r3, #2]
 800047c:	2b07      	cmp	r3, #7
 800047e:	d00b      	beq.n	8000498 <MCAL_GPIO_Init+0x60>
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	789b      	ldrb	r3, [r3, #2]
 8000484:	2b06      	cmp	r3, #6
 8000486:	d007      	beq.n	8000498 <MCAL_GPIO_Init+0x60>
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	789b      	ldrb	r3, [r3, #2]
 800048c:	2b04      	cmp	r3, #4
 800048e:	d003      	beq.n	8000498 <MCAL_GPIO_Init+0x60>
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	789b      	ldrb	r3, [r3, #2]
 8000494:	2b05      	cmp	r3, #5
 8000496:	d11c      	bne.n	80004d2 <MCAL_GPIO_Init+0x9a>
		// Set CNF and MODE
		Pin_Config_Value = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ) ;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	3b04      	subs	r3, #4
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	b25a      	sxtb	r2, r3
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	78db      	ldrb	r3, [r3, #3]
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b25b      	sxtb	r3, r3
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	f003 030f 	and.w	r3, r3, #15
 80004b2:	73fb      	strb	r3, [r7, #15]
		(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 80004b4:	7bfc      	ldrb	r4, [r7, #15]
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff5a 	bl	8000374 <GPIO_CRLH_GetPosition>
 80004c0:	4603      	mov	r3, r0
 80004c2:	fa04 f203 	lsl.w	r2, r4, r3
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	431a      	orrs	r2, r3
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	e05c      	b.n	800058c <MCAL_GPIO_Init+0x154>
	}
	// if pin is input
	else {
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)) {
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d003      	beq.n	80004e2 <MCAL_GPIO_Init+0xaa>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	789b      	ldrb	r3, [r3, #2]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d115      	bne.n	800050e <MCAL_GPIO_Init+0xd6>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	789b      	ldrb	r3, [r3, #2]
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 030f 	and.w	r3, r3, #15
 80004ee:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 80004f0:	7bfc      	ldrb	r4, [r7, #15]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff3c 	bl	8000374 <GPIO_CRLH_GetPosition>
 80004fc:	4603      	mov	r3, r0
 80004fe:	fa04 f203 	lsl.w	r2, r4, r3
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	431a      	orrs	r2, r3
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	e03e      	b.n	800058c <MCAL_GPIO_Init+0x154>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) {
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	789b      	ldrb	r3, [r3, #2]
 8000512:	2b08      	cmp	r3, #8
 8000514:	d115      	bne.n	8000542 <MCAL_GPIO_Init+0x10a>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	b2db      	uxtb	r3, r3
 800051e:	f003 030f 	and.w	r3, r3, #15
 8000522:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8000524:	7bfc      	ldrb	r4, [r7, #15]
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff22 	bl	8000374 <GPIO_CRLH_GetPosition>
 8000530:	4603      	mov	r3, r0
 8000532:	fa04 f203 	lsl.w	r2, r4, r3
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	431a      	orrs	r2, r3
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	601a      	str	r2, [r3, #0]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;

		}
	}

}
 8000540:	e024      	b.n	800058c <MCAL_GPIO_Init+0x154>
			Pin_Config_Value = ( (((GPIO_MODE_INPUT_PULL_UP) << 2) | (0x0)) & 0x0F ) ;
 8000542:	2308      	movs	r3, #8
 8000544:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULL_UP) {
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	789b      	ldrb	r3, [r3, #2]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d107      	bne.n	800055e <MCAL_GPIO_Init+0x126>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	8812      	ldrh	r2, [r2, #0]
 8000556:	431a      	orrs	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	e007      	b.n	800056e <MCAL_GPIO_Init+0x136>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	8812      	ldrh	r2, [r2, #0]
 8000566:	43d2      	mvns	r2, r2
 8000568:	401a      	ands	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	60da      	str	r2, [r3, #12]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 800056e:	7bfc      	ldrb	r4, [r7, #15]
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fefd 	bl	8000374 <GPIO_CRLH_GetPosition>
 800057a:	4603      	mov	r3, r0
 800057c:	fa04 f203 	lsl.w	r2, r4, r3
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	431a      	orrs	r2, r3
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	e7ff      	b.n	800058c <MCAL_GPIO_Init+0x154>
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bd90      	pop	{r4, r7, pc}

08000594 <MCAL_RCC_Get_SysClk_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value		-	SysClk frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_SysClk_Freq (void) {
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	switch ((RCC->CFGR >> 2) & 0b11) {
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <MCAL_RCC_Get_SysClk_Freq+0x30>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	089b      	lsrs	r3, r3, #2
 800059e:	f003 0303 	and.w	r3, r3, #3
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d006      	beq.n	80005b4 <MCAL_RCC_Get_SysClk_Freq+0x20>
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d302      	bcc.n	80005b0 <MCAL_RCC_Get_SysClk_Freq+0x1c>
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d004      	beq.n	80005b8 <MCAL_RCC_Get_SysClk_Freq+0x24>
 80005ae:	e005      	b.n	80005bc <MCAL_RCC_Get_SysClk_Freq+0x28>
	case 0 :
		return HSI_CLK ;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <MCAL_RCC_Get_SysClk_Freq+0x34>)
 80005b2:	e003      	b.n	80005bc <MCAL_RCC_Get_SysClk_Freq+0x28>
		break ;
	case 1 :
		return HSE_CLK ;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MCAL_RCC_Get_SysClk_Freq+0x38>)
 80005b6:	e001      	b.n	80005bc <MCAL_RCC_Get_SysClk_Freq+0x28>
		break ;
	case 2 :
		return PLL_CLK ;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <MCAL_RCC_Get_SysClk_Freq+0x38>)
 80005ba:	e7ff      	b.n	80005bc <MCAL_RCC_Get_SysClk_Freq+0x28>
		break ;
	}
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000
 80005c8:	007a1200 	.word	0x007a1200
 80005cc:	00f42400 	.word	0x00f42400

080005d0 <MCAL_RCC_Get_HClk_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value		-	AHB clock frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_HClk_Freq (void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
	uint32_t prescaler ;
	uint32_t cfg_value ;
	uint32_t Hclk ;
	cfg_value = (RCC->CFGR >> 4) & 0b1111 ;
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <MCAL_RCC_Get_HClk_Freq+0xb4>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	091b      	lsrs	r3, r3, #4
 80005dc:	f003 030f 	and.w	r3, r3, #15
 80005e0:	60bb      	str	r3, [r7, #8]
		1101: SYSCLK divided by 128
		1110: SYSCLK divided by 256
		1111: SYSCLK divided by 512
	 *
	 */
	switch (cfg_value) {
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d840      	bhi.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <MCAL_RCC_Get_HClk_Freq+0x20>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000631 	.word	0x08000631
 80005f4:	08000631 	.word	0x08000631
 80005f8:	08000631 	.word	0x08000631
 80005fc:	08000631 	.word	0x08000631
 8000600:	08000631 	.word	0x08000631
 8000604:	08000631 	.word	0x08000631
 8000608:	08000631 	.word	0x08000631
 800060c:	08000631 	.word	0x08000631
 8000610:	08000637 	.word	0x08000637
 8000614:	0800063d 	.word	0x0800063d
 8000618:	08000643 	.word	0x08000643
 800061c:	08000649 	.word	0x08000649
 8000620:	0800064f 	.word	0x0800064f
 8000624:	08000655 	.word	0x08000655
 8000628:	0800065b 	.word	0x0800065b
 800062c:	08000663 	.word	0x08000663
	case 0b0011 :
	case 0b0100 :
	case 0b0101 :
	case 0b0110 :
	case 0b0111 :
		prescaler = 1 ;
 8000630:	2301      	movs	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
		break ;
 8000634:	e019      	b.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1000 :
		prescaler = 2 ;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
		break ;
 800063a:	e016      	b.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1001 :
		prescaler = 4 ;
 800063c:	2304      	movs	r3, #4
 800063e:	60fb      	str	r3, [r7, #12]
		break ;
 8000640:	e013      	b.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1010 :
		prescaler = 8 ;
 8000642:	2308      	movs	r3, #8
 8000644:	60fb      	str	r3, [r7, #12]
		break ;
 8000646:	e010      	b.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1011 :
		prescaler = 16 ;
 8000648:	2310      	movs	r3, #16
 800064a:	60fb      	str	r3, [r7, #12]
		break ;
 800064c:	e00d      	b.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1100 :
		prescaler = 64 ;
 800064e:	2340      	movs	r3, #64	; 0x40
 8000650:	60fb      	str	r3, [r7, #12]
		break ;
 8000652:	e00a      	b.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1101 :
		prescaler = 128 ;
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	60fb      	str	r3, [r7, #12]
		break ;
 8000658:	e007      	b.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1110 :
		prescaler = 256 ;
 800065a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800065e:	60fb      	str	r3, [r7, #12]
		break ;
 8000660:	e003      	b.n	800066a <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1111 :
		prescaler = 512 ;
 8000662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000666:	60fb      	str	r3, [r7, #12]
		break ;
 8000668:	bf00      	nop
	}
	Hclk = (uint32_t)(MCAL_RCC_Get_SysClk_Freq() / prescaler) ;
 800066a:	f7ff ff93 	bl	8000594 <MCAL_RCC_Get_SysClk_Freq>
 800066e:	4602      	mov	r2, r0
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	fbb2 f3f3 	udiv	r3, r2, r3
 8000676:	607b      	str	r3, [r7, #4]
	return Hclk ;
 8000678:	687b      	ldr	r3, [r7, #4]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <MCAL_RCC_Get_PClk1_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value		-	APB1 clock frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_PClk1_Freq (void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
	uint32_t prescaler ;
	uint32_t cfg_value ;
	uint32_t Pclk1 ;
	cfg_value = (RCC->CFGR >> 8) & 0b111 ;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MCAL_RCC_Get_PClk1_Freq+0x78>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	60bb      	str	r3, [r7, #8]
		100: HCLK divided by 2
		101: HCLK divided by 4
		110: HCLK divided by 8
		111: HCLK divided by 16
	 */
	switch (cfg_value) {
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	2b07      	cmp	r3, #7
 800069e:	d822      	bhi.n	80006e6 <MCAL_RCC_Get_PClk1_Freq+0x5e>
 80006a0:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <MCAL_RCC_Get_PClk1_Freq+0x20>)
 80006a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a6:	bf00      	nop
 80006a8:	080006c9 	.word	0x080006c9
 80006ac:	080006c9 	.word	0x080006c9
 80006b0:	080006c9 	.word	0x080006c9
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006cf 	.word	0x080006cf
 80006bc:	080006d5 	.word	0x080006d5
 80006c0:	080006db 	.word	0x080006db
 80006c4:	080006e1 	.word	0x080006e1
	case 0b000 :
	case 0b001 :
	case 0b010 :
	case 0b011 :
		prescaler = 1 ;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
		break ;
 80006cc:	e00b      	b.n	80006e6 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b100 :
		prescaler = 2 ;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
		break ;
 80006d2:	e008      	b.n	80006e6 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b101 :
		prescaler = 4 ;
 80006d4:	2304      	movs	r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
		break ;
 80006d8:	e005      	b.n	80006e6 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b110 :
		prescaler = 8 ;
 80006da:	2308      	movs	r3, #8
 80006dc:	60fb      	str	r3, [r7, #12]
		break ;
 80006de:	e002      	b.n	80006e6 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b111 :
		prescaler = 16 ;
 80006e0:	2310      	movs	r3, #16
 80006e2:	60fb      	str	r3, [r7, #12]
		break ;
 80006e4:	bf00      	nop
	}
	Pclk1 = (uint32_t)(MCAL_RCC_Get_HClk_Freq() / prescaler) ;
 80006e6:	f7ff ff73 	bl	80005d0 <MCAL_RCC_Get_HClk_Freq>
 80006ea:	4602      	mov	r2, r0
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f2:	607b      	str	r3, [r7, #4]
	return Pclk1 ;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MCAL_RCC_Get_PClk2_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value		-	APB2 clock frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_PClk2_Freq (void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
	uint32_t prescaler ;
	uint32_t cfg_value ;
	uint32_t Pclk2 ;
	cfg_value = (RCC->CFGR >> 11) & 0b111 ;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MCAL_RCC_Get_PClk2_Freq+0x78>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	0adb      	lsrs	r3, r3, #11
 8000710:	f003 0307 	and.w	r3, r3, #7
 8000714:	60bb      	str	r3, [r7, #8]
		100: HCLK divided by 2
		101: HCLK divided by 4
		110: HCLK divided by 8
		111: HCLK divided by 16
	 */
	switch (cfg_value) {
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2b07      	cmp	r3, #7
 800071a:	d822      	bhi.n	8000762 <MCAL_RCC_Get_PClk2_Freq+0x5e>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <MCAL_RCC_Get_PClk2_Freq+0x20>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000745 	.word	0x08000745
 8000728:	08000745 	.word	0x08000745
 800072c:	08000745 	.word	0x08000745
 8000730:	08000745 	.word	0x08000745
 8000734:	0800074b 	.word	0x0800074b
 8000738:	08000751 	.word	0x08000751
 800073c:	08000757 	.word	0x08000757
 8000740:	0800075d 	.word	0x0800075d
	case 0b000 :
	case 0b001 :
	case 0b010 :
	case 0b011 :
		prescaler = 1 ;
 8000744:	2301      	movs	r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
		break ;
 8000748:	e00b      	b.n	8000762 <MCAL_RCC_Get_PClk2_Freq+0x5e>
	case 0b100 :
		prescaler = 2 ;
 800074a:	2302      	movs	r3, #2
 800074c:	60fb      	str	r3, [r7, #12]
		break ;
 800074e:	e008      	b.n	8000762 <MCAL_RCC_Get_PClk2_Freq+0x5e>
	case 0b101 :
		prescaler = 4 ;
 8000750:	2304      	movs	r3, #4
 8000752:	60fb      	str	r3, [r7, #12]
		break ;
 8000754:	e005      	b.n	8000762 <MCAL_RCC_Get_PClk2_Freq+0x5e>
	case 0b110 :
		prescaler = 8 ;
 8000756:	2308      	movs	r3, #8
 8000758:	60fb      	str	r3, [r7, #12]
		break ;
 800075a:	e002      	b.n	8000762 <MCAL_RCC_Get_PClk2_Freq+0x5e>
	case 0b111 :
		prescaler = 16 ;
 800075c:	2310      	movs	r3, #16
 800075e:	60fb      	str	r3, [r7, #12]
		break ;
 8000760:	bf00      	nop
	}
	Pclk2 = (uint32_t)(MCAL_RCC_Get_HClk_Freq() / prescaler) ;
 8000762:	f7ff ff35 	bl	80005d0 <MCAL_RCC_Get_HClk_Freq>
 8000766:	4602      	mov	r2, r0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	fbb2 f3f3 	udiv	r3, r2, r3
 800076e:	607b      	str	r3, [r7, #4]
	return Pclk2 ;
 8000770:	687b      	ldr	r3, [r7, #4]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <MCAL_USART_Init>:
 * 						USART configurations required
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	Configuration MACROS can be found in USART.h
 */
void MCAL_USART_Init(USART_TypeDef* USARTx , USART_Config_t* USART_Config) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
	uint32_t pclk ;
	uint32_t BRR_value ;

	// enable USART clock
	if (USARTx == USART1) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a5a      	ldr	r2, [pc, #360]	; (80008f8 <MCAL_USART_Init+0x178>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d109      	bne.n	80007a6 <MCAL_USART_Init+0x26>
		CLK_EN_USART1() ;
 8000792:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <MCAL_USART_Init+0x17c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a59      	ldr	r2, [pc, #356]	; (80008fc <MCAL_USART_Init+0x17c>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6193      	str	r3, [r2, #24]
		g_USART_Cfg[0] = USART_Config ;
 800079e:	4a58      	ldr	r2, [pc, #352]	; (8000900 <MCAL_USART_Init+0x180>)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	e01a      	b.n	80007dc <MCAL_USART_Init+0x5c>
	}
	else if (USARTx == USART2) {
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a56      	ldr	r2, [pc, #344]	; (8000904 <MCAL_USART_Init+0x184>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d109      	bne.n	80007c2 <MCAL_USART_Init+0x42>
		CLK_EN_USART2() ;
 80007ae:	4b53      	ldr	r3, [pc, #332]	; (80008fc <MCAL_USART_Init+0x17c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a52      	ldr	r2, [pc, #328]	; (80008fc <MCAL_USART_Init+0x17c>)
 80007b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b8:	61d3      	str	r3, [r2, #28]
		g_USART_Cfg[1] = USART_Config ;
 80007ba:	4a51      	ldr	r2, [pc, #324]	; (8000900 <MCAL_USART_Init+0x180>)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	6053      	str	r3, [r2, #4]
 80007c0:	e00c      	b.n	80007dc <MCAL_USART_Init+0x5c>
	}
	else if (USARTx == USART3) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a50      	ldr	r2, [pc, #320]	; (8000908 <MCAL_USART_Init+0x188>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d108      	bne.n	80007dc <MCAL_USART_Init+0x5c>
		CLK_EN_USART3() ;
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <MCAL_USART_Init+0x17c>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a4b      	ldr	r2, [pc, #300]	; (80008fc <MCAL_USART_Init+0x17c>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d4:	61d3      	str	r3, [r2, #28]
		g_USART_Cfg[2] = USART_Config ;
 80007d6:	4a4a      	ldr	r2, [pc, #296]	; (8000900 <MCAL_USART_Init+0x180>)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	6093      	str	r3, [r2, #8]
	}

	// enable USART
	USARTx->CR1 |= (1 << 13) ;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	60da      	str	r2, [r3, #12]

	// initialize USART mode
	USARTx->CR1 |= USART_Config->Mode ;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	7812      	ldrb	r2, [r2, #0]
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60da      	str	r2, [r3, #12]

	// initialize USART payload length
	USARTx->CR1 |= USART_Config->PayLoad_Length ;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	8912      	ldrh	r2, [r2, #8]
 80007fe:	431a      	orrs	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	60da      	str	r2, [r3, #12]

	// initialize USART parity
	USARTx->CR1 |= USART_Config->Parity ;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	8952      	ldrh	r2, [r2, #10]
 800080c:	431a      	orrs	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	60da      	str	r2, [r3, #12]

	// initialize USART stop bits
	USARTx->CR2 |= USART_Config->StopBits ;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	8992      	ldrh	r2, [r2, #12]
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	611a      	str	r2, [r3, #16]

	// initialize USART Hardware flow control
	USARTx->CR3 |= USART_Config->HW_FlowControl ;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	89d2      	ldrh	r2, [r2, #14]
 8000828:	431a      	orrs	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	615a      	str	r2, [r3, #20]

	// Baud rate configuration
	if (USARTx == USART1) {
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a31      	ldr	r2, [pc, #196]	; (80008f8 <MCAL_USART_Init+0x178>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d103      	bne.n	800083e <MCAL_USART_Init+0xbe>
		pclk = MCAL_RCC_Get_PClk2_Freq() ;
 8000836:	f7ff ff65 	bl	8000704 <MCAL_RCC_Get_PClk2_Freq>
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	e002      	b.n	8000844 <MCAL_USART_Init+0xc4>
	}
	else {
		pclk = MCAL_RCC_Get_PClk1_Freq() ;
 800083e:	f7ff ff23 	bl	8000688 <MCAL_RCC_Get_PClk1_Freq>
 8000842:	60f8      	str	r0, [r7, #12]
	}

	BRR_value = USART_BRR_REG_VALUE(pclk,USART_Config->BaudRate) ;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000850:	0119      	lsls	r1, r3, #4
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	009a      	lsls	r2, r3, #2
 800085c:	441a      	add	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	fbb2 f2f3 	udiv	r2, r2, r3
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	fbb0 f3f3 	udiv	r3, r0, r3
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	fb00 f303 	mul.w	r3, r0, r3
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	011b      	lsls	r3, r3, #4
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <MCAL_USART_Init+0x18c>)
 8000880:	fba2 2303 	umull	r2, r3, r2, r3
 8000884:	095b      	lsrs	r3, r3, #5
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	430b      	orrs	r3, r1
 800088c:	60bb      	str	r3, [r7, #8]
	USARTx->BRR |= BRR_value ;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	431a      	orrs	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	609a      	str	r2, [r3, #8]

	// enable / disable interrupt
	if (USART_Config->IRQ_Enable != USART_IRQ_ENABLE_NONE) {
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	8a1b      	ldrh	r3, [r3, #16]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d026      	beq.n	80008f0 <MCAL_USART_Init+0x170>
		USARTx->CR1 |= USART_Config->IRQ_Enable ;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	8a12      	ldrh	r2, [r2, #16]
 80008aa:	431a      	orrs	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	60da      	str	r2, [r3, #12]

		// enable NVIC
		if (USARTx == USART1){
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <MCAL_USART_Init+0x178>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d106      	bne.n	80008c6 <MCAL_USART_Init+0x146>
			NVIC_IRQ37_USART1_ENABLE() ;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MCAL_USART_Init+0x190>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <MCAL_USART_Init+0x190>)
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	6013      	str	r3, [r2, #0]
		}
		else if (USARTx == USART3) {
			NVIC_IRQ39_USART3_ENABLE() ;
		}
	}
}
 80008c4:	e014      	b.n	80008f0 <MCAL_USART_Init+0x170>
		else if (USARTx == USART2) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <MCAL_USART_Init+0x184>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d106      	bne.n	80008dc <MCAL_USART_Init+0x15c>
			NVIC_IRQ38_USART2_ENABLE() ;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MCAL_USART_Init+0x190>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <MCAL_USART_Init+0x190>)
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	6013      	str	r3, [r2, #0]
}
 80008da:	e009      	b.n	80008f0 <MCAL_USART_Init+0x170>
		else if (USARTx == USART3) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <MCAL_USART_Init+0x188>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d105      	bne.n	80008f0 <MCAL_USART_Init+0x170>
			NVIC_IRQ39_USART3_ENABLE() ;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MCAL_USART_Init+0x190>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <MCAL_USART_Init+0x190>)
 80008ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40013800 	.word	0x40013800
 80008fc:	40021000 	.word	0x40021000
 8000900:	2000001c 	.word	0x2000001c
 8000904:	40004400 	.word	0x40004400
 8000908:	40004800 	.word	0x40004800
 800090c:	51eb851f 	.word	0x51eb851f
 8000910:	e000e104 	.word	0xe000e104

08000914 <MCAL_USART_GPIO_Pins>:
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	required AF modes can be found in TRM @ section 9.1.11 GPIO configurations for device peripherals
 *						AFIO pins can be found in TRM @ section 9.3 Alternate function I/O
 */
void MCAL_USART_GPIO_Pins (USART_TypeDef* USARTx) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	/*
	 * USARTx_TX	Alternate function push-pull
	 * USARTx_RX	Input floating / Input pull-up
	 */
	if (USARTx == USART1) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4a3d      	ldr	r2, [pc, #244]	; (8000a14 <MCAL_USART_GPIO_Pins+0x100>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d124      	bne.n	800096e <MCAL_USART_GPIO_Pins+0x5a>
		/*
		 * USART1_TX	PA9
		 * USART1_RX	PA10
		 */
		CLK_EN_GPIOA() ;
 8000924:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a3b      	ldr	r2, [pc, #236]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	6193      	str	r3, [r2, #24]
		CLK_EN_AFIO() ;
 8000930:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a38      	ldr	r2, [pc, #224]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6193      	str	r3, [r2, #24]

		GPIO_PinConfig_t usart_tx_config ;
		usart_tx_config.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL ;
 800093c:	2306      	movs	r3, #6
 800093e:	77bb      	strb	r3, [r7, #30]
		usart_tx_config .GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000940:	2301      	movs	r3, #1
 8000942:	77fb      	strb	r3, [r7, #31]
		usart_tx_config .GPIO_PinNumber = GPIO_PIN_9 ;
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	83bb      	strh	r3, [r7, #28]
		MCAL_GPIO_Init(GPIOA, &usart_tx_config) ;
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4832      	ldr	r0, [pc, #200]	; (8000a1c <MCAL_USART_GPIO_Pins+0x108>)
 8000952:	f7ff fd71 	bl	8000438 <MCAL_GPIO_Init>

		GPIO_PinConfig_t usart_rx_config ;
		usart_rx_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 8000956:	2301      	movs	r3, #1
 8000958:	76bb      	strb	r3, [r7, #26]
		usart_rx_config.GPIO_PinNumber = GPIO_PIN_10 ;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	833b      	strh	r3, [r7, #24]
		MCAL_GPIO_Init(GPIOA, &usart_rx_config) ;
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4619      	mov	r1, r3
 8000966:	482d      	ldr	r0, [pc, #180]	; (8000a1c <MCAL_USART_GPIO_Pins+0x108>)
 8000968:	f7ff fd66 	bl	8000438 <MCAL_GPIO_Init>
		usart_rx_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
		usart_rx_config.GPIO_PinNumber = GPIO_PIN_11 ;
		MCAL_GPIO_Init(GPIOB, &usart_rx_config) ;
	}

}
 800096c:	e04e      	b.n	8000a0c <MCAL_USART_GPIO_Pins+0xf8>
	else if (USARTx == USART2) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <MCAL_USART_GPIO_Pins+0x10c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d122      	bne.n	80009bc <MCAL_USART_GPIO_Pins+0xa8>
		CLK_EN_GPIOA() ;
 8000976:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6193      	str	r3, [r2, #24]
		CLK_EN_AFIO() ;
 8000982:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6193      	str	r3, [r2, #24]
		usart_tx_config.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL ;
 800098e:	2306      	movs	r3, #6
 8000990:	75bb      	strb	r3, [r7, #22]
		usart_tx_config .GPIO_Output_Speed = GPIO_SPEED_10M ;
 8000992:	2301      	movs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]
		usart_tx_config .GPIO_PinNumber = GPIO_PIN_2 ;
 8000996:	2304      	movs	r3, #4
 8000998:	82bb      	strh	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &usart_tx_config) ;
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	481e      	ldr	r0, [pc, #120]	; (8000a1c <MCAL_USART_GPIO_Pins+0x108>)
 80009a2:	f7ff fd49 	bl	8000438 <MCAL_GPIO_Init>
		usart_rx_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 80009a6:	2301      	movs	r3, #1
 80009a8:	74bb      	strb	r3, [r7, #18]
		usart_rx_config.GPIO_PinNumber = GPIO_PIN_3 ;
 80009aa:	2308      	movs	r3, #8
 80009ac:	823b      	strh	r3, [r7, #16]
		MCAL_GPIO_Init(GPIOA, &usart_rx_config) ;
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	4819      	ldr	r0, [pc, #100]	; (8000a1c <MCAL_USART_GPIO_Pins+0x108>)
 80009b6:	f7ff fd3f 	bl	8000438 <MCAL_GPIO_Init>
}
 80009ba:	e027      	b.n	8000a0c <MCAL_USART_GPIO_Pins+0xf8>
	else if (USARTx == USART3) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <MCAL_USART_GPIO_Pins+0x110>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d123      	bne.n	8000a0c <MCAL_USART_GPIO_Pins+0xf8>
		CLK_EN_GPIOB() ;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 80009ca:	f043 0308 	orr.w	r3, r3, #8
 80009ce:	6193      	str	r3, [r2, #24]
		CLK_EN_AFIO() ;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <MCAL_USART_GPIO_Pins+0x104>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6193      	str	r3, [r2, #24]
		usart_tx_config.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL ;
 80009dc:	2306      	movs	r3, #6
 80009de:	73bb      	strb	r3, [r7, #14]
		usart_tx_config .GPIO_Output_Speed = GPIO_SPEED_10M ;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
		usart_tx_config .GPIO_PinNumber = GPIO_PIN_10 ;
 80009e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e8:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &usart_tx_config) ;
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MCAL_USART_GPIO_Pins+0x114>)
 80009f2:	f7ff fd21 	bl	8000438 <MCAL_GPIO_Init>
		usart_rx_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 80009f6:	2301      	movs	r3, #1
 80009f8:	72bb      	strb	r3, [r7, #10]
		usart_rx_config.GPIO_PinNumber = GPIO_PIN_11 ;
 80009fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fe:	813b      	strh	r3, [r7, #8]
		MCAL_GPIO_Init(GPIOB, &usart_rx_config) ;
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	4619      	mov	r1, r3
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MCAL_USART_GPIO_Pins+0x114>)
 8000a08:	f7ff fd16 	bl	8000438 <MCAL_GPIO_Init>
}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40013800 	.word	0x40013800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <MCAL_USART_Send_Data>:
 * 						polling mechanism state (enable / disable)
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	none
 */
void MCAL_USART_Send_Data(USART_TypeDef* USARTx , uint16_t* data , EN_Polling_Mechanism polling_state) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4613      	mov	r3, r2
 8000a38:	71fb      	strb	r3, [r7, #7]

	if (polling_state == enable) {
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d106      	bne.n	8000a4e <MCAL_USART_Send_Data+0x22>
		 * 	The TXE bit is set by hardware and it indicates:
			• The data has been moved from TDR to the shift register and the data transmission has started.
			• The TDR register is empty.
			• The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & (1 << 7))) ;
 8000a40:	bf00      	nop
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f9      	beq.n	8000a42 <MCAL_USART_Send_Data+0x16>
	}
	if (USARTx == USART1) {
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4a2b      	ldr	r2, [pc, #172]	; (8000b00 <MCAL_USART_Send_Data+0xd4>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d117      	bne.n	8000a86 <MCAL_USART_Send_Data+0x5a>
		if (g_USART_Cfg[0]->PayLoad_Length == USART_PAYLOAD_8B) {
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <MCAL_USART_Send_Data+0xd8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	891b      	ldrh	r3, [r3, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d105      	bne.n	8000a6c <MCAL_USART_Send_Data+0x40>
			USARTx->DR = (*data) & (uint8_t)0xFF ;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		}
		else if (g_USART_Cfg[2]->PayLoad_Length == USART_PAYLOAD_9B) {
			USARTx->DR = (*data) & (uint16_t)0x1FF ;
		}
	}
}
 8000a6a:	e043      	b.n	8000af4 <MCAL_USART_Send_Data+0xc8>
		else if (g_USART_Cfg[0]->PayLoad_Length == USART_PAYLOAD_9B) {
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <MCAL_USART_Send_Data+0xd8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	891b      	ldrh	r3, [r3, #8]
 8000a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a76:	d13d      	bne.n	8000af4 <MCAL_USART_Send_Data+0xc8>
			USARTx->DR = (*data) & (uint16_t)0x1FF ;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	605a      	str	r2, [r3, #4]
}
 8000a84:	e036      	b.n	8000af4 <MCAL_USART_Send_Data+0xc8>
	else if (USARTx == USART2) {
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4a1f      	ldr	r2, [pc, #124]	; (8000b08 <MCAL_USART_Send_Data+0xdc>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d117      	bne.n	8000abe <MCAL_USART_Send_Data+0x92>
		if (g_USART_Cfg[1]->PayLoad_Length == USART_PAYLOAD_8B) {
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MCAL_USART_Send_Data+0xd8>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	891b      	ldrh	r3, [r3, #8]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d105      	bne.n	8000aa4 <MCAL_USART_Send_Data+0x78>
			USARTx->DR = (*data) & (uint8_t)0xFF ;
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	605a      	str	r2, [r3, #4]
}
 8000aa2:	e027      	b.n	8000af4 <MCAL_USART_Send_Data+0xc8>
		else if (g_USART_Cfg[1]->PayLoad_Length == USART_PAYLOAD_9B) {
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MCAL_USART_Send_Data+0xd8>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	891b      	ldrh	r3, [r3, #8]
 8000aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aae:	d121      	bne.n	8000af4 <MCAL_USART_Send_Data+0xc8>
			USARTx->DR = (*data) & (uint16_t)0x1FF ;
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	605a      	str	r2, [r3, #4]
}
 8000abc:	e01a      	b.n	8000af4 <MCAL_USART_Send_Data+0xc8>
	else if (USARTx == USART3) {
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MCAL_USART_Send_Data+0xe0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d116      	bne.n	8000af4 <MCAL_USART_Send_Data+0xc8>
		if (g_USART_Cfg[2]->PayLoad_Length == USART_PAYLOAD_8B) {
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MCAL_USART_Send_Data+0xd8>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	891b      	ldrh	r3, [r3, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d105      	bne.n	8000adc <MCAL_USART_Send_Data+0xb0>
			USARTx->DR = (*data) & (uint8_t)0xFF ;
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	605a      	str	r2, [r3, #4]
}
 8000ada:	e00b      	b.n	8000af4 <MCAL_USART_Send_Data+0xc8>
		else if (g_USART_Cfg[2]->PayLoad_Length == USART_PAYLOAD_9B) {
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MCAL_USART_Send_Data+0xd8>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	891b      	ldrh	r3, [r3, #8]
 8000ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ae6:	d105      	bne.n	8000af4 <MCAL_USART_Send_Data+0xc8>
			USARTx->DR = (*data) & (uint16_t)0x1FF ;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	605a      	str	r2, [r3, #4]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40013800 	.word	0x40013800
 8000b04:	2000001c 	.word	0x2000001c
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MCAL_USART_Receive_Data>:
 * 						polling mechanism state (enable / disable)
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	none
 */
void MCAL_USART_Receive_Data(USART_TypeDef* USARTx , uint16_t* data , EN_Polling_Mechanism polling_state) {
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	71fb      	strb	r3, [r7, #7]
	if (polling_state == enable) {
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d106      	bne.n	8000b32 <MCAL_USART_Receive_Data+0x22>
		// wait for RXNE flag to be set
		/*
		 *	It indicates that the content of the shift register is transferred to the RDR.
		 *	In other words, data has been received and can be read
		 */
		while (!(USARTx->SR & (1 << 5))) ;
 8000b24:	bf00      	nop
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <MCAL_USART_Receive_Data+0x16>
	}
	if (USARTx == USART1) {
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4a4d      	ldr	r2, [pc, #308]	; (8000c6c <MCAL_USART_Receive_Data+0x15c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12e      	bne.n	8000b98 <MCAL_USART_Receive_Data+0x88>
		if (g_USART_Cfg[0]->PayLoad_Length == USART_PAYLOAD_9B) {			// 9 Bits Data
 8000b3a:	4b4d      	ldr	r3, [pc, #308]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	891b      	ldrh	r3, [r3, #8]
 8000b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b44:	d112      	bne.n	8000b6c <MCAL_USART_Receive_Data+0x5c>
			if (g_USART_Cfg[0]->Parity == USART_PARITY_NONE) {
 8000b46:	4b4a      	ldr	r3, [pc, #296]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	895b      	ldrh	r3, [r3, #10]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d105      	bne.n	8000b5c <MCAL_USART_Receive_Data+0x4c>
				// All 9 bits are data
				*data = USARTx->DR ;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	801a      	strh	r2, [r3, #0]
				// just least 7 bits are data
				*data = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
}
 8000b5a:	e082      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0xFF ;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	801a      	strh	r2, [r3, #0]
}
 8000b6a:	e07a      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
			if (g_USART_Cfg[0]->Parity == USART_PARITY_NONE) {
 8000b6c:	4b40      	ldr	r3, [pc, #256]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	895b      	ldrh	r3, [r3, #10]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d107      	bne.n	8000b86 <MCAL_USART_Receive_Data+0x76>
				*data = USARTx->DR & (uint8_t)0xFF  ;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	801a      	strh	r2, [r3, #0]
}
 8000b84:	e06d      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0x7F ;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	801a      	strh	r2, [r3, #0]
}
 8000b96:	e064      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
	else if (USARTx == USART2) {
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4a36      	ldr	r2, [pc, #216]	; (8000c74 <MCAL_USART_Receive_Data+0x164>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d12e      	bne.n	8000bfe <MCAL_USART_Receive_Data+0xee>
		if (g_USART_Cfg[1]->PayLoad_Length == USART_PAYLOAD_9B) {			// 9 Bits Data
 8000ba0:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	891b      	ldrh	r3, [r3, #8]
 8000ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000baa:	d112      	bne.n	8000bd2 <MCAL_USART_Receive_Data+0xc2>
			if (g_USART_Cfg[1]->Parity == USART_PARITY_NONE) {
 8000bac:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	895b      	ldrh	r3, [r3, #10]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d105      	bne.n	8000bc2 <MCAL_USART_Receive_Data+0xb2>
				*data = USARTx->DR ;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	801a      	strh	r2, [r3, #0]
}
 8000bc0:	e04f      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0xFF ;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	801a      	strh	r2, [r3, #0]
}
 8000bd0:	e047      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
			if (g_USART_Cfg[1]->Parity == USART_PARITY_NONE) {
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	895b      	ldrh	r3, [r3, #10]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d107      	bne.n	8000bec <MCAL_USART_Receive_Data+0xdc>
				*data = USARTx->DR & (uint8_t)0xFF  ;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	801a      	strh	r2, [r3, #0]
}
 8000bea:	e03a      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0x7F ;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	801a      	strh	r2, [r3, #0]
}
 8000bfc:	e031      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
	else if (USARTx == USART3) {
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <MCAL_USART_Receive_Data+0x168>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12d      	bne.n	8000c62 <MCAL_USART_Receive_Data+0x152>
		if (g_USART_Cfg[2]->PayLoad_Length == USART_PAYLOAD_9B) {			// 9 Bits Data
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	891b      	ldrh	r3, [r3, #8]
 8000c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c10:	d112      	bne.n	8000c38 <MCAL_USART_Receive_Data+0x128>
			if (g_USART_Cfg[2]->Parity == USART_PARITY_NONE) {
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	895b      	ldrh	r3, [r3, #10]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d105      	bne.n	8000c28 <MCAL_USART_Receive_Data+0x118>
				*data = USARTx->DR ;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	801a      	strh	r2, [r3, #0]
}
 8000c26:	e01c      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0xFF ;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	801a      	strh	r2, [r3, #0]
}
 8000c36:	e014      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
			if (g_USART_Cfg[2]->Parity == USART_PARITY_NONE) {
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MCAL_USART_Receive_Data+0x160>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	895b      	ldrh	r3, [r3, #10]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d107      	bne.n	8000c52 <MCAL_USART_Receive_Data+0x142>
				*data = USARTx->DR & (uint8_t)0xFF  ;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	801a      	strh	r2, [r3, #0]
}
 8000c50:	e007      	b.n	8000c62 <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0x7F ;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	801a      	strh	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	2000001c 	.word	0x2000001c
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40004800 	.word	0x40004800

08000c7c <USART1_IRQHandler>:

//-------------------------------------------ISRs---------------------------------------------------
void USART1_IRQHandler (void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	g_USART_Cfg[0]->p_IRQ_CallBack() ;
 8000c80:	4b02      	ldr	r3, [pc, #8]	; (8000c8c <USART1_IRQHandler+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	4798      	blx	r3
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000001c 	.word	0x2000001c

08000c90 <USART2_IRQHandler>:
void USART2_IRQHandler (void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	g_USART_Cfg[1]->p_IRQ_CallBack() ;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <USART2_IRQHandler+0x10>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4798      	blx	r3
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2000001c 	.word	0x2000001c

08000ca4 <USART3_IRQHandler>:
void USART3_IRQHandler (void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	g_USART_Cfg[2]->p_IRQ_CallBack() ;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <USART3_IRQHandler+0x10>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4798      	blx	r3
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000001c 	.word	0x2000001c

08000cb8 <USART1_RX_IRQ_CB>:
#include "RCC.h"
#include "USART.h"

uint16_t ch ;

void USART1_RX_IRQ_CB (void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

	MCAL_USART_Receive_Data(USART1, &ch, disable) ;
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4905      	ldr	r1, [pc, #20]	; (8000cd4 <USART1_RX_IRQ_CB+0x1c>)
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <USART1_RX_IRQ_CB+0x20>)
 8000cc2:	f7ff ff25 	bl	8000b10 <MCAL_USART_Receive_Data>
	MCAL_USART_Send_Data(USART1, &ch, enable) ;
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4902      	ldr	r1, [pc, #8]	; (8000cd4 <USART1_RX_IRQ_CB+0x1c>)
 8000cca:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <USART1_RX_IRQ_CB+0x20>)
 8000ccc:	f7ff feae 	bl	8000a2c <MCAL_USART_Send_Data>
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000064 	.word	0x20000064
 8000cd8:	40013800 	.word	0x40013800

08000cdc <main>:

int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
	USART_Config_t uart1_cfg ;
	uart1_cfg.Mode = USART_MODE_TX_RX ;
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	703b      	strb	r3, [r7, #0]
	uart1_cfg.BaudRate = USART_BAUDRATE_9600 ;
 8000ce6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000cea:	607b      	str	r3, [r7, #4]
	uart1_cfg.PayLoad_Length = USART_PAYLOAD_8B ;
 8000cec:	2300      	movs	r3, #0
 8000cee:	813b      	strh	r3, [r7, #8]
	uart1_cfg.Parity = USART_PARITY_NONE ;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	817b      	strh	r3, [r7, #10]
	uart1_cfg.StopBits = USART_STOP_BITS_1 ;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	81bb      	strh	r3, [r7, #12]
	uart1_cfg.HW_FlowControl = USART_FLOWCONTROL_NONE ;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	81fb      	strh	r3, [r7, #14]
	uart1_cfg.IRQ_Enable = USART_IRQ_ENABLE_RXNE ;
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	823b      	strh	r3, [r7, #16]
	uart1_cfg.p_IRQ_CallBack = USART1_RX_IRQ_CB ;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <main+0x3c>)
 8000d02:	617b      	str	r3, [r7, #20]

	MCAL_USART_Init(USART1, &uart1_cfg) ;
 8000d04:	463b      	mov	r3, r7
 8000d06:	4619      	mov	r1, r3
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <main+0x40>)
 8000d0a:	f7ff fd39 	bl	8000780 <MCAL_USART_Init>
	MCAL_USART_GPIO_Pins(USART1) ;
 8000d0e:	4803      	ldr	r0, [pc, #12]	; (8000d1c <main+0x40>)
 8000d10:	f7ff fe00 	bl	8000914 <MCAL_USART_GPIO_Pins>
	while (1) {}
 8000d14:	e7fe      	b.n	8000d14 <main+0x38>
 8000d16:	bf00      	nop
 8000d18:	08000cb9 	.word	0x08000cb9
 8000d1c:	40013800 	.word	0x40013800

08000d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d22:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d24:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopForever+0xe>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopForever+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d4e:	f000 f811 	bl	8000d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d52:	f7ff ffc3 	bl	8000cdc <main>

08000d56 <LoopForever>:

LoopForever:
    b LoopForever
 8000d56:	e7fe      	b.n	8000d56 <LoopForever>
  ldr   r0, =_estack
 8000d58:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d64:	08000ddc 	.word	0x08000ddc
  ldr r2, =_sbss
 8000d68:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d6c:	20000068 	.word	0x20000068

08000d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_2_IRQHandler>
	...

08000d74 <__libc_init_array>:
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	2500      	movs	r5, #0
 8000d78:	4e0c      	ldr	r6, [pc, #48]	; (8000dac <__libc_init_array+0x38>)
 8000d7a:	4c0d      	ldr	r4, [pc, #52]	; (8000db0 <__libc_init_array+0x3c>)
 8000d7c:	1ba4      	subs	r4, r4, r6
 8000d7e:	10a4      	asrs	r4, r4, #2
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	d109      	bne.n	8000d98 <__libc_init_array+0x24>
 8000d84:	f000 f81a 	bl	8000dbc <_init>
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4e0a      	ldr	r6, [pc, #40]	; (8000db4 <__libc_init_array+0x40>)
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <__libc_init_array+0x44>)
 8000d8e:	1ba4      	subs	r4, r4, r6
 8000d90:	10a4      	asrs	r4, r4, #2
 8000d92:	42a5      	cmp	r5, r4
 8000d94:	d105      	bne.n	8000da2 <__libc_init_array+0x2e>
 8000d96:	bd70      	pop	{r4, r5, r6, pc}
 8000d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d9c:	4798      	blx	r3
 8000d9e:	3501      	adds	r5, #1
 8000da0:	e7ee      	b.n	8000d80 <__libc_init_array+0xc>
 8000da2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000da6:	4798      	blx	r3
 8000da8:	3501      	adds	r5, #1
 8000daa:	e7f2      	b.n	8000d92 <__libc_init_array+0x1e>
 8000dac:	08000dd4 	.word	0x08000dd4
 8000db0:	08000dd4 	.word	0x08000dd4
 8000db4:	08000dd4 	.word	0x08000dd4
 8000db8:	08000dd8 	.word	0x08000dd8

08000dbc <_init>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	bf00      	nop
 8000dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc2:	bc08      	pop	{r3}
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	4770      	bx	lr

08000dc8 <_fini>:
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dca:	bf00      	nop
 8000dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dce:	bc08      	pop	{r3}
 8000dd0:	469e      	mov	lr, r3
 8000dd2:	4770      	bx	lr
