
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000438  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000568  08000570  00010570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000568  08000568  00010570  2**0
                  CONTENTS
  4 .ARM          00000000  08000568  08000568  00010570  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000568  08000570  00010570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000568  08000568  00010568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800056c  0800056c  0001056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000570  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000570  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001944  00000000  00000000  00010599  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000429  00000000  00000000  00011edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  00012306  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00012818  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001b01  00000000  00000000  000128b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000cf1  00000000  00000000  000143b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000077b2  00000000  00000000  000150a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c854  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001c8d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000550 	.word	0x08000550

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000550 	.word	0x08000550

08000170 <Get_CRLH_Position>:
#include "STM32_F103C6_GPIO_Driver.h"
//-------------------------------------------------------------
// we can use EQU ((PinNumber%8)<<4)                          |
//-------------------------------------------------------------
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_Position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_Position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_Position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_Position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_Position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_Position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_Position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_Position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_Position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_Position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_Position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_Position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_Position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_Position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_Position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_Position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_Position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_Position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_Position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_Position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_Position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_Position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_Position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_Position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;  // 0, 1: MODE . 2, 3: CNF
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;  // 4, 5: MODE . 6, 7: CNF
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <Get_CRLH_Position+0xbc>
		break;

	}

	return 0;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_Init>:
 * @return value    -None
 * Note				-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 has only GPIO A,B, PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIO_PortX, GPIO_PinConfig_t* PinConfig)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINs from 0 >>> 7
	//Port configuration register high(GPIOx_CRH) Configure PINs from 8 >>> 15

	volatile uint32_t* ConfigRegister = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]

	ConfigRegister = (PinConfig->GPIO_Pin_Number < GPIO_PIN_8)? &GPIO_PortX->CRL   : &GPIO_PortX->CRH;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	2bff      	cmp	r3, #255	; 0xff
 800024e:	d801      	bhi.n	8000254 <MCAL_GPIO_Init+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	e001      	b.n	8000258 <MCAL_GPIO_Init+0x22>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3304      	adds	r3, #4
 8000258:	60bb      	str	r3, [r7, #8]

	//clear MODE, CNF
	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_Pin_Number));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff86 	bl	8000170 <Get_CRLH_Position>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	230f      	movs	r3, #15
 800026a:	4093      	lsls	r3, r2
 800026c:	43da      	mvns	r2, r3
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	401a      	ands	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	789b      	ldrb	r3, [r3, #2]
 800027c:	2b07      	cmp	r3, #7
 800027e:	d00f      	beq.n	80002a0 <MCAL_GPIO_Init+0x6a>
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	789b      	ldrb	r3, [r3, #2]
 8000284:	2b06      	cmp	r3, #6
 8000286:	d00b      	beq.n	80002a0 <MCAL_GPIO_Init+0x6a>
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	789b      	ldrb	r3, [r3, #2]
 800028c:	2b07      	cmp	r3, #7
 800028e:	d007      	beq.n	80002a0 <MCAL_GPIO_Init+0x6a>
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	2b05      	cmp	r3, #5
 8000296:	d003      	beq.n	80002a0 <MCAL_GPIO_Init+0x6a>
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	2b04      	cmp	r3, #4
 800029e:	d10e      	bne.n	80002be <MCAL_GPIO_Init+0x88>
	{
		//Set MODE, CNF
		PIN_Config = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F);
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	789b      	ldrb	r3, [r3, #2]
 80002a4:	3b04      	subs	r3, #4
 80002a6:	009b      	lsls	r3, r3, #2
 80002a8:	b25a      	sxtb	r2, r3
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	78db      	ldrb	r3, [r3, #3]
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b25b      	sxtb	r3, r3
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	f003 030f 	and.w	r3, r3, #15
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	e02c      	b.n	8000318 <MCAL_GPIO_Init+0xe2>
	}
	//if Pin is input
	else  // MODE = 00: Input mode (reset state)
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG) )
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	789b      	ldrb	r3, [r3, #2]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d003      	beq.n	80002ce <MCAL_GPIO_Init+0x98>
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d107      	bne.n	80002de <MCAL_GPIO_Init+0xa8>
		{
			//Set MODE 00, CNF
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2) | 0X0) & 0x0F);
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	789b      	ldrb	r3, [r3, #2]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	f003 030f 	and.w	r3, r3, #15
 80002da:	73fb      	strb	r3, [r7, #15]
 80002dc:	e01c      	b.n	8000318 <MCAL_GPIO_Init+0xe2>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //Consider it as input floating
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	2b08      	cmp	r3, #8
 80002e4:	d102      	bne.n	80002ec <MCAL_GPIO_Init+0xb6>
		{

			//Set MODE 00, CNF
			PIN_Config = ((((GPIO_MODE_INPUT_FLOATING) << 2) | 0X0) & 0x0F);
 80002e6:	2304      	movs	r3, #4
 80002e8:	73fb      	strb	r3, [r7, #15]
 80002ea:	e015      	b.n	8000318 <MCAL_GPIO_Init+0xe2>
		}
		else  //PU PD Input
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PUR) << 2) | 0X0) & 0x0F);
 80002ec:	2308      	movs	r3, #8
 80002ee:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PUR)
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	789b      	ldrb	r3, [r3, #2]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d107      	bne.n	8000308 <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. port bit configuration table
				GPIO_PortX->ODR |= PinConfig->GPIO_Pin_Number;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	683a      	ldr	r2, [r7, #0]
 80002fe:	8812      	ldrh	r2, [r2, #0]
 8000300:	431a      	orrs	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	e007      	b.n	8000318 <MCAL_GPIO_Init+0xe2>
			}
			else
			{
				//PxODR = 1 Input pull-up :Table 20. port bit configuration table
				GPIO_PortX->ODR &= ~(PinConfig->GPIO_Pin_Number);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	43db      	mvns	r3, r3
 8000312:	401a      	ands	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	60da      	str	r2, [r3, #12]

		}

	}
	//Write on the CRL or CRH
	(*ConfigRegister) |= ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_Pin_Number) );
 8000318:	7bfc      	ldrb	r4, [r7, #15]
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff26 	bl	8000170 <Get_CRLH_Position>
 8000324:	4603      	mov	r3, r0
 8000326:	fa04 f203 	lsl.w	r2, r4, r3
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	431a      	orrs	r2, r3
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	601a      	str	r2, [r3, #0]
}
 8000334:	bf00      	nop
 8000336:	3714      	adds	r7, #20
 8000338:	46bd      	mov	sp, r7
 800033a:	bd90      	pop	{r4, r7, pc}

0800033c <MCAL_GPIO_ReadPin>:
 * @parameter[in]   -PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @return value    -the input pin value (two values based on @ref GPIO_PIN_state)
 * Note				-None
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIO_PortX, uint16_t PinNumber)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	807b      	strh	r3, [r7, #2]
	uint8_t bitStatus;

	if (((GPIO_PortX->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET )
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	887b      	ldrh	r3, [r7, #2]
 800034e:	4013      	ands	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <MCAL_GPIO_ReadPin+0x1e>
	{
		bitStatus = GPIO_PIN_SET;
 8000354:	2301      	movs	r3, #1
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e001      	b.n	800035e <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bitStatus = GPIO_PIN_RESET;
 800035a:	2300      	movs	r3, #0
 800035c:	73fb      	strb	r3, [r7, #15]
	}

	return bitStatus;
 800035e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000360:	4618      	mov	r0, r3
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <MCAL_GPIO_TogglePin>:
 * @parameter[in]   -PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @return value    -None
 * Note				-None
 */
void MCAL_GPIO_TogglePin (GPIO_TypeDef *GPIO_PortX, uint16_t PinNumber)
{
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	460b      	mov	r3, r1
 8000374:	807b      	strh	r3, [r7, #2]
	GPIO_PortX->ODR ^= (PinNumber);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	68da      	ldr	r2, [r3, #12]
 800037a:	887b      	ldrh	r3, [r7, #2]
 800037c:	405a      	eors	r2, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	60da      	str	r2, [r3, #12]

}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <main>:
void GPIO_Init();
void delay(unsigned int x);

/* =========== Main Program ========== */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	clock_init();
 8000390:	f000 f82a 	bl	80003e8 <clock_init>
	GPIO_Init();
 8000394:	f000 f83c 	bl	8000410 <GPIO_Init>

	while(1)
	{
		// Check PortA pin1 --> connected with external PUR
		if (MCAL_GPIO_ReadPin(GPIO_PORTA, GPIO_PIN_1) == 0) // Push button pressed. 0 due to pull up
 8000398:	2102      	movs	r1, #2
 800039a:	4811      	ldr	r0, [pc, #68]	; (80003e0 <main+0x54>)
 800039c:	f7ff ffce 	bl	800033c <MCAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d10b      	bne.n	80003be <main+0x32>
		{
			MCAL_GPIO_TogglePin(GPIO_PORTB, GPIO_PIN_1);
 80003a6:	2102      	movs	r1, #2
 80003a8:	480e      	ldr	r0, [pc, #56]	; (80003e4 <main+0x58>)
 80003aa:	f7ff ffde 	bl	800036a <MCAL_GPIO_TogglePin>
			while (MCAL_GPIO_ReadPin(GPIO_PORTA, GPIO_PIN_1) == 0);  // single press
 80003ae:	bf00      	nop
 80003b0:	2102      	movs	r1, #2
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <main+0x54>)
 80003b4:	f7ff ffc2 	bl	800033c <MCAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f8      	beq.n	80003b0 <main+0x24>
		}

		// Check PortA pin13 --> connected with external PDR
		if (MCAL_GPIO_ReadPin(GPIO_PORTA, GPIO_PIN_13) == 1)  // Push button pressed. 1 due to pull down
 80003be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c2:	4807      	ldr	r0, [pc, #28]	; (80003e0 <main+0x54>)
 80003c4:	f7ff ffba 	bl	800033c <MCAL_GPIO_ReadPin>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d104      	bne.n	80003d8 <main+0x4c>
		{
			// Multi Press
			MCAL_GPIO_TogglePin(GPIO_PORTB, GPIO_PIN_13);
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4804      	ldr	r0, [pc, #16]	; (80003e4 <main+0x58>)
 80003d4:	f7ff ffc9 	bl	800036a <MCAL_GPIO_TogglePin>
		}
		delay(2);
 80003d8:	2002      	movs	r0, #2
 80003da:	f000 f84f 	bl	800047c <delay>
		if (MCAL_GPIO_ReadPin(GPIO_PORTA, GPIO_PIN_1) == 0) // Push button pressed. 0 due to pull up
 80003de:	e7db      	b.n	8000398 <main+0xc>
 80003e0:	40010800 	.word	0x40010800
 80003e4:	40010c00 	.word	0x40010c00

080003e8 <clock_init>:
	}
}

/* ======== clock init definition ======= */
void clock_init()
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	// Enable clock of Port A
	RCC_GPIO_PORTA_CLK_EN();
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <clock_init+0x24>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <clock_init+0x24>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]

	// Enable clock of Port B
	RCC_GPIO_PORTB_CLK_EN();
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <clock_init+0x24>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a03      	ldr	r2, [pc, #12]	; (800040c <clock_init+0x24>)
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	6193      	str	r3, [r2, #24]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <GPIO_Init>:

/* ======= GPIO init definition ======== */
void GPIO_Init()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;

	//PA1 input HighZ Floating input (reset state)
	PinCfg.GPIO_Pin_Number = GPIO_PIN_1;
 8000416:	2302      	movs	r3, #2
 8000418:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 800041a:	2301      	movs	r3, #1
 800041c:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIO_PORTA, &PinCfg);
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4814      	ldr	r0, [pc, #80]	; (8000474 <GPIO_Init+0x64>)
 8000424:	f7ff ff07 	bl	8000236 <MCAL_GPIO_Init>


	// Port B -> pin 1 -> output ( push-pull mode )
	// CNF : 00 General purpose output push-pull
	// 01 : Output mode maximum speed 10 MHz
	PinCfg.GPIO_Pin_Number = GPIO_PIN_1;
 8000428:	2302      	movs	r3, #2
 800042a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800042c:	2304      	movs	r3, #4
 800042e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000430:	2301      	movs	r3, #1
 8000432:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	480f      	ldr	r0, [pc, #60]	; (8000478 <GPIO_Init+0x68>)
 800043a:	f7ff fefc 	bl	8000236 <MCAL_GPIO_Init>



	// Port A -> pin 13 -> input ( High impedance = floating )
	PinCfg.GPIO_Pin_Number = GPIO_PIN_13;
 800043e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000442:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000444:	2301      	movs	r3, #1
 8000446:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIO_PORTA, &PinCfg);
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4619      	mov	r1, r3
 800044c:	4809      	ldr	r0, [pc, #36]	; (8000474 <GPIO_Init+0x64>)
 800044e:	f7ff fef2 	bl	8000236 <MCAL_GPIO_Init>



	// Port B -> pin 13 -> output ( push-pull mode )
	PinCfg.GPIO_Pin_Number = GPIO_PIN_13;
 8000452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000456:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000458:	2304      	movs	r3, #4
 800045a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800045c:	2301      	movs	r3, #1
 800045e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIO_PORTB, &PinCfg);
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	4619      	mov	r1, r3
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <GPIO_Init+0x68>)
 8000466:	f7ff fee6 	bl	8000236 <MCAL_GPIO_Init>

}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010800 	.word	0x40010800
 8000478:	40010c00 	.word	0x40010c00

0800047c <delay>:

void delay(unsigned int x)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	unsigned int i, j;
	for (i = 0;i < x; i++)
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	e00b      	b.n	80004a2 <delay+0x26>
	{
		for (j = 0; j < 255; j++);
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	e002      	b.n	8000496 <delay+0x1a>
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	3301      	adds	r3, #1
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	2bfe      	cmp	r3, #254	; 0xfe
 800049a:	d9f9      	bls.n	8000490 <delay+0x14>
	for (i = 0;i < x; i++)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	3301      	adds	r3, #1
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d3ef      	bcc.n	800048a <delay+0xe>
	}

}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480c      	ldr	r0, [pc, #48]	; (80004f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004be:	490d      	ldr	r1, [pc, #52]	; (80004f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c0:	4a0d      	ldr	r2, [pc, #52]	; (80004f8 <LoopForever+0xe>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d4:	4c0a      	ldr	r4, [pc, #40]	; (8000500 <LoopForever+0x16>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e2:	f000 f811 	bl	8000508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff ff51 	bl	800038c <main>

080004ea <LoopForever>:

LoopForever:
    b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   r0, =_estack
 80004ec:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004f8:	08000570 	.word	0x08000570
  ldr r2, =_sbss
 80004fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000500:	2000001c 	.word	0x2000001c

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <__libc_init_array>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	2500      	movs	r5, #0
 800050c:	4e0c      	ldr	r6, [pc, #48]	; (8000540 <__libc_init_array+0x38>)
 800050e:	4c0d      	ldr	r4, [pc, #52]	; (8000544 <__libc_init_array+0x3c>)
 8000510:	1ba4      	subs	r4, r4, r6
 8000512:	10a4      	asrs	r4, r4, #2
 8000514:	42a5      	cmp	r5, r4
 8000516:	d109      	bne.n	800052c <__libc_init_array+0x24>
 8000518:	f000 f81a 	bl	8000550 <_init>
 800051c:	2500      	movs	r5, #0
 800051e:	4e0a      	ldr	r6, [pc, #40]	; (8000548 <__libc_init_array+0x40>)
 8000520:	4c0a      	ldr	r4, [pc, #40]	; (800054c <__libc_init_array+0x44>)
 8000522:	1ba4      	subs	r4, r4, r6
 8000524:	10a4      	asrs	r4, r4, #2
 8000526:	42a5      	cmp	r5, r4
 8000528:	d105      	bne.n	8000536 <__libc_init_array+0x2e>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000530:	4798      	blx	r3
 8000532:	3501      	adds	r5, #1
 8000534:	e7ee      	b.n	8000514 <__libc_init_array+0xc>
 8000536:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800053a:	4798      	blx	r3
 800053c:	3501      	adds	r5, #1
 800053e:	e7f2      	b.n	8000526 <__libc_init_array+0x1e>
 8000540:	08000568 	.word	0x08000568
 8000544:	08000568 	.word	0x08000568
 8000548:	08000568 	.word	0x08000568
 800054c:	0800056c 	.word	0x0800056c

08000550 <_init>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr

0800055c <_fini>:
 800055c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055e:	bf00      	nop
 8000560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000562:	bc08      	pop	{r3}
 8000564:	469e      	mov	lr, r3
 8000566:	4770      	bx	lr
